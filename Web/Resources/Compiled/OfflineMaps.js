function shim(e,t,i){if("string"==typeof e&&(i=t,t=e),"undefined"==typeof i)return void console.warn("Undefined shim for: "+t);for(var n=t.split("."),a=null,s=window,r=0,o=n.length;r<o;r++)a=n[r],r==o-1?s[a]=i:s[a]||(s[a]={}),s=s[a]}require({cache:{"Mapping/modules/OfflineMaps/ListOfflineMapsView":function(){define(["require","exports","geocortex/framework/ui/ViewBase","./OfflineMapsModule"],function(e,t,i,n){"use strict";var a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._offlineMapIfBusyBindingTokens={},t}return __extends(t,e),t.prototype.attach=function(t){e.prototype.attach.call(this,t),t&&(t.isBusy.bind(this,this._calculateIsBusy),t.mergedOfflineMaps.bind(this,this._offlineMapsChanged))},t.prototype.activated=function(){e.prototype.activated.call(this),this.viewModel.activate()},t.prototype.handleOfflineMapClick=function(e,t,i){var a=this;if(!i.isActive.get())if(i.isDownloaded.get()){if(this.isBusy.get())return;i.isBusy.set(!0),this.app.offlineManager.activateOfflineMap(i.doc,!0).then(function(){i.isBusy.set(!1)},function(e){i.isBusy.set(!1),a.app.trace.error("Failed to activate offline map. "+(e.message||e.toString())),a.app.command("Alert").execute(a.getResource("language-offline-maps-activate-failed"))})}else{if(i.isBusy.get())return;this.app.command("Confirm").execute(this.getResource("language-offline-maps-add-confirm"),i.doc.title,function(e){e&&a._guaranteeOfflineMapContent(i).then(function(e){n.OfflineMapsModule._execCommandFromConfig(a.app,a.configuration.download,{offlineMap:e})},function(e){a.app.trace.error("Failed to download offline map. "+(e.message||e.toString())),a.app.command("Alert").execute(e.message||e.toString())})})}},t.prototype.handleOfflineMapForgetClick=function(e,t,i){var n=this;!i.isDownloaded.get()||i.isActive.get()||i.isBusy.get()||this.app.command("Confirm").execute(this.getResource("language-offline-maps-delete-from-device-confirm"),i.doc.title,function(e){e&&(i.isBusy.set(!0),n.app.offlineManager.removeOfflineMap(i.doc).then(function(){i.isBusy.set(!1),n._calculateIsBusy()},function(e){i.isBusy.set(!1),n.app.command("Alert").execute(e.message||e.toString()),n._calculateIsBusy()}))})},t.prototype.handleOfflineMapSyncClick=function(e,t,i){var a=this;i.isDownloaded.get()&&!i.isBusy.get()&&this.app.site.documentStore.getById(i.doc.id,!0).then(function(e){return e},function(e){return a.app.trace.warning("Error fetching existing offline map: "+e),i.doc}).then(function(e){n.OfflineMapsModule._execCommandFromConfig(a.app,a.configuration.sync,{offlineMap:e})})},t.prototype.handleDeactivateOfflineMapClick=function(e,t,i){var n=this;if(!this.isBusy.get()&&this.viewModel.hasActiveOfflineMap.get()){var a=this.app.offlineManager.getActiveOfflineMap();if(a){var s=this.viewModel.offlineManagerOfflineMaps.get().filter(function(e){return e.doc.id===a.id})[0];if(!s)return void this.app.trace.error("Can't find view model matching the active offline map.");this.isBusy.set(!0),this.app.offlineManager.deactivateOfflineMap(!0).then(function(){n.isBusy.set(!1)},function(e){n.isBusy.set(!1),n.app.command("Alert").execute(e.message||e.toString())})}}},t.prototype.handleThumbnailLoadError=function(e,t,i){t.src!==this.viewModel.defaultThumbnail&&(t.src=this.viewModel.defaultThumbnail,t.src!==this.viewModel.defaultThumbnail&&(this.viewModel.defaultThumbnail=t.src))},t.prototype.resolveWidget=function(t,i,n){switch(e.prototype.resolveWidget.call(this,t,i,n),t){case"ListOfflineMapsActionsWidget":return this.app.menuRegistry.createMenuWidget(this,i,n)}},t.prototype._guaranteeOfflineMapContent=function(e){return e.doc.content?Promise.resolve(e.doc):this.app.site.documentStore.getById(e.doc.id,!0).then(function(t){return e.update(t),t})},t.prototype._offlineMapsChanged=function(e){for(var t=e.rangeStart;t<=e.rangeEnd;t++){var i=this.viewModel.mergedOfflineMaps.getAt(t);switch(e.type){case"append":case"insert":case"set":this._offlineMapIfBusyBindingTokens[i.doc.id]=i.isBusy.bind(this,this._calculateIsBusy);break;case"remove":case"clear":i.isBusy.unbind(this._offlineMapIfBusyBindingTokens[i.doc.id]),delete this._offlineMapIfBusyBindingTokens[i.doc.id]}}},t.prototype._calculateIsBusy=function(){for(var e=this.viewModel.isBusy.get(),t=0,i=this.viewModel.mergedOfflineMaps.length();!e&&t<i;t++)e=this.viewModel.mergedOfflineMaps.getAt(t).isBusy.get();this.isBusy.set(e)},t}(i.ViewBase);t.ListOfflineMapsView=a})},"Mapping/modules/OfflineMaps/ListOfflineMapsViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/ManageOfflineMapsView":function(){define(["require","exports","geocortex/framework/ui/ViewBase","./OfflineMapsModule"],function(e,t,i,n){"use strict";var a=function(e){function t(t,i){var n=e.call(this,t,i)||this;return n._isManaging=!1,n.app.event("ViewContainerViewClosedEvent").subscribe(n,n._onViewContainerViewClosedEvent),n}return __extends(t,e),t.prototype.attach=function(t){e.prototype.attach.call(this,t),t&&(this.isBusy.sync(t.isBusy),t.showManageDoneButton.set(this.configuration.showDonebutton!==!1))},t.prototype.activated=function(){e.prototype.activated.call(this),this.viewModel.activate(),this._isManaging||(this.viewModel.startManaging(),this._isManaging=!0)},t.prototype.handleEditOfflineMapClick=function(e,t,i){var a=this;if(!this.isBusy.get()){if(i.doc.content)return void n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.editOfflineMap,{offlineMap:i.doc});this.isBusy.set(!0),this.app.site.documentStore.getById(i.doc.id,!0).then(function(e){i.update(e),n.OfflineMapsModule._execCommandFromConfig(a.app,a.configuration.editOfflineMap,{offlineMap:i.doc}),a.isBusy.set(!1)},function(e){a.app.trace.error("Error fetching offlinemap document. "+(e.message||e));var t=a.getResource("language-offline-maps-fetch-error"),i=a.getResource("language-offline-maps-fetch-error-title");a.app.command("Alert").execute(t,i),a.isBusy.set(!1)})}},t.prototype.handleDeleteOfflineMapClick=function(e,t,i){var n=this;this.isBusy.get()||this.app.command("Confirm").execute(this.getResource("language-offline-maps-delete-from-server").format(i.title.get()),this.getResource("language-offline-maps-delete-from-server-title"),function(e){e&&n.viewModel.deleteOfflineMap(i)})},t.prototype.handleNewOfflineMapClick=function(e,t,i){this.isBusy.get()||n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.newOfflineMap)},t.prototype.handleDoneClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id),this._stopManaging()},t.prototype._onViewContainerViewClosedEvent=function(e){e.viewId===this.id&&this._stopManaging()},t.prototype._stopManaging=function(){this.viewModel.stopManaging(),this._isManaging=!1},t.prototype.handleThumbnailLoadError=function(e,t,i){t.src!==this.viewModel.defaultThumbnail&&(t.src=this.viewModel.defaultThumbnail,t.src!==this.viewModel.defaultThumbnail&&(this.viewModel.defaultThumbnail=t.src))},t.prototype.resolveWidget=function(t,i,n){switch(e.prototype.resolveWidget.call(this,t,i,n),t){case"ManageOfflineMapsActionsWidget":return this.app.menuRegistry.createMenuWidget(this,i,n)}},t}(i.ViewBase);t.ManageOfflineMapsView=a})},"Mapping/modules/OfflineMaps/ManageOfflineMapsViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/ModuleConfig":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/OfflineMapModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables","geocortex/infrastructure/FormatUtils"],function(e,t,i,n,a){"use strict";var s=function(e){function t(t,i,a){var s=e.call(this,t,i)||this;return s.title=new n.Observable,s.thumbnail=new n.Observable,s.isBusy=new n.Observable((!1)),s.isActive=new n.Observable((!1)),s.isDownloaded=new n.Observable((!1)),s.hasProgress=new n.Observable((!1)),s.isOrphaned=new n.Observable((!1)),s.canEdit=new n.Observable((!1)),s.canChange=new n.Observable((!1)),s.numberOfEdits=new n.Observable(0),s.lastSyncTime=new n.Observable(""),s.dataSizeBytes=new n.Observable(0),s.dataSizeDisplayValue=new n.Observable("…"),s.update(a),s.dataSizeDisplayValue.syncTransform(s.dataSizeBytes,function(e){return s._getDisplayBytes(e)}),s}return __extends(t,e),t.prototype._getDisplayBytes=function(e){if(0===e)return"…";var t=e/1024,i=t/1024,n=i/1024;return n>=1?this.getResource("language-offline-maps-size-gb").format(a.formatNumber(n,null,{fractionalDigits:2})):i>=1?this.getResource("language-offline-maps-size-mb").format(a.formatNumber(i,null,{fractionalDigits:1})):this.getResource("language-offline-maps-size-kb").format(a.formatNumber(t,null,{fractionalDigits:0}))},t.prototype.update=function(e){this.doc=e,this.title.set(e.title),this.thumbnail.set(e.thumbnail?e.thumbnail.location:null),this.canEdit.set(e.access.edit),this.canChange.set(e.access.change)},t}(i.ViewModelBase);t.OfflineMapModel=s})},"Mapping/modules/OfflineMaps/OfflineMapsModule":function(){define(["require","exports","geocortex/framework/application/ModuleBase","geocortex/infrastructure/offline/SyncEngine","geocortex/infrastructure/ArrayUtils"],function(e,t,i,n,a){"use strict";var s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._syncNotificationString="SyncNotifications",t._oneWeekSyncNotificationString="OneWeekSyncNotification",t._syncNotificationOfflineString="SyncNotificationsOffline",t}return __extends(t,e),t.prototype.initialize=function(t){e.prototype.initialize.call(this,t),this.app.offlineManager.aoiMask.configure(t.aoiMask),this.app.isNative.get()&&(this.app.event("MapLoadedEvent").subscribe(this,this._checkForInternetAndDisplayNotification),this.app.event("MapLoadedEvent").subscribe(this,this._mapLoadedNotificationsHandler),this.app.event("OfflineMapEditedEvent").subscribe(this,this._offlineMapEditedEventHandler))},t._execCommandsFromConfig=function(e,t,i){var n=this;t&&t.forEach(function(t){return n._execCommandFromConfig(e,t,i)})},t._execCommandFromConfig=function(e,i,n){if(i){var a=i.commandParameter;a&&n&&(a=t._replaceCommandParameterTokens(a,n)),e.command(i.command).execute(a)}},t._replaceCommandParameterTokens=function(e,t){var i,n=this;if("string"==typeof e){i=/{{(.+)}}/.exec(e);var a=t[i[1]];return a}var a={};for(var s in e)e.hasOwnProperty(s)&&("string"==typeof e[s]&&(i=/{{(.+)}}/.exec(e[s]))&&t.hasOwnProperty(i[1])?a[s]=t[i[1]]:dojo.isArray(e[s])?a[s]=e[s].map(function(e){return n._replaceCommandParameterTokens(e,t)}):"object"==typeof e[s]?a[s]=this._replaceCommandParameterTokens(e[s],t):a[s]=e[s]);return a},t.prototype._checkForInternetAndDisplayNotification=function(){var e=this,t=!1;this.app.offlineManager.hasInternetCheck().then(function(e){t=e.result}),setInterval(function(){e.app.offlineManager.hasInternetCheck().then(function(i){t!=i.result&&(t=i.result,t?(e.displayOnlineSyncNotification(),e.app.command("RemoveNotification").execute(e._syncNotificationOfflineString)):(e.displayOfflineSyncNotification(),e.app.command("RemoveNotification").execute(e._syncNotificationString),e.app.command("RemoveNotification").execute(e._oneWeekSyncNotificationString)))})},6e4)},t.prototype._shouldDisplayWeeklyNotification=function(e,t){return this._daysBetween(e,new Date)>6&&this._daysBetween(t,new Date)>6},t.prototype._offlineMapEditedEventHandler=function(e){e&&e.offlineMaps?this.displayOnlineSyncNotification(e):this.displayOnlineSyncNotification(null)},t.prototype._mapLoadedNotificationsHandler=function(){this.displayOnlineSyncNotification(null)},t.prototype.displayOfflineSyncNotification=function(){var e=this,t=this.app.offlineManager.getOfflineMaps();if(t){var i=0;t.forEach(function(t,s){n.SyncEngine.getSyncInfo(e.app,t.id).then(function(t){var n=a.ArrayUtils.sum(t.servers,function(e){return e.numberOfAdds+e.numberOfDeletes+e.numberOfEdits});if(i+=n,i>0){var s=e.getResource("language-offline-maps-unsynced-edits-offline").format(i);1==i&&(s=e.getResource("language-offline-maps-unsynced-edit-offline"));var r={id:e._syncNotificationOfflineString,text:s,iconProperties:{uri:"Resources/Images/Icons/toolbar/sync-24.png",altText:"Sync Button"},closeButton:{}};e.app.command("DisplayNotification").execute(r)}})})}},t.prototype.displayOnlineSyncNotification=function(e){var t=this;this.app.offlineManager.hasInternetCheck().then(function(i){if(i.result){var s=t.app.offlineManager.getOfflineMaps();if(e&&(s=e.offlineMaps),s){t.app.command("RemoveNotification").execute(t._oneWeekSyncNotificationString);var r=[],o=0,l=new Date,p=new Date;s.forEach(function(e,i){n.SyncEngine.getSyncInfo(t.app,e.id).then(function(i){var n=a.ArrayUtils.sum(i.servers,function(e){return e.numberOfAdds+e.numberOfDeletes+e.numberOfEdits}),s=!1;n>0&&(r.push(e),s=!0),o+=n;var d=i.getOldestSyncTime();if(!s&&t._daysBetween(d,new Date)&&r.push(e),l>d&&(l=d),p>i.lastSyncNotificationDate&&(p=i.lastSyncNotificationDate),o>0){var f=t.getResource("language-offline-maps-unsynced-edits").format(o);1==o&&(f=t.getResource("language-offline-maps-unsynced-edit"));var c={id:t._syncNotificationString,text:f,iconProperties:{uri:"Resources/Images/Icons/toolbar/sync-24.png",altText:"Sync Button"},buttons:[{text:t.getResource("language-offline-maps-sync-now-button"),callback:function(){t.app.command("StartOfflineFeatureSync").execute({offlineMaps:r})}}]};t.app.command("DisplayNotification").execute(c)}else if(t.app.command("RemoveNotification").execute(t._syncNotificationString),t._shouldDisplayWeeklyNotification(l,p)){var c={id:t._oneWeekSyncNotificationString,text:t.getResource("language-offline-maps-not-synced-in-one-week").format(t._daysBetween(l,new Date)),iconProperties:{uri:"Resources/Images/Icons/toolbar/sync-24.png",altText:"Sync Button"},buttons:[{text:t.getResource("language-offline-maps-sync-now-button"),callback:function(){t.app.command("StartOfflineFeatureSync").execute({offlineMaps:r})}}],closeButton:{callback:function(){t.app.nativeManager.message("SaveSyncJsonData",{localServerNamespace:t.app.localServerNamespace,lastSyncNotificationDate:new Date})}}};t.app.command("DisplayNotification").execute(c)}})})}else t.app.command("RemoveNotification").execute(t._syncNotificationString)}else t.app.command("RemoveNotification").execute(t._syncNotificationString),t.app.command("RemoveNotification").execute(t._oneWeekSyncNotificationString)})},t.prototype._daysBetween=function(e,t){var i=864e5,n=e.getTime(),a=t.getTime(),s=a-n,r=Math.floor(s/i);return r},t}(i.ModuleBase);t.OfflineMapsModule=s})},"Mapping/modules/OfflineMaps/OfflineMapsViewModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables","./OfflineMapModel","geocortex/infrastructure/offline/OfflineMap","geocortex/infrastructure/offline/SyncEngine","geocortex/infrastructure/ArrayUtils","geocortex/infrastructure/FormatUtils"],function(e,t,i,n,a,s,r,o,l){"use strict";function p(e,t){return(e.doc.title||"").toLocaleLowerCase().localeCompare((t.doc.title||"").toLocaleLowerCase())}var d=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.docstoreOfflineMaps=new n.ObservableCollection,t.offlineManagerOfflineMaps=new n.ObservableCollection,t.mergedOfflineMaps=new n.ObservableCollection,t.canCreate=new n.Observable((!1)),t.hasActiveOfflineMap=new n.Observable((!1)),t.showManageDoneButton=new n.Observable((!0)),t.switchedToOnlineMap=new n.Observable((!1)),t.isBusy=new n.Observable((!1)),t.statusFetching=new n.Observable((!1)),t.statusEmpty=new n.Observable((!1)),t.statusOffline=new n.Observable((!1)),t.statusUnsupported=new n.Observable((!1)),t.statusNative=new n.Observable((!1)),t._activated=!1,t._populated=!1,t._queryPageSize=20,t}return __extends(t,e),t.prototype.initialize=function(t){var i=this;e.prototype.initialize.call(this,t),this.defaultThumbnail=t.defaultThumbnail,this.mergedOfflineMaps.bind(this,function(){i.statusEmpty.set(0===i.mergedOfflineMaps.length())}),this.app.nativeManager.onNativeInitialized().then(function(){i.statusNative.set(!0)}),this.app.waitUntilSiteInitialized().then(function(){return i.app.site.documentStore.onInitialized()}).then(function(){return i.canCreate.set(i.app.site.documentStore.canCreate())}),this._downloadedOfflineMapsLoaded({offlineMaps:this.app.offlineManager.getOfflineMaps(),activeOfflineMap:this.app.offlineManager.getActiveOfflineMap(),offlineMapStates:this.app.offlineManager.getOfflineMapsWithState().map(function(e){return e.state})}),this.app.command("RefreshOfflineMapsList").register(this,this.populateFromDocStore),this.app.event("OfflineMapsLoadedEvent").subscribe(this,this._downloadedOfflineMapsLoaded),this.app.event("OfflineMapAddedEvent").subscribe(this,this._downloadedOfflineMapAdded),this.app.event("OfflineMapRemovedEvent").subscribe(this,this._refreshOfflineMapStatus),this.app.event("OfflineMapPartialDataRemovedEvent").subscribe(this,this._refreshOfflineMapStatus),this.app.event("OfflineMapSyncedEvent").subscribe(this,this._downloadedOfflineMapSynced),this.app.event("OfflineMapSyncErrorEvent").subscribe(this,this._downloadedOfflineMapSyncError),this.app.event("OfflineMapActivatedEvent").subscribe(this,this._offlineMapActivated),this.app.event("FeatureCreatedEvent").subscribe(this,this._updateMetadataForActiveOfflineMap),this.app.event("FeatureEditedEvent").subscribe(this,this._updateMetadataForActiveOfflineMap),this.app.event("FeatureDeletedEvent").subscribe(this,this._updateMetadataForActiveOfflineMap),t.saveOfflineMaps&&this.app.event("OfflineMapEditorFinishedEvent").subscribe(this,this._onOfflineMapEditorFinishedEvent),t.menus&&this.app.menuRegistry&&this.app.menuRegistry.loadMenus({menus:t.menus})},t.prototype.activate=function(){var e=this;this._activated||(this._activated=!0,this.app.waitUntilSiteInitialized()["finally"](function(){e.statusUnsupported.set(!e.app.site.documentStore.supported),e.populateFromDocStore()}))},t.prototype.startManaging=function(){this.app.nativeManager.nativeInitialized&&(this._offlineMapWhenManagingStarted=this.app.offlineManager.getActiveOfflineMap(),this._offlineMapWhenManagingStarted&&this.app.offlineManager.deactivateOfflineMap(!1),this.switchedToOnlineMap.set(!!this._offlineMapWhenManagingStarted))},t.prototype.stopManaging=function(){this.app.nativeManager.nativeInitialized&&this._offlineMapWhenManagingStarted&&this.app.offlineManager.activateOfflineMap(this._offlineMapWhenManagingStarted,!1)},t.prototype.populateFromDocStore=function(){var e=this;if(this.app.site.documentStore.supported&&this._activated){this.isBusy.set(!0),this.statusFetching.set(!0);var t={filters:{require:[{field:"fileType",method:"values",range:[{string:"offlinemap"}]},{field:"properties.siteId.string",method:"values",range:[{string:this.app.site.id}]}]},limit:this._queryPageSize};this._queryDocStore(t,0,[]).then(function(t){e._populated=!0,e.statusOffline.set(!1),e.docstoreOfflineMaps.set(t)})["catch"](function(t){e.statusOffline.set(!0),e.app.trace.error("Unable to fetch offline maps. "+t)}).then(function(){e.statusFetching.set(!1),e.updateMergedOfflineMaps()})["catch"](function(t){e.app.trace.error("Unable to update metadata for offline maps. "+t)})["finally"](function(){e.isBusy.set(!1)})}},t.prototype._queryDocStore=function(e,t,i){var n=this;return e.start=t,Promise.resolve(this.app.site.documentStore.query(e)).then(function(s){var r=s.results.map(function(e){return new a.OfflineMapModel(n.app,n.libraryId,e.entity)});return r.length>0&&(i=i.concat(r)),r.length==e.limit?n._queryDocStore(e,t+e.limit,i):Promise.resolve(i.sort(p))})},t.prototype.deleteOfflineMap=function(e){var t=this;this.app.site.documentStore.supported&&(this.isBusy.set(!0),this.app.site.documentStore.deleteById(e.doc.id).then(function(){t.isBusy.set(!1),t.docstoreOfflineMaps.removeItem(e),t.updateMergedOfflineMaps()},function(i){if(t.isBusy.set(!1),i.error&&404===i.error.code)return t.docstoreOfflineMaps.removeItem(e),void t.updateMergedOfflineMaps();var n=i.message||i.error&&i.error.message||i.toString();t.app.command("Alert").execute(n,t.getResource("language-offline-maps-delete-from-server-title"))}))},t.prototype.updateOfflineManagerOfflineMaps=function(){var e=this,t=this.app.offlineManager.getOfflineMapsWithState().map(function(t){var i=new a.OfflineMapModel(e.app,e.libraryId,t.offlineMap);return i.isDownloaded.set(t.state.isDownloaded),i.hasProgress.set(t.state.hasProgress),i});return this.offlineManagerOfflineMaps.set(t),this.offlineManagerOfflineMaps},t.prototype.updateMergedOfflineMaps=function(){for(var e=this.app.offlineManager.getActiveOfflineMap(),t=this._calculateMergedOfflineMaps(),i=0;i<t.length;i++){var n=t[i];this._updateMetadataForOfflineMap(n),e&&n.doc.id===e.id&&n.isActive.set(!0)}this.mergedOfflineMaps.set(t)},t.prototype._calculateMergedOfflineMaps=function(){var e=this,t=this.updateOfflineManagerOfflineMaps().get(),i=this.docstoreOfflineMaps.get();this._populated&&t.forEach(function(t){var n=e.app.site.documentStore.isInitialized&&e.app.site.documentStore.userMonikers.some(function(e){return t.doc.access&&t.doc.access.monikerIds&&t.doc.access.monikerIds.indexOf(e.id)!==-1})&&!i.some(function(e){return e.doc.id===t.doc.id});t.isOrphaned.set(n)}),i=i.filter(function(e){return!t.some(function(t){return t.doc.id===e.doc.id})});var n=t.concat(i).sort(p);return n},t.prototype._downloadedOfflineMapsLoaded=function(e){this.updateMergedOfflineMaps(),this._offlineMapActivated({offlineMap:e.activeOfflineMap})},t.prototype._downloadedOfflineMapAdded=function(e){this.updateMergedOfflineMaps()},t.prototype._refreshOfflineMapStatus=function(e){this.updateMergedOfflineMaps()},t.prototype._offlineMapActivated=function(e){this.hasActiveOfflineMap.set(!!e.offlineMap);for(var t=0,i=this.offlineManagerOfflineMaps.length();t<i;t++){var n=this.offlineManagerOfflineMaps.getAt(t);n.isActive.set(null!=e.offlineMap&&e.offlineMap.id===n.doc.id)}},t.prototype._downloadedOfflineMapSynced=function(e){for(var t=0,i=this.offlineManagerOfflineMaps.length();t<i;t++){var n=this.offlineManagerOfflineMaps.getAt(t);if(n.doc.id===e.offlineMap.id)return n.update(e.offlineMap),void this._updateMetadataForOfflineMap(e.offlineMap)}},t.prototype._downloadedOfflineMapSyncError=function(e){this._updateMetadataForOfflineMap(e.offlineMap)},t.prototype._refreshActiveMapState=function(){if(this.hasActiveOfflineMap.get()){var e=this._getActiveMap();e.isActive.set(!0)}},t.prototype._getActiveMap=function(){if(this.hasActiveOfflineMap.get())for(var e=this.app.offlineManager.getActiveOfflineMap().id,t=0;t<this.mergedOfflineMaps.length();t++){var i=this.mergedOfflineMaps.getAt(t);if(i.doc.id===e)return i}},t.prototype._updateMetadataForActiveOfflineMap=function(){this.app.offlineManager.isOfflineMapActive.get()&&this._updateMetadataForOfflineMap(this.app.offlineManager.getActiveOfflineMap())},t.prototype._updateMetadataForAllOfflineMaps=function(){var e=this,t=this.mergedOfflineMaps.get().map(function(t){return e._updateMetadataForOfflineMap(t)});return Promise.all(t)},t.prototype._updateMetadataForOfflineMap=function(e){var t=this;if(!this.app.nativeManager.nativeInitialized)return Promise.resolve();var i=e instanceof a.OfflineMapModel?e:this.mergedOfflineMaps.get().filter(function(t){return t.doc.id===e.id})[0];if(!i)return Promise.reject("Offline map not downloaded.");var n=[];i.dataSizeBytes.set(0);var p=0,d=i.lastSyncTime.get(),f=null;n.push(r.SyncEngine.getSyncInfo(this.app,i.doc.id).then(function(e){p=o.ArrayUtils.sum(e.servers,function(e){return e.numberOfAdds+e.numberOfDeletes+e.numberOfEdits}),d=l.formatDate(o.ArrayUtils.max(e.servers,function(e){return e.lastSyncTime})),f=i.dataSizeBytes.get()+o.ArrayUtils.sum(e.servers,function(e){return e.totalSizeInBytes})})["finally"](function(){i.numberOfEdits.set(p),i.lastSyncTime.set(d),i.dataSizeBytes.set(f),t.app.event("OfflineMapEditedEvent").publish({args:{}})})),i.doc.content&&i.doc.content.basemaps.filter(function(e){return e.sourceType===s.OfflineMapBasemap.Type.EXPORT_TILES}).forEach(function(e){n.push(t.app.nativeManager.getViewerResourceInfo(e.filename).then(function(e){"number"==typeof e.length&&i.dataSizeBytes.set(i.dataSizeBytes.get()+e.length)}))});var c=this.app.offlineManager.getOfflineMapWithStateById(i.doc.id);return i.hasProgress.set(!!c&&c.state.hasProgress),Promise.all(n)},t.prototype._onOfflineMapEditorFinishedEvent=function(e){var t=this;if(this.app.site.documentStore.supported&&!e.canceled)if(e.newOfflineMap.contentType="application/json",e.newOfflineMap.fileType="offlinemap",e.existingOfflineMap){e.newOfflineMap.id=e.existingOfflineMap.id;var i=s.OfflineMap.diff(e.existingOfflineMap,e.newOfflineMap);if(!i)return void this.app.trace.warning("OfflineMapEditorFinishedEvent called without any changes to send.  Bailing.");i.content&&(i.content=e.newOfflineMap.content),this.isBusy.set(!0),this.app.site.documentStore.updateById(e.existingOfflineMap.id,i).then(function(e){t.isBusy.set(!1);for(var i=0;i<t.docstoreOfflineMaps.length();i++)if(t.docstoreOfflineMaps.getAt(i).doc.id===e.id){t.docstoreOfflineMaps.getAt(i).update(e);break}},function(e){t.isBusy.set(!1),t.app.trace.error("Error updating offline map in doc store. "+(e.message||e));var i=t.getResource("language-offline-maps-update-profile-error").format(e.message||e),n=t.getResource("language-offline-maps-update-profile-error-title");t.app.command("Alert").execute(i,n)})}else this.isBusy.set(!0),this.app.site.documentStore.add(e.newOfflineMap).then(function(e){t.isBusy.set(!1);var i=new a.OfflineMapModel(t.app,t.libraryId,e),n=t.docstoreOfflineMaps.get().concat([i]).sort(p);t.docstoreOfflineMaps.set(n),t.updateMergedOfflineMaps()},function(e){t.isBusy.set(!1),t.app.trace.error("Error adding offline map to doc store. "+(e.message||e));var i=t.getResource("language-offline-maps-add-error").format(e.message||e),n=t.getResource("language-offline-maps-add-error-title");t.app.command("Alert").execute(i,n)})},t}(i.ViewModelBase);t.OfflineMapsViewModel=d})},"Mapping/modules/OfflineMaps/OfflineMapsViewModelConfiguration":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/Editor/MapState":function(){define(["require","exports"],function(e,t){"use strict";var i=function(){function e(e){var t=this;this.appInfo=e,this.extent=e.map.extent,this.layers={},e.mapInfo.getLayerInfos().forEach(function(e){t.layers[e.uniqueId]={visible:e.isVisible(),definitionExpression:e.getDefinitionExpression()}})}return e.prototype.restore=function(){var e=this;this.appInfo.map.setExtent(this.extent),this.appInfo.mapInfo.getLayerInfos().forEach(function(t){if(e.layers.hasOwnProperty(t.uniqueId))try{t.setEsriLayerVisibility(e.layers[t.uniqueId].visible),t.setDefinitionExpression(e.layers[t.uniqueId].definitionExpression)}catch(i){}})},e}();t.MapState=i})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorBasemap":function(){define(["require","exports","geocortex/framework/observables","geocortex/infrastructure/offline/OfflineMap","geocortex/essentials/MapServiceConstants","geocortex/infrastructure/ExportTilesUtils","geocortex/framework/utils/utils","geocortex/infrastructure/offline/BasemapDownloading"],function(e,t,i,n,a,s,r,o){"use strict";var l=function(){function e(t,s,r){var o=this;this.app=t,this.libraryId=s,this.source=r,this.type=new i.Observable(null),this.isNone=new i.Observable((!0)),this.isStatic=new i.Observable((!1)),this.isExportTiles=new i.Observable((!1)),this.isValid=new i.Observable((!0)),this.geometry=new i.Observable(null),this.supportsStatic=new i.Observable((!1)),this.supportsExportTiles=new i.Observable((!1)),this.supportsAny=new i.Observable((!1)),this.staticTpks=new i.ObservableCollection([]),this.staticTpk=new i.Observable(null),this.exportTilesMinLevel=new i.Observable(0),this.exportTilesMaxLevel=new i.Observable(22),this.exportTilesMapServiceMinLevel=new i.Observable(0),this.exportTilesMapServiceMaxLevel=new i.Observable(22),this.exportTilesRefreshInterval=new i.Observable(0),this.filename=new i.Observable(""),this.displayName=new i.Observable(""),this.iconUri=new i.Observable(""),this.size=new i.Observable(e.sizeUnknown),this.sizePresentable=new i.Observable(""),this.errorConfigurationMessage=new i.Observable(null),this.errorExportTilesMessage=new i.Observable(null),this._hasTiledMapService=!1,this._staticTpksSet=!1,this._exportFileName=null,this._calculateSizeGen=1,this.displayName.set(r.displayName),this.iconUri.set(r.iconUri),this.type.bind(this,function(e){o.isNone.set("none"===e),o.isStatic.set(e===n.OfflineMapBasemap.Type.PREGENERATED),o.isExportTiles.set(e===n.OfflineMapBasemap.Type.EXPORT_TILES),o._calculateSize(),o._calculateFileName()}),this.staticTpks.bind(this,function(){o._staticTpksSet=!0;var e=o.staticTpks.isEmpty();o.supportsStatic.set(o._hasTiledMapService&&!e),o.staticTpk.get()||e||o.staticTpk.set(o.staticTpks.getAt(0))}),this.staticTpk.bind(this,function(){o._calculateSize(),o._calculateFileName()}),this.supportsExportTiles.bind(this,function(){return o.supportsAny.set(o.supportsExportTiles.get()||o.supportsStatic.get())}),this.supportsStatic.bind(this,function(){return o.supportsAny.set(o.supportsExportTiles.get()||o.supportsStatic.get())}),this.exportTilesMinLevel.bind(this,function(){return o._calculateSize()}),this.exportTilesMaxLevel.bind(this,function(){return o._calculateSize()}),this.exportTilesMapServiceMinLevel.bind(this,function(e){o.exportTilesMinLevel.get()<e&&o.exportTilesMinLevel.set(e),o.exportTilesMaxLevel.get()<e&&o.exportTilesMaxLevel.set(e)}),this.exportTilesMapServiceMaxLevel.bind(this,function(e){o.exportTilesMinLevel.get()>e&&o.exportTilesMinLevel.set(e),o.exportTilesMaxLevel.get()>e&&o.exportTilesMaxLevel.set(e)}),this.geometry.bind(this,function(){return o._calculateSize()}),this.size.bind(this,function(){return o._calculateIsValid()}),this.sizePresentable.syncTransform(this.size,function(e){return o._formatBytes(e)}),this._hasTiledMapService=r.services.filter(function(e){return e.mapService.mapServiceType===a.MapServiceType.TILED}).length>0,this._hasTiledMapService?this._calculateExportTilesMapServiceUri():(this.supportsStatic.set(!1),this.supportsExportTiles.set(!1),this.errorConfigurationMessage.set(this.getResource("language-offlinemapeditor-basemaps-notiled")))}return e.prototype.load=function(e){var t=this;switch(this.type.set(e.sourceType),this.filename.set(e.filename),this._exportFileName=null,e.sourceType){case n.OfflineMapBasemap.Type.PREGENERATED:this._staticTpksSet?this._setStaticTpkByUrl(e.url):this.staticTpks.once(this,function(){t._setStaticTpkByUrl(e.url)});break;case n.OfflineMapBasemap.Type.EXPORT_TILES:this.exportTilesMinLevel.set(Math.max(e.minLevel,this.app.map.getMinZoom())),this.exportTilesMaxLevel.set(Math.min(e.maxLevel,this.app.map.getMaxZoom())),this.exportTilesRefreshInterval.set(this._sanitizeRefreshInterval(e.refreshInterval)),this._exportFileName=e.filename;break;default:throw new Error("Unknown sourceType.")}},e.prototype.save=function(){switch(this.type.get()){case"none":throw new Error("This OfflineMapBasemap is set to none and not savable.");case n.OfflineMapBasemap.Type.PREGENERATED:return{baseMapId:this.source.id,sourceType:this.type.get(),url:this.staticTpk.get()?this.staticTpk.get().url:null,filename:this.filename.get(),size:Math.max(this.size.get(),0)};case n.OfflineMapBasemap.Type.EXPORT_TILES:return{baseMapId:this.source.id,sourceType:this.type.get(),url:this._exportTilesMapServiceUri,filename:this.filename.get(),minLevel:this.exportTilesMinLevel.get(),maxLevel:this.exportTilesMaxLevel.get(),size:Math.max(this.size.get(),0),refreshInterval:this._sanitizeRefreshInterval(this.exportTilesRefreshInterval.get())};default:throw new Error("Unknown sourceType.")}},e.prototype.reset=function(){this.type.set("none"),this.staticTpks.isEmpty()||this.staticTpk.set(this.staticTpks.getAt(0)),this.exportTilesMinLevel.set(Math.max(this.exportTilesMapServiceMinLevel.get(),this.app.map.getMinZoom())),this.exportTilesMaxLevel.set(Math.min(this.exportTilesMapServiceMaxLevel.get(),this.app.map.getMaxZoom())),
this.exportTilesRefreshInterval.set(0),this._exportFileName=null},e.prototype._calculateExportTilesMapServiceUri=function(){var e=this;if(this.errorConfigurationMessage.set(null),this.source.exportTilesMapServiceUri)this._getExportTilesMapServiceInfo(this.source.exportTilesMapServiceUri).then(function(t){return e._enableExportTilesSupport(e.source.exportTilesMapServiceUri,t)},function(t){e.app.trace.warning("Unable to use configured Map Service '"+e.source.exportTilesMapServiceUri+"' to create the Custom Offline Basemap. "+(t.message||t)),t.message&&/No token available for service /.test(t.message)?e.errorConfigurationMessage.set(e.getResource("language-offlinemapeditor-basemaps-exporttiles-error-agollogin")):t.error&&499==t.error.code?e.errorConfigurationMessage.set(e.getResource("language-offlinemapeditor-basemaps-exporttiles-error-auth")):e.errorConfigurationMessage.set(e.getResource("language-offlinemapeditor-basemaps-exporttiles-error-misconfigured")),e._exportTilesMapServiceUri=null,e.supportsExportTiles.set(!1)});else{var t=this.source.services.map(function(e){return e.mapService.serviceUrl}).filter(function(e){return!!e}),i=t.map(function(t){return e._getExportTilesMapServiceInfo(t)}),n=function(a){a>=i.length?(e._exportTilesMapServiceUri=null,e.supportsExportTiles.set(!1)):i[a].then(function(i){return e._enableExportTilesSupport(t[a],i)},function(){return n(a+1)})};n(0)}},e.prototype._getExportTilesMapServiceInfo=function(e){var t=o.getServiceTokenForMapService(this.app,e);return esri.request({callbackParamName:"callback",content:t?{f:"json",token:t}:{f:"json"},handleAs:"json",url:e}).then(function(e){if(!e.currentVersion||!e.tileInfo)throw new Error("Not a map service.");if(e.currentVersion<10.2)throw new Error("Version not supported.");if(!e.exportTilesAllowed)throw new Error("Export tiles not supported.");return e})},e.prototype._enableExportTilesSupport=function(e,t){var i=t.tileInfo;this._exportTilesMapServiceUri=e,this.exportTilesMapServiceMinLevel.set(i.lods[0].level),this.exportTilesMapServiceMaxLevel.set(i.lods[i.lods.length-1].level),this.supportsExportTiles.set(this._hasTiledMapService)},e.prototype._setStaticTpkByUrl=function(e){var t,i=this.staticTpks.length();for(t=0;t<i&&this.staticTpks.getAt(t).url!==e;t++);t===i&&(t=0),this.staticTpk.set(this.staticTpks.getAt(t))},e.prototype._calculateSize=function(){var t=this;this._calculateSizeHandle&&clearTimeout(this._calculateSizeHandle),this.errorExportTilesMessage.set(null);var i=e.sizeUnknown,n=++this._calculateSizeGen;this.isExportTiles.get()?(i=e.sizeCalculating,this._calculateSizeHandle=setTimeout(function(){if(n===t._calculateSizeGen){var i=t.geometry.get();if(!i)return void t.size.set(e.sizeUnknown);var a=t.exportTilesMinLevel.get(),r=t.exportTilesMaxLevel.get(),l=a!==r?a+"-"+r:""+a,p=o.getServiceTokenForMapService(t.app,t._exportTilesMapServiceUri);s.estimateExportTilesSize(t._exportTilesMapServiceUri,{tilePackage:!0,optimizeTilesForSize:!0,compressionQuality:90,exportBy:"levelId",levels:l,areaOfInterest:JSON.stringify({features:[{geometry:i.toJson()}]}),token:p}).then(function(i){n===t._calculateSizeGen&&(i&&"number"==typeof i.totalSize?t.size.set(i.totalSize):(t.app.trace.error('ExportTilesUtils.estimateExportTilesSize returned unexpected result. "'+JSON.stringify(i)+'"'),t.size.set(e.sizeUnknown)))},function(i){if(n===t._calculateSizeGen){var a=i&&i.message?i.message:i;t.errorExportTilesMessage.set(a),t.app.trace.error("Error fetching TPK size: "+a),t.size.set(e.sizeInvalid)}})}},2e3)):this.isStatic.get()&&this.staticTpk.get()&&(i=this.staticTpk.get().size),this.size.set(i)},e.prototype._calculateFileName=function(){var e=null;if(this.isStatic.get()){var t=this.staticTpk.get();e=t?t.filename:null}else if(this.isExportTiles.get()){if(!this._exportFileName){var i=/([^\/]+)\/MapServer\/?/.exec(this._exportTilesMapServiceUri);this._exportFileName=encodeURIComponent(i?i[1]:this.source.id)+"-"+r.alphaNumericToken(12)+".tpk"}e=this._exportFileName}this.filename.set(e)},e.prototype._calculateIsValid=function(){var e=!1;this.isNone.get()?e=!0:this.isStatic.get()?e=!0:this.isExportTiles.get()&&(e=this.size.get()>=0),this.isValid.set(e)},e.prototype._formatBytes=function(e){if(e===-3)return this.app.getResource(this.libraryId,"language-offlinemapeditor-basemaps-size-invalid");if(e===-2)return this.app.getResource(this.libraryId,"language-offlinemapeditor-basemaps-size-calculating");if(e===-1)return this.app.getResource(this.libraryId,"language-offlinemapeditor-basemaps-size-unknown");if(0===e)return"0";var t;for(t=0;e>1e3;t++)e/=1e3;return e.toFixed(t>0?2:0)+" "+["B","KB","MB","GB","TB","PB"][t]},e.prototype._sanitizeRefreshInterval=function(e){var t=parseInt(e);return isNaN(t)&&(t=0),t<0&&(t=0),t},e.prototype.getResource=function(e){return this.app.getResource(this.libraryId,e)},e}();l.sizeUnknown=-1,l.sizeCalculating=-2,l.sizeInvalid=-3,t.OfflineMapEditorBasemap=l})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorView":function(){define(["require","exports","geocortex/framework/ui/ViewBase","./../OfflineMapsModule"],function(e,t,i,n){"use strict";var a=function(e){function t(t,i){var n=e.call(this,t,i)||this;return n.app.command("ShowOfflineMapEditor").register(n,n._onShowOfflineMapEditor),n.app.event("ViewContainerViewClosedEvent").subscribe(n,n._onViewContainerViewClosedEvent),n}return __extends(t,e),t.prototype._onShowOfflineMapEditor=function(e){this._setTitle(!!e.existingOfflineMap),this.viewModel.startEditing(e),this.app.command("ActivateView").execute(this.id)},t.prototype.activated=function(){e.prototype.activated.call(this),this.viewModel.calculateIsValid()},t.prototype.handleCancelClick=function(e,t,i){this.viewModel.finishEditing(!0),this.app.command("DeactivateView").execute(this.id)},t.prototype.handleDoneClick=function(e,t,i){var n=this;this.isBusy.set(!0),this.viewModel.finishEditing().then(function(){n.isBusy.set(!1),n.app.command("DeactivateView").execute(n.id)})},t.prototype.handleLayersClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showLayersEditor)},t.prototype.handleGeometryClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showGeometryEditor)},t.prototype.handleBasemapsClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showBasemapsEditor)},t.prototype.handleSharingClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showSharingEditor)},t.prototype._setTitle=function(e){if(this.configuration.title){var t=e?this.configuration.title.forExisting:this.configuration.title.forNew;t&&(t.startsWith("@")&&(this.configuration.title.libraryId,t=this.app.getResource(this.configuration.title.libraryId?this.configuration.title.libraryId:this.libraryId,t)),this.title.set(t))}},t.prototype._onViewContainerViewClosedEvent=function(e){e.viewId===this.id&&this.viewModel.finishEditing(!0)},t}(i.ViewBase);t.OfflineMapEditorView=a})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/events/Event","geocortex/infrastructure/offline/OfflineMap","geocortex/framework/observables","./MapState","./Layers/LayerSelectorViewModel","./OfflineMapEditorBasemap","geocortex/infrastructure/documents/GrantEditorViewModel","geocortex/essentials/GeometryUtilities","geocortex/infrastructure/gis/AppInfo","./../OfflineMapsModule","geocortex/essentials/ReportParameters","geocortex/essentials/documents/DocumentConstants"],function(e,t,i,n,a,s,r,o,l,p,d,f,c,u,g){"use strict";var m=function(e){function t(t,i){var a=e.call(this,t,i)||this;return a.savingEvent=new n.Event("OfflineMapEditorViewModelSaving"),a.isEditing=new s.Observable((!1)),a.loadError=new s.Observable(null),a.canChange=new s.Observable((!1)),a.name=new s.Observable(""),a.thumbnail=new s.Observable(""),a.basemaps=new s.ObservableCollection([]),a.geometry=new s.Observable(null),a.includeAttachments=new s.Observable((!0)),a.layersChanged=new s.Observable((!1)),a.geometryChanged=new s.Observable((!1)),a.basemapsChanged=new s.Observable((!1)),a.layersText=new s.Observable(""),a.basemapsText=new s.Observable(""),a.hasBasemaps=new s.Observable((!1)),a.hasSharing=new s.Observable((!1)),a.isLayersValid=new s.Observable((!1)),a.isGeometryValid=new s.Observable((!1)),a.isBasemapsValid=new s.Observable((!1)),a.isBasemapsCalculating=new s.Observable((!1)),a.isValid=new s.Observable((!1)),a.layerSelectorViewModel=new o.LayerSelectorViewModel(t,i),a.layerSelectorViewModel.onEnabledItemsChanged=function(){return a.layersChanged.set(!0)},a.layerSelectorViewModel.onAllLayersEnabled=function(){return a.includeAttachments.set(!0)},a.layerSelectorViewModel.onAllLayersDisabled=function(){return a.includeAttachments.set(!1)},a.layerSelectorViewModel.initialize({}),a.layerSelectorViewModel.geometry.sync(a.geometry),a.grantEditorViewModel=new p.GrantEditorViewModel(t,"Mapping.Infrastructure"),a.grantEditorViewModel.enabled.sync(a.canChange),a.name.bind(a,a.calculateIsValid),a.geometry.bind(a,function(){return a.geometryChanged.set(!0)}),a.app.command("SetOfflineMapEditorGeometry").register(a,function(e){return e&&"extent"===e.type&&(e=d.envelopeToPolygon(e)),e&&"polygon"!==e.type?void a.app.trace.error("SetOfflineMapEditorGeometry does not support geometry type '"+e.type+"'."):void a.geometry.set(e)}),a}return __extends(t,e),t.prototype.initialize=function(t){this.config=t,e.prototype.initialize.call(this,t),t.tools&&this.app.toolRegistry&&this.app.toolRegistry.createTools(t.tools,!0),t.menus&&this.app.menuRegistry&&this.app.menuRegistry.loadMenus({menus:t.menus})},t.prototype.startEditing=function(e){if(!this.app.site.isInitialized)throw new Error("Can't start editing before the site is initialized.");this.isEditing.get()&&this.finishEditing(!0),this.basemaps.isEmpty()&&this.app.site.essentialsMap.baseMaps.length>0&&this._initBasemaps(),this.isEditing.set(!0),this.loadError.set(null),this.initialMapState=new r.MapState(f.AppInfo.fromGeocortexApp(this.app)),this.existingOfflineMap=e.existingOfflineMap,e.existingOfflineMap&&this._loadExistingOfflineMapDoc(e.existingOfflineMap)||this._reset(),c.OfflineMapsModule._execCommandsFromConfig(this.app,this.config.onEditingStarted)},t.prototype._initBasemaps=function(){var e=this,t=this.app.site.essentialsMap.baseMaps.map(function(t){var i=new l.OfflineMapEditorBasemap(e.app,e.libraryId,t);return i.geometry.sync(e.geometry),i.isValid.bind(e,e.calculateIsValid),i.type.bind(e,function(){return e.basemapsChanged.set(!0)}),i});this.basemaps.set(t),this.app.site.getOfflineBasemaps(function(e){t.forEach(function(t){return t.staticTpks.set(e)})},function(t){e.app.trace.error("Unable to fetch offline basemaps: "+t)})},t.prototype._loadExistingOfflineMapDoc=function(e){var t=this;try{return this.name.set(e.title),this.thumbnail.set(e.thumbnail?e.thumbnail.location:null),this.geometry.set(new esri.geometry.Polygon(e.content.geometry)),this.includeAttachments.set(e.content.includeAttachments),this.canChange.set(e.access.change),this.app.map.setExtent(this.geometry.get().getExtent()),this.layerSelectorViewModel.getAllItems().filter(function(e){return!e.isFolder}).forEach(function(i){var n=e.content.layers.filter(function(e){return t.layerSelectorViewModel.filter(i)&&e.layerInfoUniqueId===i.layer.uniqueId});if(n.length>0){var a=n[0];i.definitionExpression.set(a?a.definitionExpression:null),i.isEnabled.set(!0)}else i.definitionExpression.set(null),i.isEnabled.set(!1)}),this.layerSelectorViewModel.setVisibleLayersFromSelectedItems(),this.basemaps.get().forEach(function(t){var i=e.content.basemaps.filter(function(e){return e.baseMapId===t.source.id});i.length>0?t.load(i[0]):t.reset()}),this.grantEditorViewModel.loadById(e.id),this.layersChanged.set(!0),this.geometryChanged.set(!0),this.basemapsChanged.set(!0),!0}catch(i){return this.app.trace.error("Unable to load existing offline map.  "+(i.message||i)),this.loadError.set(this.getResource("language-offlinemapeditor-error-load").format(i.message||i)),!1}},t.prototype._reset=function(){this.canChange.set(!0),this.name.set(""),this.thumbnail.set(""),this.geometry.set(esri.geometry.Polygon.fromExtent(this.app.map.extent)),this.includeAttachments.set(!0),this.layerSelectorViewModel.setSelectedItemsFromVisibleLayers(),this.layerSelectorViewModel.getAllItems().filter(function(e){return!e.isFolder}).forEach(function(e){e.layer&&e.definitionExpression.set(e.layer.getDefinitionExpression())}),this.basemaps.get().forEach(function(e){e.reset()}),this.grantEditorViewModel.reset(),this.layersChanged.set(!1),this.geometryChanged.set(!1),this.basemapsChanged.set(!1)},t.prototype.finishEditing=function(e){var t=this;if(void 0===e&&(e=!1),!this.isEditing.get())throw this.app.trace.error("OfflineMapEditorViewModel.finishEditing called when not editing."),new Error("Not editing.");this.savingEvent.publish();var i={existingOfflineMap:this.existingOfflineMap,newOfflineMap:null,canceled:e},n=Promise.resolve();return e||(i.newOfflineMap={content:{layers:this.layerSelectorViewModel.getAllItems().filter(function(e){return e.layer&&e.isEnabled.get()}).map(function(e){var t=e,i={layerInfoUniqueId:t.layer.uniqueId,definitionExpression:t.definitionExpression.get()};return t.layer.gcxLayer&&t.layer.gcxLayer.isUserCreated&&(i.isUserCreated=t.layer.gcxLayer.isUserCreated,i.layerJson=t.layer.gcxLayer.toJson(),i.serviceInfo={url:t.layer.serviceLayerInfo.serviceLayer.url,capabilities:t.layer.serviceLayerInfo.capabilities}),i}),geometry:this.geometry.get()?this.geometry.get().toJson():null,basemaps:this.basemaps.get().filter(function(e){return e.type.get()===a.OfflineMapBasemap.Type.PREGENERATED||e.type.get()===a.OfflineMapBasemap.Type.EXPORT_TILES}).map(function(e){return e.save()}),includeAttachments:this.includeAttachments.get()},title:this.name.get(),thumbnail:{location:this.thumbnail.get()},properties:{siteId:{string:this.app.site.id},viewerId:{string:(this.app.configModel.viewerId||"null").toLowerCase()}},grants:this.grantEditorViewModel.grants},i.newOfflineMap.thumbnail&&this.existingOfflineMap&&JSON.stringify(this.existingOfflineMap.content.layers)===JSON.stringify(i.newOfflineMap.content.layers)&&JSON.stringify(this.existingOfflineMap.content.geometry)===JSON.stringify(i.newOfflineMap.content.geometry)||(n=this._getThumbnailUri().then(function(e){e&&(i.newOfflineMap.thumbnail.location=e)}))),this.initialMapState.restore(),this.isEditing.set(!1),this.initialMapState=null,this.existingOfflineMap=null,n.then(function(){c.OfflineMapsModule._execCommandsFromConfig(t.app,t.config.onEditingFinished),t.app.event("OfflineMapEditorFinishedEvent").publish(i)})},t.prototype._getThumbnailUri=function(){var e=this,t=new u.ReportParameters;return t.outputFormat="PNG",t.includeData=!0,t.imageWidth=this.config.thumbnail&&this.config.thumbnail.width||150,t.imageHeight=this.config.thumbnail&&this.config.thumbnail.height||150,t.resolution={displayName:"custom",dpi:this.config.thumbnail&&this.config.thumbnail.dpi||20},t.customExtent=this.geometry.get().getExtent(),t.extentType=u.ReportParameters.CUSTOM_EXTENT,t.populateMapGraphicsLayers(this.app.map),new Promise(function(i,n){e.app.site.essentialsMap.exportMap(t,function(e){i(e.data?"data:image/png;base64,"+e.data:e.href?e.href:null)},function(t){e.app.trace.error("Error exporting map for thumbnail: "+t.message),i(null)})})},t.prototype.calculateIsValid=function(){var e=this.layerSelectorViewModel.getAllItems().filter(function(e){return e.layer&&e.isEnabled.get()}).length,t=e>0;this.isLayersValid.set(t),this.layersText.set(this.getResource("language-offlinemapeditor-layers-text").format(e));var i=!!this.geometry.get();this.isGeometryValid.set(i);var n=this.basemaps.get().every(function(e){return e.isValid.get()});this.isBasemapsValid.set(n),this.isBasemapsCalculating.set(this.basemaps.get().some(function(e){return e.size.get()===l.OfflineMapEditorBasemap.sizeCalculating}));var a=this.basemaps.get().filter(function(e){return!e.isNone.get()}).length;this.hasBasemaps.set(a>0),this.basemapsText.set(this.getResource("language-offlinemapeditor-basemaps-text").format(a));var s=g.GrantKind.READER,r=g.GrantKind.WRITER,o=this.grantEditorViewModel.monikers.get().filter(function(e){return e.grants.filter(function(e){return e.assert&&!e.revoke&&(e.kind===s||e.kind===r)}).length>0}).length;this.hasSharing.set(o>0);var p=t&&i&&n&&!!this.name.get();this.isValid.set(p)},t}(i.ViewModelBase);t.OfflineMapEditorViewModel=m})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewModelConfiguration":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsConfiguration":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var n=function(e){function t(t,i){var n=e.call(this,t,i)||this;return n._bindings=new Array,n._statusId="offlineBasemapDefineLevels",n.app.command("ShowOfflineMapEditorBasemapLevels").register(n,n._showOfflineMapEditorBasemapLevels),n}return __extends(t,e),t.prototype._showOfflineMapEditorBasemapLevels=function(e){this.viewModel.basemap.set(e.basemap),this.app.command("ActivateView").execute(this.id)},t.prototype.attach=function(t){var i=this;e.prototype.attach.call(this,t),this.viewModel.basemap.bind(this,function(){return i._initSliderAndMapBindings()})},t.prototype.deactivated=function(){e.prototype.deactivated.call(this);for(var t=0;t<this._bindings.length;t++){var i=this._bindings[t];i.observable&&i.token?i.observable.unbind(i.token):i.esriHandle&&i.esriHandle.remove()}this._bindings.length=0,this.app.command("RemoveNotification").execute(this._statusId),this.app.map._params.maxZoom=this._mapMaxZoom},t.prototype._initSliderAndMapBindings=function(){var e=this;this.viewModel;if($(this.slider).slider({range:!1,min:Math.max(this.viewModel.basemap.get().exportTilesMapServiceMinLevel.get(),this.app.map.getMinZoom()),max:Math.min(this.viewModel.basemap.get().exportTilesMapServiceMaxLevel.get(),this.app.map.getMaxZoom()),value:this.viewModel.basemap.get().exportTilesMaxLevel.get(),slide:function(t,i){e.viewModel.basemap.get().exportTilesMaxLevel.get()!==i.value&&e.viewModel.basemap.get().exportTilesMaxLevel.set(i.value)}}),this._bindings.push({observable:this.viewModel.basemap.get().exportTilesMaxLevel,token:this.viewModel.basemap.get().exportTilesMaxLevel.bind(this,function(t){$(e.slider).slider("value",t),e.app.map.getLevel()!==t&&e.app.map.setLevel(t)})}),this._bindings.push({esriHandle:this.app.map.on("extent-change",function(t){t.lod.level!==e.viewModel.basemap.get().exportTilesMaxLevel.get()&&e.viewModel.basemap.get().exportTilesMaxLevel.set(t.lod.level)})}),this.app.map.setZoom(this.viewModel.basemap.get().exportTilesMaxLevel.get()),"Handheld"!=this.app.shellName){var t={id:this._statusId,text:this.getResource("language-offlinemapeditor-basemaps-levels-mapinstructions"),closeButton:{callback:function(){e.app.command("DeactivateView").execute(e.id)}}};this.app.command("DisplayNotification").execute(t)}var i=this.app.map;this._mapMaxZoom=i._params.maxZoom,i._params.maxZoom=this.viewModel.basemap.get().exportTilesMapServiceMaxLevel.get()},t.prototype.handleDoneClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},t}(i.ViewBase);t.OfflineMapEditorBasemapLevelsView=n})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsViewModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables"],function(e,t,i,n){"use strict";var a=function(e){function t(t,i){var a=e.call(this,t,i)||this;return a.basemap=new n.Observable(null),a}return __extends(t,e),t}(i.ViewModelBase);t.OfflineMapEditorBasemapLevelsViewModel=a})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapsView":function(){define(["require","exports","geocortex/framework/ui/ViewBase","./../../OfflineMapsModule"],function(e,t,i,n){"use strict";var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.handleTypeRadioClick=function(e,t,i){i.type.set(t.value)},t.prototype.handleEditLevelsClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showBasemapsLevelEditorView,{basemap:i})},t.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},t}(i.ViewBase);t.OfflineMapEditorBasemapsView=a})},"Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.attach=function(t){var i=this;e.prototype.attach.call(this,t),this.viewModel.isEditing.bind(this,function(e){i._getGraphicsLayer().setVisibility(e)}),this.viewModel.savingEvent.subscribe(this,function(){i._getGraphicsLayer().setVisibility(!1)}),this.viewModel.geometry.bind(this,function(e){var t=i._getGraphicsLayer();if(t.clear(),e){var n=new esri.Graphic;n.setGeometry(e),t.add(n)}})},t.prototype.activated=function(){e.prototype.activated.call(this),this._getGraphicsLayer().setOpacity(1)},t.prototype.deactivated=function(){e.prototype.deactivated.call(this),this._getGraphicsLayer().setOpacity(this.configuration.offViewOpacity),this.app.command("ClearActiveTool").execute()},t.prototype.resolveWidget=function(t,i,n){switch(e.prototype.resolveWidget.call(this,t,i,n),t){case"OfflineMapEditorGeometryActionsWidget":return this.app.menuRegistry.createMenuWidget(this,i,n)}},t.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},t.prototype._getGraphicsLayer=function(){if(this._layer)return this._layer;if(this._layer=this.app.map.getLayer(this.configuration.geometryLayerId),!this._layer){this._layer=new esri.layers.GraphicsLayer,this._layer.id=this.configuration.geometryLayerId;var e=new esri.symbol.SimpleLineSymbol;e.color.setColor(new esri.Color(this.configuration.outlineColor)),e.setWidth(this.configuration.outlineWidth);var t=new esri.symbol.SimpleFillSymbol;t.setColor(new esri.Color(this.configuration.fillColor)),t.setOutline(e);var i=new esri.renderer.SimpleRenderer(t);this._layer.setRenderer(i),this._layer.setOpacity(this.configuration.offViewOpacity),this.app.map.addLayer(this._layer)}return this._layer},t}(i.ViewBase);t.OfflineMapEditorGeometryView=n})},"Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItem":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorViewModel":function(){define(["require","exports","geocortex/infrastructure/layerselector/LayerSelectorViewModelBase","geocortex/framework/observables","geocortex/essentials/MapServiceConstants","geocortex/essentials/LayerType","geocortex/infrastructure/TaskUtils"],function(e,t,i,n,a,s,r){"use strict";var o=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.geometry=new n.Observable,t}return __extends(t,e),t.prototype.filter=function(e){if(e.layer){var t=e.layer;if(t.gcxLayer&&(!t.gcxLayer.isUserCreated||t.gcxLayer.catalogId&&t.serviceLayerInfo.gcxMapService.mapServiceType===a.MapServiceType.DYNAMIC&&t.gcxLayer.isDynamic))return t.serviceLayerInfo.gcxMapService?t.serviceLayerInfo.gcxMapService.mapServiceType===a.MapServiceType.DYNAMIC||t.serviceLayerInfo.gcxMapService.mapServiceType===a.MapServiceType.FEATURE:t.serviceLayerInfo.serviceType===a.MapServiceType.FEATURE&&t.gcxLayer.type===s.LayerType.FEATURE_LAYER}return!1},t.prototype.handleLayerStateChange=function(e){if(this.filter(e)&&e.layer){var t=e,i=this.filter(t)&&t.isEnabled.get();t.layer.setEsriLayerVisibility(i),this.onEnabledItemsChanged&&this.onEnabledItemsChanged()}},t.prototype.handleAllLayersEnabled=function(){this.setVisibleLayersFromSelectedItems(),this.onEnabledItemsChanged&&this.onEnabledItemsChanged(),this.onAllLayersEnabled&&this.onAllLayersEnabled()},t.prototype.handleAllLayersDisabled=function(){this.setVisibleLayersFromSelectedItems(),this.onEnabledItemsChanged&&this.onEnabledItemsChanged(),this.onAllLayersDisabled&&this.onAllLayersDisabled()},t.prototype.onLayerSelectorFolderItemCreated=function(e){this._addCustomLayerSelectorMembers(e)},t.prototype.onLayerSelectorLayerItemCreated=function(e){var t=this;e.isEnabled.set(!1),this._addCustomLayerSelectorMembers(e);var i=e;i.definitionExpression.bind(this,function(t){e.layer.setDefinitionExpression(t)}),i.isEnabled.bind(this,function(){return t._calculateNumFeaturesInLayer(i)}),i.definitionExpression.bind(this,function(){return t._calculateNumFeaturesInLayer(i)}),this.geometry.bind(this,function(){return t._calculateNumFeaturesInLayer(i)});var n=e.layer.serviceLayerInfo.capabilities;n&&n.indexOf("Sync")>=0?i.editableOrReadOnlyText.set(this.getResource("language-offlinemapeditor-layers-editable-offline")):i.editableOrReadOnlyText.set(this.getResource("language-offlinemapeditor-layers-readonly-offline"))},t.prototype.onLayerSelectorServiceLayerItemCreated=function(e){this._addCustomLayerSelectorMembers(e)},t.prototype._addCustomLayerSelectorMembers=function(e){var t=e;t.definitionExpression=new n.Observable(null),t.invalidDefinitionExpression=new n.Observable((!1)),t.numFeatures=new n.Observable("0"),t.numFeaturesTitle=new n.Observable(""),t.editableOrReadOnlyText=new n.Observable("")},t.prototype._calculateNumFeaturesInLayer=function(e){var t=this;if(e.invalidDefinitionExpression.set(!1),!e.isEnabled.get()||!this.geometry.get()||e.layer.gcxLayer&&!e.layer.gcxLayer.supportsQuery)return e.numFeatures.set("0"),void e.numFeaturesTitle.set(this.getResource("language-offlinemapeditor-layers-numfeatures-title").format(0));e.numFeatures.set(this.getResource("language-offlinemapeditor-layers-numfeatures-calculating")),e.numFeaturesTitle.set(this.getResource("language-offlinemapeditor-layers-numfeatures-calculating-title"));var i=new esri.tasks.Query;i.where=e.definitionExpression.get(),i.geometry=this.geometry.get();var n=r.getQueryTask(e.layer.gcxLayer);n.executeForCount(i).then(function(i){e.numFeatures.set(i),e.numFeaturesTitle.set(t.getResource("language-offlinemapeditor-layers-numfeatures-title").format(i))},function(i){dojo.isArray(i.details)&&i.details.some(function(e){return"Invalid query"===e})&&e.invalidDefinitionExpression.set(!0);var n=i.message?i.message:i;t.app.trace.error("Error querying layer '"+e.layer.id+"': "+n),e.numFeatures.set(t.getResource("language-offlinemapeditor-layers-numfeatures-unknown")),e.numFeaturesTitle.set(t.getResource("language-offlinemapeditor-layers-numfeatures-unknown-title"))})},t.prototype.setVisibleLayersFromSelectedItems=function(){var e=this;this.getAllItems().forEach(function(t){if(t.layer){var i=t,n=e.filter(i)&&i.isEnabled.get();i.layer.setEsriLayerVisibility(n)}})},t.prototype.setSelectedItemsFromVisibleLayers=function(){var e=this;this.getAllItems().forEach(function(t){return t.isEnabled.set(e.filter(t)&&t.layer.isVisible()&&!!t.layer.gcxLayer&&(!t.layer.gcxLayer.isUserCreated||!!t.layer.gcxLayer.catalogId&&t.layer.serviceLayerInfo.gcxMapService.mapServiceType===a.MapServiceType.DYNAMIC&&t.layer.gcxLayer.isDynamic))})},t}(i.LayerSelectorViewModelBase);t.LayerSelectorViewModel=o})},"Mapping/modules/OfflineMaps/Editor/Layers/OfflineMapEditorLayersView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.selectAllLayers=function(e,t,i){this.viewModel.layerSelectorViewModel.layerSelector.enableAllLayers()},t.prototype.clearAllLayers=function(e,t,i){this.viewModel.layerSelectorViewModel.layerSelector.disableAllLayers()},t.prototype.handleExpanderClick=function(e,t,i){i.isExpanded.set(!i.isExpanded.get())},t.prototype.handleDefinitionExpressionClick=function(e,t,i){this.app.command("Prompt").execute(this.getResource("language-offlinemapeditor-layers-lde-title"),this.getResource("language-offlinemapeditor-layers-lde-description"),i.definitionExpression.get(),function(e){"string"==typeof e&&i.definitionExpression.set(e)})},t.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},t}(i.ViewBase);t.OfflineMapEditorLayersView=n})},"Mapping/modules/OfflineMaps/Editor/Sharing/OfflineMapEditorSharingView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.resolveWidget=function(t,i,n){if(e.prototype.resolveWidget.call(this,t,i),!t)return null;switch(t){case"GrantEditorWidget":var a=this.app.viewManager.createView({typeName:"geocortex.essentialsHtmlViewer.mapping.infrastructure.documents.GrantEditorView",markupResource:"Mapping/infrastructure/documents/GrantEditorView.html",libraryId:"Mapping.Infrastructure",isVisible:!0});return a&&a.attach(this.viewModel.grantEditorViewModel),a;default:return null}},t.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},t}(i.ViewBase);t.OfflineMapEditorSharingView=n})},"Mapping/modules/OfflineMaps/Sync/SyncStatusView":function(){define(["require","exports","geocortex/framework/ui/ViewBase","./../Widgets/ProgressBarWidgetViewModel"],function(e,t,i,n){"use strict";var a=function(e){function t(t,i){var n=e.call(this,t,i)||this;return n.app=t,n._switchedToOnline=!1,n.app.command("StartOfflineFeatureSync").register(n,n._startOfflineFeatureSync),n.app.command("StartOfflineSyncAndShowProgress").register(n,n._startOfflineSyncAndShowProgress),n.app.command("StartOfflineDownloadAndShowProgress").register(n,n._startOfflineDownloadAndShowProgress),n}return __extends(t,e),t.prototype.attach=function(t){e.prototype.attach.call(this,t)},t.prototype.activated=function(){e.prototype.activated.call(this)},t.prototype.resolveWidget=function(t,i,a){if(e.prototype.resolveWidget.call(this,t,i,a),"syncProgressBar"===t){var s=this.app.viewManager.createView({typeName:"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.widgets.ProgressBarWidget",markupResource:"Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget.html"});return s.app=this.app,s.libraryId=this.libraryId,this.progressBarViewModel=new n.ProgressBarWidgetViewModel(this.app,this.libraryId),s.attach(this.progressBarViewModel),s}},t.prototype.deactivated=function(){e.prototype.deactivated.call(this),this.viewModel.reset(),this.progressBarViewModel.widthStyle.set("0%"),this._switchedToOnline&&this.app.isOffline.set(!0)},t.prototype._startOfflineFeatureSync=function(e){var t=this;if(!this.app.offlineManager.currentOperation){this.viewModel.reset();var i=Promise.resolve(),n=!1;e.offlineMaps.forEach(function(a,s){var r=t.app.offlineManager.getOfflineMapById(a.id);t._setup(r),t.viewModel.updateProgressText(a,t.getResource("language-offline-maps-sync-waiting"),!0),i=i["finally"](function(){t.viewModel.updateProgressText(a,t.getResource("language-offline-maps-sync-syncing"),!0);var i=s===e.offlineMaps.length-1;return t.app.offlineManager.syncOfflineMap(a,function(i){var n=i.percentage/e.offlineMaps.length+s/e.offlineMaps.length*100;t.progressBarViewModel.widthStyle.set(n+"%"),setTimeout(function(){t.viewModel.overallPercentage.set(Math.round(10*n)/10),t.viewModel.statusText.set(i.message),
i.isWarning&&t.viewModel.warnings.addItem(i.message)},500)},{basemapDownloads:!1,featureDataSync:!0,refreshMap:i,updateBundle:!1})}).then(function(){setTimeout(function(){t.viewModel.updateProgressText(a,t.getResource("language-offline-maps-sync-done"),!0)},500)})["catch"](function(e){n=!0,setTimeout(function(){var i=e.message||e;t.viewModel.updateProgressText(a,i,!1)},500)})}),i["finally"](function(){setTimeout(function(){t._closeConditionally(),t.viewModel.showProgress.set(!1),t.viewModel.showCancel.set(!1),t.viewModel.showClose.set(!0),t.viewModel.isResuming.set(!1),n&&(t.viewModel.showClose.set(!1),t.viewModel.partialDataText.set(t.getResource("language-offline-maps-delete-partial-data-text")))},500)})}},t.prototype._startOfflineSyncAndShowProgress=function(e){var t=this;if(!this.app.offlineManager.currentOperation){var i=this.app.offlineManager.getOfflineMapById(e.offlineMap.id);this.viewModel.reset(),this._setup(i),this.app.offlineManager.syncOfflineMap(e.offlineMap,function(e){t.progressBarViewModel.widthStyle.set(e.percentage+"%"),setTimeout(function(){t.viewModel.overallPercentage.set(Math.round(10*e.percentage)/10),t.viewModel.statusText.set(e.message),e.isWarning&&t.viewModel.warnings.addItem(e.message)},500)}).then(function(){setTimeout(function(){t.viewModel.updateProgressText(e.offlineMap,t.getResource("language-offline-maps-sync-done"),!0),t._closeConditionally()},500)})["catch"](function(i){setTimeout(function(){var n=i.message||i;t.viewModel.updateProgressText(e.offlineMap,n,!1),t.viewModel.partialDataText.set(t.getResource("language-offline-maps-delete-partial-data-text"))},500)})["finally"](function(){setTimeout(function(){t.viewModel.showProgress.set(!1),t.viewModel.showCancel.set(!1),null==t.viewModel.partialDataText.get()&&t.viewModel.showClose.set(!0),t.viewModel.isResuming.set(!1)},500)})}},t.prototype._startOfflineDownloadAndShowProgress=function(e){var t=this;this.viewModel.reset(),this._setup(e.offlineMap),this.app.offlineManager.addOfflineMap(e.offlineMap,function(e){t.progressBarViewModel.widthStyle.set(e.percentage+"%"),setTimeout(function(){t.viewModel.overallPercentage.set(Math.round(10*e.percentage)/10),t.viewModel.statusText.set(e.message),e.isWarning&&t.viewModel.warnings.addItem(e.message)},500)}).then(function(){t.app.offlineManager.activateOfflineMap(e.offlineMap,!0)}).then(function(){setTimeout(function(){t.viewModel.updateProgressText(e.offlineMap,t.getResource("language-offline-maps-sync-done"),!0),t._closeConditionally()},500)})["catch"](function(i){setTimeout(function(){var n=i.message||i;t.viewModel.updateProgressText(e.offlineMap,n,!1),t.viewModel.partialDataText.set(t.getResource("language-offline-maps-delete-partial-data-text"))},500)})["finally"](function(){setTimeout(function(){t.viewModel.showProgress.set(!1),t.viewModel.showCancel.set(!1),null==t.viewModel.partialDataText.get()&&t.viewModel.showClose.set(!0),t.viewModel.isResuming.set(!1)},500)})},t.prototype._closeConditionally=function(){var e=this;this.viewModel.closeWhenDone.get()&&0===this.viewModel.warnings.get().length&&setTimeout(function(){e._close()},100)},t.prototype._close=function(){this.app.viewManager.deactivateView(this)},t.prototype._open=function(){this.app.viewManager.getViewById(this.id).isActive||this.app.command("ActivateView").execute(this.id)},t.prototype._setup=function(e){this.app.isOffline.get()?(this.app.isOffline.set(!1),this._switchedToOnline=!0):this._switchedToOnline=!1,this.viewModel.setup(e);var t=this.app.offlineManager.getOfflineMapWithStateById(e.id);this.viewModel.isResuming.set(!!t&&t.state.hasProgress),this._open()},t.prototype.handleCancelClick=function(e,t,i){var n=this;this.viewModel.cancellingText.set(this.getResource("language-offline-maps-sync-cancelling")),this.viewModel.showProgress.set(!1),this.viewModel.isCancelling=!0,this.app.offlineManager.cancel()["finally"](function(){n.viewModel.isCancelling&&n._close()}),setTimeout(function(){n.viewModel.isCancelling&&(n.viewModel.showCancel.set(!1),n.viewModel.showClose.set(!0))},1e4)},t.prototype.handleCloseClick=function(e,t,i){this.viewModel.isCancelling&&(this.app.offlineManager.forgetLast(),this.app.offlineManager.removeOfflineMap(this.viewModel.offlineMap)),this._close()},t.prototype.handleDeleteData=function(e,t,i){var n=this,a=this.viewModel.progressModels.getItems().filter(function(e){return!e.success}),s=[];Promise.each(a,function(e){var t=n.app.offlineManager.getOfflineMapWithStateById(e.context.id);t.state.hasProgress=!1;var i=!t.state.isDownloaded;return n.app.offlineManager.removeOfflineMapPartialData(e.context,i).then(function(){if(i)return n.app.offlineManager.removeOfflineMap(e.context)})["catch"](function(e){s.push(e.message||e.toString())})})["finally"](function(){s.length>0&&n.app.command("Alert").execute(s.join("\n")),n._close()})},t.prototype.handleToggleDetailsClick=function(e,t,i){this.viewModel.showStatusText.set(!this.viewModel.showStatusText.get())},t}(i.ViewBase);t.SyncStatusView=a})},"Mapping/modules/OfflineMaps/Sync/SyncStatusViewModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables"],function(e,t,i,n){"use strict";var a=function(e){function t(t,i){var a=e.call(this,t,i)||this;return a.app=t,a._bindings=new Array,a.name=new n.Observable,a.overallPercentage=new n.Observable,a.cancellingText=new n.Observable,a.progressModels=new n.ObservableCollection,a.statusText=new n.Observable,a.closeWhenDone=new n.Observable((!1)),a.warnings=new n.ObservableCollection,a.partialDataText=new n.Observable,a.showStatusText=new n.Observable((!1)),a.hideStatusText=new n.Observable((!0)),a.showProgress=new n.Observable((!0)),a.showCancel=new n.Observable((!0)),a.showClose=new n.Observable((!1)),a.canCancel=new n.Observable((!1)),a.isCancelling=!1,a.isResuming=new n.Observable((!1)),a}return __extends(t,e),t.prototype.setup=function(e){this._bindings.push({token:this.showStatusText.bind(this,this.showStatusTextChanged),observable:this.showStatusText}),this._bindings.push({token:this.closeWhenDone.bind(this,this.closeWhenDoneChanged),observable:this.closeWhenDone}),this.canCancel.sync(this.app.offlineManager.canCancel);var t=localStorage.getItem("geocortex.offlineMaps.SyncStatusViewModel.showStatusText");"string"==typeof t&&this.showStatusText.set("true"===t);var i=localStorage.getItem("geocortex.offlineMaps.SyncStatusViewModel.closeWhenDone");"string"==typeof i&&this.closeWhenDone.set("true"===i),this.name.set(e.title),this.statusText.set(this.getResource("language-offline-maps-progress-pending")),this.offlineMap=e,this.showClose.set(!1),this.showCancel.set(!0)},t.prototype.reset=function(){this._bindings.forEach(function(e){return e.observable.unbind(e.token)}),this._bindings.length=0,this.overallPercentage.set(0),this.cancellingText.set(null),this.partialDataText.set(null),this.statusText.set(null),this.showProgress.set(!0),this.progressModels.clear(),this.warnings.clear(),this.isCancelling=!1},t.prototype.updateProgressText=function(e,t,i){var n=this.progressModels.getItems().filter(function(t){return t.context.id===e.id})[0];n||(n=new s,this.progressModels.addItem(n)),n.mapNameDisplay.set(String.format("{0}: ",e.title)),n.progressClass.set(i?"success":"error"),n.message.set(t),n.context=e,n.success=i},t.prototype.showStatusTextChanged=function(e){localStorage.setItem("geocortex.offlineMaps.SyncStatusViewModel.showStatusText",e+""),this.hideStatusText.set(!e)},t.prototype.closeWhenDoneChanged=function(e){localStorage.setItem("geocortex.offlineMaps.SyncStatusViewModel.closeWhenDone",e+"")},t}(i.ViewModelBase);t.SyncStatusViewModel=a;var s=function(){function e(){this.message=new n.Observable,this.progressClass=new n.Observable,this.mapNameDisplay=new n.Observable,this.success=!1}return e}();t.ProgressViewModel=s})},"Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t}(i.ViewBase);t.ProgressBarWidget=n})},"Mapping/modules/OfflineMaps/Widgets/ProgressBarWidgetViewModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables"],function(e,t,i,n){"use strict";var a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.widthStyle=new n.Observable("0%"),t}return __extends(t,e),t}(i.ViewModelBase);t.ProgressBarWidgetViewModel=a})},"url:/Mapping/modules/OfflineMaps/ListOfflineMapsView.html":'<div data-binding="{@widget: ListOfflineMapsActionsWidget}{@widget-required: false}" data-menu-id="ListOfflineMapsActions" data-menu-template="Mapping/infrastructure/menus/MenuView.html"></div>\r\n<div class="offline-profiles">\r\n\r\n    <div class="offline-profile-message error-message">\r\n        <span class="error-message-text" data-binding="{@text: @language-offline-maps-not-native}{@hidden: statusNative}"></span>\r\n        <span class="error-message-text" data-binding="{@text: @language-offline-maps-empty-offline}{@visible: statusOffline}"></span>\r\n        <span data-binding="{@hidden: statusOffline}">\r\n            <span class="error-message-text" data-binding="{@text: @language-offline-maps-empty-fetching}{@visible: statusFetching}"></span>\r\n            <span data-binding="{@hidden: statusFetching}">\r\n                <span class="error-message-text" data-binding="{@text: @language-offline-maps-empty-unsupported}{@visible: statusUnsupported}"></span>\r\n                <span data-binding="{@hidden: statusUnsupported}">\r\n                    <span class="error-message-text" data-binding="{@text: @language-offline-maps-empty-empty}{@visible: statusEmpty}"></span>\r\n                </span>\r\n            </span>\r\n        </span>\r\n    </div>\r\n\r\n    <ul class="list-menu profile-list">\r\n        <li class="item-list-item online-only">\r\n            <button class="list-item-button" data-binding="{@event-click: handleDeactivateOfflineMapClick}{@enabled: hasActiveOfflineMap}">\r\n                <span class="offline-thumbnail"><img src="Resources/Images/Icons/map-online-70x50.png" class="list-item-img" data-binding="{alt: @language-offline-maps-use-online-data-desc}" /></span>\r\n                <strong class="list-menu-name" data-binding="{@text: @language-offline-maps-use-online-data}"></strong>\r\n                <span class="list-menu-desc" data-binding="{@text: @language-offline-maps-use-online-data-desc}"></span>\r\n                <span class="status-icon" data-binding="{@hidden: hasActiveOfflineMap}"><span class="status-icon-helper"></span><img src="Resources/Images/Icons/cloud-24.png" alt="Downloaded" /></span>\r\n            </button>\r\n        </li>\r\n    </ul>\r\n\r\n    <ul class="list-menu profile-list" data-binding="{@hidden: offline}{@source: mergedOfflineMaps}">\r\n        <li class="item-list-item" data-binding="{@template-for: mergedOfflineMaps}{@class-active-list-item: isActive}">\r\n            <button class="list-item-button" data-binding="{@event-click: handleOfflineMapClick}{@disabled: isActive}">\r\n                <span class="offline-thumbnail"><span class="offline-thumbnail-helper"></span><img class="list-item-img" data-binding="{src: thumbnail}{title: title}{alt: title}{@event-error: handleThumbnailLoadError}" /></span>\r\n                <span class="list-menu-name" data-binding="{@text: title}"></span>\r\n\r\n                <span data-binding="{@hidden: isOrphaned}">\r\n                    <span class="status-icon active-icon" data-binding="{@visible: isActive}"><span class="status-icon-helper"></span><img src="Resources/Images/Icons/device-active-24.png" alt="Active" /></span>\r\n                    <span class="status-icon downloaded-icon" data-binding="{@visible: isDownloaded}"><span class="status-icon-helper"></span><img src="Resources/Images/Icons/device-phone-24.png" alt="Downloaded" /></span>\r\n                    <span class="status-icon" data-binding="{@hidden: isDownloaded}"><span class="status-icon-helper"></span><img src="Resources/Images/Icons/cloud-download-24.png" alt="Download" /></span>\r\n                </span>\r\n                <span class="status-icon orphan-icon" data-binding="{@visible: isOrphaned}"><span class="status-icon-helper"></span><img src="Resources/Images/Icons/error-24.png" alt="Profile has been removed from the server" /></span>\r\n\r\n                <div class="list-menu-desc" data-binding="{@visible: isDownloaded}">\r\n                    <div><span data-binding="{@text: @language-offline-maps-size}"></span><span data-binding="{@text: dataSizeDisplayValue}"></span></div>\r\n                    <div><span data-binding="{@text: @language-offline-maps-last-sync-time}"></span><span data-binding="{@text: lastSyncTime}"></span></div>\r\n                    <div data-binding="{@visible: isOrphaned}"><span class="orphan-warning" data-binding="{@text: @language-offline-maps-orphaned}"></span></div>\r\n                </div>\r\n                <span class="list-menu-desc sync-incomplete" data-binding="{@visible: hasProgress}{@text: @language-offline-maps-has-progress}"></span>\r\n            </button>\r\n\r\n            <div data-binding="{@hidden: isActive}">\r\n                <button class="list-item-button action-button" data-binding="{@visible: isDownloaded}{@event-click: handleOfflineMapForgetClick}"><span class="action-button-helper"></span><img src="Resources/Images/Icons/clear-24.png" alt="Remove from Device" /></button>\r\n            </div>\r\n\r\n            <div data-binding="{@visible: isActive}">\r\n                <button class="list-item-button action-button" data-binding="{@visible: isDownloaded}{@event-click: handleOfflineMapSyncClick}"><span class="action-button-helper"></span><span class="icon-container" data-binding="{@class-sync-incomplete: hasProgress}"><img src="Resources/Images/Icons/toolbar/sync-24.png" alt="Sync"/></span></button>\r\n            </div>\r\n\r\n            <span class="edits-badge" data-binding="{@text: numberOfEdits}{@visible: numberOfEdits}"></span>\r\n\r\n        </li>\r\n    </ul>\r\n</div>',"url:/Mapping/modules/OfflineMaps/ManageOfflineMapsView.html":'<div data-binding="{@widget: ManageOfflineMapsActionsWidget}{@widget-required: false}" data-menu-id="ManageOfflineMapsActions" data-menu-template="Mapping/infrastructure/menus/MenuView.html"></div>\r\n\r\n<div class="offline-profiles panel-group-contents">\r\n    <div class="offline-header-info-text" data-binding="{@visible: switchedToOnlineMap}{@text: @language-offline-maps-manage-showing-online-map}">\r\n    </div>\r\n    <div class="offline-profile-message error-message">\r\n        <span class="error-message-text" data-binding="{@text: @language-offline-maps-empty-offline}{@visible: statusOffline}"></span>\r\n        <span data-binding="{@hidden: statusOffline}">\r\n            <span data-binding="{@hidden: statusUnsupported}">\r\n                <span class="error-message-text" data-binding="{@text: @language-offline-maps-empty-empty}{@visible: statusEmpty}"></span>\r\n            </span>\r\n        </span>\r\n        <span class="error-message-text" data-binding="{@text: @language-offline-maps-cannot-create}{@hidden: canCreate}"></span>\r\n    </div>\r\n\r\n    <ul class="list-menu profile-manage" data-binding="{@hidden: offline}{@source: docstoreOfflineMaps}">\r\n        <li class="item-list-item" data-binding="{@template-for: docstoreOfflineMaps}{@visible: canEdit}">\r\n            <button class="list-item-button" data-binding="{@event-click: handleEditOfflineMapClick}">\r\n                <span class="offline-thumbnail"><span class="offline-thumbnail-helper"></span><img class="list-item-img" data-binding="{src: thumbnail}{title: title}{alt: title}{@event-error: handleThumbnailLoadError}" /></span>\r\n                <span class="list-menu-name" data-binding="{@text: title}"></span>\r\n                <span class="status-icon" data-binding="{@hidden: isDownloaded}"><span class="status-icon-helper"></span><img src="Resources/Images/Icons/Toolbar/edit-24.png" alt="Edit" /></span>\r\n            </button>\r\n            <button class="list-item-button button-delete" data-binding="{@event-click: handleDeleteOfflineMapClick}{@visible: canChange}">\r\n                <img src="Resources/Images/Icons/trash-white.png" data-binding="{title: @language-offline-maps-delete-from-server-title}{alt: @language-offline-maps-delete-from-server-title}" />\r\n            </button>\r\n        </li>\r\n    </ul>\r\n\r\n    <div class="form-btns">\r\n        <button class="button" data-binding="{@text: @language-offline-maps-new-button}{@event-click: handleNewOfflineMapClick}{@enabled: canCreate}"></button>\r\n        <button class="button" data-binding="{@text: @language-common-done}{@event-click: handleDoneClick}{@visible: showManageDoneButton}"></button>\r\n    </div>\r\n</div>',"url:/Mapping/modules/OfflineMaps/Editor/OfflineMapEditorView.html":'<div class="offline-map-editor">\r\n    \r\n    <span class="error-message" data-binding="{@text: loadError}{@visible: loadError}"></span>\r\n\r\n    <div class="panel-group-contents">\r\n        <label for="profile_1" data-binding="{@text: @language-offlinemapeditor-name-label}"></label>\r\n        <input id="profile_1" type="text" data-binding="{@value: name}{@enabled: canChange}"/>\r\n        <div data-binding="{@hidden: canChange}">\r\n            <img src="Resources/Images/Icons/status-alert-16.png" class="status-msg-icon" data-binding="{title: @language-offlinemapeditor-status-title-alert}{alt: @language-offlinemapeditor-status-alt-alert}">\r\n            <span data-binding="{@text: @language-offlinemapeditor-name-cant-change}"></span>\r\n        </div>\r\n        <div data-binding="{@hidden: name}">\r\n            <img src="Resources/Images/Icons/status-error-16.png" class="status-msg-icon" data-binding="{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}">\r\n            <span class="error-message" data-binding="{@text: @language-offlinemapeditor-error-noname}{@hidden: name}"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <ul class="list-menu active has-icon">\r\n        <li>\r\n            <button class="list-menu-item" data-binding="{@event-onclick: handleGeometryClick}">\r\n                <img class="list-menu-icon" src="Resources/Images/Icons/Toolbar/draw-polygon-24.png" alt="" />\r\n                <span class="list-menu-details">\r\n                    <strong class="list-menu-name" data-binding="{@text: @language-offlinemapeditor-geometry-button}"></strong>\r\n                    <span class="list-menu-desc" data-binding="{@text: @language-offlinemapeditor-geometry-description}"></span>\r\n                    <span class="list-menu-status-msg" data-binding="{@visible: isGeometryValid}">\r\n                        <img src="Resources/Images/Icons/status-ok-16.png" class="status-msg-icon" data-binding="{@visible: geometryChanged}{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}">\r\n                        <img src="Resources/Images/Icons/status-default-16.png" class="status-msg-icon" data-binding="{@hidden: geometryChanged}{title: @language-offlinemapeditor-status-title-default}{alt: @language-offlinemapeditor-status-title-default}">\r\n                        <span class="list-menu-desc" data-binding="{@hidden: geometryChanged}{@text: @language-offlinemapeditor-geometry-text-default}"></span>\r\n                        <span class="list-menu-desc" data-binding="{@visible: geometryChanged}{@text: @language-offlinemapeditor-geometry-text}"></span>\r\n                    </span>\r\n                    <span class="list-menu-status-msg" data-binding="{@hidden: isGeometryValid}">\r\n                        <img src="Resources/Images/Icons/status-error-16.png" class="status-msg-icon" data-binding="{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}">\r\n                        <span class="error-message" data-binding="{@text: @language-offlinemapeditor-geometry-error-empty}"></span>\r\n                    </span>\r\n                </span>\r\n            </button>\r\n        </li>\r\n        <li>\r\n            <button class="list-menu-item" data-binding="{@event-onclick: handleLayersClick}">\r\n                <img class="list-menu-icon" src="Resources/Images/Icons/Toolbar/layers-24.png" alt="" />\r\n                <span class="list-menu-details">\r\n                    <strong class="list-menu-name" data-binding="{@text: @language-offlinemapeditor-layers-button}"></strong>\r\n                    <span class="list-menu-desc" data-binding="{@text: @language-offlinemapeditor-layers-description}"></span>\r\n                    <span class="list-menu-status-msg" data-binding="{@visible: isLayersValid}">\r\n                        <img src="Resources/Images/Icons/status-ok-16.png" class="status-msg-icon" data-binding="{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}">\r\n                        <span class="list-menu-desc" data-binding="{@text: layersText}{@visible: isLayersValid}"></span>\r\n                    </span>\r\n                    <span class="list-menu-status-msg" data-binding="{@hidden: isLayersValid}">\r\n                        <img src="Resources/Images/Icons/status-error-16.png" class="status-msg-icon" data-binding="{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}">\r\n                        <span class="error-message" data-binding="{@text: @language-offlinemapeditor-layers-error-empty}"></span>\r\n                    </span>\r\n                </span>\r\n            </button>\r\n        </li>\r\n        <li>\r\n            <button class="list-menu-item" data-binding="{@event-onclick: handleBasemapsClick}">\r\n                <img class="list-menu-icon" src="Resources/Images/Icons/basemap-24.png" alt="" />\r\n                <span class="list-menu-details">\r\n                    <strong class="list-menu-name" data-binding="{@text: @language-offlinemapeditor-basemaps-button}"></strong>\r\n                    <span class="list-menu-desc" data-binding="{@text: @language-offlinemapeditor-basemaps-description}"></span>\r\n                    <span class="list-menu-status-msg" data-binding="{@visible: isBasemapsValid}">\r\n                        <img src="Resources/Images/Icons/status-ok-16.png" class="status-msg-icon" data-binding="{@visible: hasBasemaps}{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}">\r\n                        <img src="Resources/Images/Icons/status-default-16.png" class="status-msg-icon" data-binding="{@hidden: hasBasemaps}{title: @language-offlinemapeditor-status-title-default}{alt: @language-offlinemapeditor-status-alt-default}">\r\n                        <span class="list-menu-desc" data-binding="{@text: basemapsText}"></span>\r\n                    </span>\r\n                    <span class="list-menu-status-msg" data-binding="{@hidden: isBasemapsValid}">\r\n                        <img src="Resources/Images/Icons/status-error-16.png" class="status-msg-icon" data-binding="{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}">\r\n                        <span class="error-message" data-binding="{@hidden: isBasemapsCalculating}{@text: @language-offlinemapeditor-basemaps-error}"></span>\r\n                        <span class="error-message" data-binding="{@visible: isBasemapsCalculating}{@text: @language-offlinemapeditor-basemaps-error-calculating}"></span>\r\n                    </span>\r\n                </span>\r\n            </button>\r\n        </li>\r\n        <li>\r\n            <button class="list-menu-item" data-binding="{@event-onclick: handleSharingClick}">\r\n                <img class="list-menu-icon" src="Resources/Images/Icons/team-24.png" alt="" />\r\n                <span class="list-menu-details">\r\n                    <strong class="list-menu-name" data-binding="{@text: @language-offlinemapeditor-sharing-button}"></strong>\r\n                    <span class="list-menu-desc" data-binding="{@visible: canChange}{@text: @language-offlinemapeditor-sharing-description}"></span>\r\n                    <span class="list-menu-status-msg" data-binding="{@visible: canChange}">\r\n                        <img src="Resources/Images/Icons/status-ok-16.png" class="status-msg-icon" data-binding="{@visible: hasSharing}{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}">\r\n                        <img src="Resources/Images/Icons/status-default-16.png" class="status-msg-icon" data-binding="{@hidden: hasSharing}{title: @language-offlinemapeditor-status-title-default}{alt: @language-offlinemapeditor-status-alt-default}">\r\n                        <span class="list-menu-desc" data-binding="{@visible: hasSharing}{@text: @language-offlinemapeditor-sharing-text-some}"></span>\r\n                        <span class="list-menu-desc" data-binding="{@hidden: hasSharing}{@text: @language-offlinemapeditor-sharing-text-none}"></span>\r\n                    </span>\r\n                    <span class="list-menu-status-msg" data-binding="{@hidden: canChange}">\r\n                        <img src="Resources/Images/Icons/status-alert-16.png" class="status-msg-icon" data-binding="{title: @language-offlinemapeditor-status-title-alert}{alt: @language-offlinemapeditor-status-alt-alert}">\r\n                        <span class="list-menu-desc" data-binding="{@text: @language-offlinemapeditor-sharing-cant-change}"></span>\r\n                    </span>\r\n                </span>\r\n            </button>\r\n        </li>\r\n    </ul>\r\n\r\n    <div class="form-btns">\r\n        <button class="button" data-binding="{@text: @language-offlinemapeditor-button-save}{@enabled: isValid}{@event-click: handleDoneClick}"></button>\r\n        <button class="button" data-binding="{@text: @language-common-cancel}{@event-click: handleCancelClick}"></button>\r\n    </div>\r\n</div>',"url:/Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsView.html":'<div class="panel-group-contents" data-binding="{@source: basemap}">\r\n    <div class="offline-basemap-levels" data-binding="{@template-for: basemap}">\r\n        <p data-binding="{@text: @language-offlinemapeditor-basemaps-levels-instructions}"></p>\r\n        <span data-binding="{@text: @language-offlinemapeditor-basemaps-levels-levels}"></span><span data-binding="{@text: exportTilesMinLevel}"></span> - <span data-binding="{@text: exportTilesMaxLevel}"></span>\r\n        <div data-binding="{@var: slider}"></div>\r\n        <div>\r\n            <span class="offline-profile-basemap-less-detail" data-binding="{@text: @language-offlinemapeditor-basemaps-levels-less-detail}"></span>\r\n            <span class="offline-profile-basemap-more-detail" data-binding="{@text: @language-offlinemapeditor-basemaps-levels-more-detail}"></span>\r\n        </div>\r\n        <div data-binding="{@hidden: isNone}">\r\n            <span data-binding="{@text: @language-offlinemapeditor-basemaps-size-label}"></span>\r\n            <span data-binding="{@text: sizePresentable}"></span>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class="form-btns">\r\n    <button class="button" data-binding="{@text: @language-common-ok}{@event-click: handleDoneClick}"></button>\r\n</div>',"url:/Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapsView.html":'<div class="basemap-editor offline-map-editor panel-group-contents" data-binding="{@source: basemaps}">\r\n    <div class="panel-group-contents" data-binding="{@template-for: basemaps}">\r\n\r\n        <span class="layer-item-ctrl layer-list-layer-icon" data-binding="{@visible: iconUri}"><img data-binding="{src: iconUri}" /></span>\r\n        <span class="display-name" data-binding="{@text: displayName}"></span>\r\n\r\n        <form data-binding="{@template-for: basemaps}{@visible: supportsAny}">\r\n            <div class="input-group">\r\n                <label>\r\n                    <input type="radio" name="sourceType" value="none" data-binding="{checked: isNone}{@event-onchange: handleTypeRadioClick}" />\r\n                    <span class="label-text" data-binding="{@text: @language-offlinemapeditor-basemaps-none}"></span>\r\n                </label>\r\n                <label data-binding="{@visible: supportsStatic}">\r\n                    <input type="radio" name="sourceType" value="pregenerated" data-binding="{checked: isStatic}{@event-onchange: handleTypeRadioClick}" />\r\n                    <span class="label-text" data-binding="{@text: @language-offlinemapeditor-basemaps-pregenerated}"></span>\r\n                </label>\r\n                <label data-binding="{@visible: supportsExportTiles}">\r\n                    <input type="radio" name="sourceType" value="exportTiles" data-binding="{checked: isExportTiles}{@event-onchange: handleTypeRadioClick}" />\r\n                    <span class="label-text" data-binding="{@text: @language-offlinemapeditor-basemaps-exporttiles}"></span>\r\n                </label>\r\n            </div>\r\n            <div data-binding="{@visible: isExportTiles}">\r\n                <div class="input-group">\r\n                    <span data-binding="{@text: @language-offlinemapeditor-basemaps-exporttiles-level}"></span>\r\n                    <span data-binding="{@text: exportTilesMinLevel}"></span> - <span data-binding="{@text: exportTilesMaxLevel}"></span>\r\n                    <button class="button" data-binding="{@text: @language-common-edit}{@event-click: handleEditLevelsClick}"></button>\r\n                </div>\r\n                <div class="input-group">\r\n                    <label>\r\n                        <span data-binding="{@text: @language-offlinemapeditor-basemaps-exporttiles-refresh-label}"></span>\r\n                        <input type="number" min="0" pattern="\\d*" data-binding="{@value: exportTilesRefreshInterval}" />\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div data-binding="{@visible: isStatic}">\r\n                <select data-binding="{@source: staticTpks}{@value: staticTpk}">\r\n                    <option data-binding="{@template-for: staticTpks}{@text: displayName}{@attach: @context}"></option>\r\n                </select>\r\n            </div>\r\n\r\n            <div data-binding="{@hidden: isNone}">\r\n                <span data-binding="{@text: @language-offlinemapeditor-basemaps-size-label}"></span>\r\n                <span data-binding="{@text: sizePresentable}"></span>\r\n            </div>\r\n        </form>\r\n\r\n        <!-- Errors. -->\r\n        <span class="error-message error-message-text" data-binding="{@hidden: supportsAny}{@text: @language-offlinemapeditor-basemaps-nonesupported}"></span>\r\n        <span class="error-message error-message-text" data-binding="{@visible: errorConfigurationMessage}{@text: errorConfigurationMessage}"></span>\r\n        <span class="error-message error-message-text" data-binding="{@visible: errorExportTilesMessage}{@text: errorExportTilesMessage}"></span>\r\n    </div>\r\n</div>\r\n\r\n<div class="form-btns">\r\n    <button class="button" data-binding="{@text: @language-common-ok}{@event-click: handleBackClick}"></button>\r\n</div>',"url:/Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryView.html":'<div data-binding="{@widget: OfflineMapEditorGeometryActionsWidget}{@widget-required: false}" data-menu-id="OfflineMapEditorGeometryActions" data-menu-template="Mapping/infrastructure/menus/MenuView.html" data-menu-hoist-disabled></div>\r\n\r\n<div class="form-btns">\r\n    <button class="button" data-binding="{@text: @language-common-ok}{@event-click: handleBackClick}"></button>\r\n</div>',
"url:/Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItemTemplate.html":'<li class="layer" data-binding="{@template-for: items}">\r\n    <div class="layer-item-expander" data-binding="{@visible: isFolder}">\r\n        <button class="tree-expander" data-binding="{@class-expanded: isExpanded}{@noclass-collapsed: isExpanded}{@event-onclick: handleExpanderClick}{title: expanderTooltip}"></button>\r\n    </div>\r\n    <div class="layer-info">\r\n        <div class="layer-contents">\r\n            <label>\r\n                <span class="layer-item-ctrl" data-binding="{@hidden: isFolder}">\r\n                    <input type="checkbox" data-binding="{@value: isEnabled}{checked: isEnabled}{title: stateToggleTooltip}" />\r\n                </span>\r\n                <span class="layer-item-ctrl layer-list-layer-icon" data-binding="{@visible: iconUri}"><img data-binding="{alt: iconTooltip}{src: iconUri}" /></span>\r\n                <span class="display-name label-text" data-binding="{@text: name}"></span>\r\n            </label>\r\n            <div class="item-child" data-binding="{@hidden: isFolder}">\r\n                <div class="item-options" data-binding="{@visible: isEnabled}">\r\n                    <span data-binding="{@hidden: invalidDefinitionExpression}">\r\n                        <button class="filter-button" data-binding="{@hidden: definitionExpression}{@event-onclick: handleDefinitionExpressionClick}{title: @language-offlinemapeditor-layers-filter-tooltip}"><img data-binding="{alt: @language-offlinemapeditor-layers-filter-tooltip}" src="Resources/Images/Icons/Toolbar/filter-off-24.png" /></button>\r\n                        <button class="filter-button" data-binding="{@visible: definitionExpression}{@event-onclick: handleDefinitionExpressionClick}{title: @language-offlinemapeditor-layers-filter-tooltip}"><img data-binding="{alt: @language-offlinemapeditor-layers-filter-tooltip}" src="Resources/Images/Icons/Toolbar/filter-on-24.png" /></button>\r\n                    </span>\r\n                    <button class="filter-button" data-binding="{@visible: invalidDefinitionExpression}{@event-onclick: handleDefinitionExpressionClick}{title: @language-offlinemapeditor-layers-invalid-definition-expression-title}"><img data-binding="{alt: @language-offlinemapeditor-layers-invalid-definition-expression-title}" src="Resources/Images/Icons/Toolbar/filter-error-24.png" /></button>\r\n                    <div class="sub-text">\r\n                        <span data-binding="{@text: numFeatures}{title: numFeaturesTitle}"></span>\r\n                        <span data-binding="{@text: @language-offlinemapeditor-layers-feature-count}"></span>\r\n                    </div>\r\n                    <div class="sub-text">\r\n                        <span data-binding="{@text: editableOrReadOnlyText}"></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <ul class="layers" data-binding="{@visible: isExpanded}{@source: items}{@template: Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItemTemplate.html}"></ul>\r\n</li>',"url:/Mapping/modules/OfflineMaps/Editor/Layers/OfflineMapEditorLayersView.html":'<div class="profile-layers" data-binding="{@source: layerSelectorViewModel}">\r\n    <div data-binding="{@template-for: layerSelectorViewModel}">\r\n        <ul class="layer-selector-buttons panel-group-contents">\r\n            <li><button class="button layer-actions-button" data-binding="{@text: selectAllButtonText}{title: selectAllButtonTitle}{@event-onclick: selectAllLayers}"></button></li>\r\n            <li><button class="button layer-actions-button" data-binding="{@text: clearAllButtonText}{title: clearAllButtonTitle}{@event-onclick: clearAllLayers}"></button></li>\r\n        </ul>\r\n        <div class="layer-list">\r\n            <ul class="identify-layers layers" data-binding="{@source: items}{@template: Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItemTemplate.html}"></ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class="panel-group-contents clear">\r\n    <label>\r\n        <input type="checkbox" data-binding="{@value: includeAttachments}"/>\r\n        <span class="label-text" data-binding="{@text: @language-offlinemapeditor-layers-attachments-label}{title: @language-offlinemapeditor-layers-attachments-alt}"></span>\r\n    </label>\r\n</div>\r\n\r\n<div class="form-btns">\r\n    <button class="button" data-binding="{@text: @language-common-ok}{@event-click: handleBackClick}"></button>\r\n</div>',"url:/Mapping/modules/OfflineMaps/Editor/Sharing/OfflineMapEditorSharingView.html":'<div class="panel-group-contents">\r\n    <div class="share-with">\r\n        <label class="form-label" data-binding="{@text: @language-offlinemapeditor-share-with-label}"></label>\r\n    </div>\r\n    <div data-binding="{@widget: GrantEditorWidget}{@widget-context: @context}{@widget-replace: true}"></div>\r\n    <div data-binding="{@hidden: canChange}{@text: @language-offlinemapeditor-sharing-cant-change}"></div>\r\n\r\n    <div class="form-btns">\r\n        <button class="button" data-binding="{@text: @language-common-ok}{@event-click: handleBackClick}"></button>\r\n    </div>\r\n</div>',"url:/Mapping/modules/OfflineMaps/Sync/SyncStatusView.html":'<div class="sync-status padded-view">\r\n    <div>\r\n        <!-- Progress | Complete text | Error text-->\r\n        <h3 class="sync-status-heading"><span data-binding="{@text: @language-offline-maps-sync-syncing-profile}"></span> <span data-binding="{@text: name}"></span></h3>\r\n        <div data-binding="{@visible: isResuming}{@text: @language-offline-maps-sync-resuming}"></div>\r\n        <div class="sync-status-spacer"></div>\r\n        <div data-binding="{@visible: showProgress}{@widget: syncProgressBar}"></div>\r\n        <ul data-binding="{@source: progressModels}">\r\n            <li data-binding="{@template-for: progressModels}">\r\n                <span data-binding="{@text: mapNameDisplay}{@visible: mapNameDisplay}"></span>\r\n                <span data-binding="{@text: message}{className: progressClass}"></span>\r\n            </li>\r\n        </ul>\r\n        <div data-binding="{@text: partialDataText}{@visible: partialDataText}"></div>\r\n        <div data-binding="{@text: cancellingText}{@visible: cancellingText}"></div>\r\n\r\n        <!-- Warnings -->\r\n        <div class="sync-warning-header" data-binding="{@text: @language-offline-maps-sync-warnings}{@visible: warnings}"></div>\r\n        <div class="sync-warnings" data-binding="{@visible: warnings}">\r\n            <ul data-binding="{@source: warnings}">\r\n                <li data-binding="{@template-for: warnings}">\r\n                    <span data-binding="{@text: @context}"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Buttons & Close when done -->\r\n    <div class="form-btns">\r\n        <label class="sync-checkbox-close"><input type="checkbox" data-binding="{@value: closeWhenDone}" /><span data-binding="{@text: @language-offline-maps-sync-close-when-done}"></span></label>\r\n        <button class="button" data-binding="{@text: @language-common-cancel}{@event-click: handleCancelClick}{@visible: showCancel}{@enabled: canCancel}"></button>\r\n        <button class="button" data-binding="{@text: @language-common-close}{@event-click: handleCloseClick}{@visible: showClose}"></button>\r\n        <button class="button" data-binding="{@text: @language-offline-maps-delete-keep-button}{@event-click: handleCloseClick}{@visible: partialDataText}"></button>\r\n        <button class="button" data-binding="{@text: @language-offline-maps-delete-data-button}{@event-click: handleDeleteData}{@visible: partialDataText}"></button>\r\n    </div>\r\n    <!-- Details -->\r\n    <div class="sync-details">\r\n        <button data-binding="{@class-collapsed: hideStatusText}{@class-expanded: showStatusText}{@event-click: handleToggleDetailsClick}" class="sync-status-details-toggle">\r\n            <span data-binding="{@text: @language-offline-maps-sync-show-details}"></span>\r\n        </button>\r\n        <div class="sync-status-details" data-binding="{@text: statusText}{@visible: showStatusText}"></div>\r\n    </div>\r\n</div>',"url:/Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget.html":'<div class="progress-bar">\r\n    <div class="progress" data-binding="{@style-width: widthStyle}"></div>\r\n</div>'}}),define(["Mapping/modules/OfflineMaps/ListOfflineMapsView","Mapping/modules/OfflineMaps/ManageOfflineMapsView","Mapping/modules/OfflineMaps/OfflineMapModel","Mapping/modules/OfflineMaps/OfflineMapsModule","Mapping/modules/OfflineMaps/OfflineMapsViewModel","Mapping/modules/OfflineMaps/Editor/MapState","Mapping/modules/OfflineMaps/Editor/OfflineMapEditorBasemap","Mapping/modules/OfflineMaps/Editor/OfflineMapEditorView","Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewModel","Mapping/modules/OfflineMaps/Sync/SyncStatusView","Mapping/modules/OfflineMaps/Sync/SyncStatusViewModel","Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget","Mapping/modules/OfflineMaps/Widgets/ProgressBarWidgetViewModel","Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryView","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsView","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsViewModel","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapsView","Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorViewModel","Mapping/modules/OfflineMaps/Editor/Layers/OfflineMapEditorLayersView","Mapping/modules/OfflineMaps/Editor/Sharing/OfflineMapEditorSharingView"],function(e,t,i,n,a,s,r,o,l,p,d,f,c,u,g,m,h,v,M,b){shim(e,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.ListOfflineMapsView",e.ListOfflineMapsView),shim(t,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.ManageOfflineMapsView",t.ManageOfflineMapsView),shim(i,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.OfflineMapModel",i.OfflineMapModel),shim(n,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.OfflineMapsModule",n.OfflineMapsModule),shim(a,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.OfflineMapsViewModel",a.OfflineMapsViewModel),shim(s,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.MapState",s.MapState),shim(r,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.OfflineMapEditorBasemap",r.OfflineMapEditorBasemap),shim(o,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.OfflineMapEditorView",o.OfflineMapEditorView),shim(l,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.OfflineMapEditorViewModel",l.OfflineMapEditorViewModel),shim(p,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.sync.SyncStatusView",p.SyncStatusView),shim(d,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.sync.SyncStatusViewModel",d.SyncStatusViewModel),shim(f,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.widgets.ProgressBarWidget",f.ProgressBarWidget),shim(c,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.widgets.ProgressBarWidgetViewModel",c.ProgressBarWidgetViewModel),shim(u,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.geometry.OfflineMapEditorGeometryView",u.OfflineMapEditorGeometryView),shim(g,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.basemap.OfflineMapEditorBasemapLevelsView",g.OfflineMapEditorBasemapLevelsView),shim(m,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.basemap.OfflineMapEditorBasemapLevelsViewModel",m.OfflineMapEditorBasemapLevelsViewModel),shim(h,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.basemap.OfflineMapEditorBasemapsView",h.OfflineMapEditorBasemapsView),shim(v,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.layers.LayerSelectorViewModel",v.LayerSelectorViewModel),shim(M,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.layers.OfflineMapEditorLayersView",M.OfflineMapEditorLayersView),shim(b,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.sharing.OfflineMapEditorSharingView",b.OfflineMapEditorSharingView)});