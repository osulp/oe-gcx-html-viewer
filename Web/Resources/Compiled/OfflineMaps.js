!function(){function e(e,t,i){if("string"==typeof e&&(i=t,t=e),void 0!==i)for(var a=t.split("."),n=null,s=window,o=0,l=a.length;o<l;o++)n=a[o],o==l-1?s[n]=i:s[n]||(s[n]={}),s=s[n];else console.warn("Undefined shim for: "+t)}var t="<div class='panel-group-contents' data-binding='{@source: basemap}'>    <div class='offline-basemap-levels' data-binding='{@template-for: basemap}'>        <p data-binding='{@text: @language-offlinemapeditor-basemaps-levels-instructions}'></p>        <span data-binding='{@text: @language-offlinemapeditor-basemaps-levels-levels}'></span><span data-binding='{@text: exportTilesMinLevel}'></span> - <span data-binding='{@text: exportTilesMaxLevel}'></span>        <div data-binding='{@var: slider}'></div>        <div>            <span class='offline-profile-basemap-less-detail' data-binding='{@text: @language-offlinemapeditor-basemaps-levels-less-detail}'></span>            <span class='offline-profile-basemap-more-detail' data-binding='{@text: @language-offlinemapeditor-basemaps-levels-more-detail}'></span>        </div>        <div data-binding='{@hidden: isNone}'>            <span data-binding='{@text: @language-offlinemapeditor-basemaps-size-label}'></span>            <span data-binding='{@text: sizePresentable}'></span>        </div>    </div></div><div class='form-btns'>    <button class='button' data-binding='{@text: @language-common-ok}{@event-click: handleDoneClick}'></button></div>",i="<div class='basemap-editor offline-map-editor panel-group-contents' data-binding='{@source: basemaps}'>    <div class='panel-group-contents' data-binding='{@template-for: basemaps}'>        <span class='layer-item-ctrl layer-list-layer-icon' data-binding='{@visible: iconUri}'><img data-binding='{src: iconUri}{alt: @language-offlinemapeditor-layer-icon}' /></span>        <span class='display-name' data-binding='{@text: displayName}'></span>        <form data-binding='{@template-for: basemaps}{@visible: supportsAny}'>            <div class='input-group'>                <label>                    <input type='radio' name='sourceType' value='none' data-binding='{checked: isNone}{@event-onchange: handleTypeRadioClick}' />                    <span class='label-text' data-binding='{@text: @language-offlinemapeditor-basemaps-none}'></span>                </label>                <label data-binding='{@visible: supportsStatic}'>                    <input type='radio' name='sourceType' value='pregenerated' data-binding='{checked: isStatic}{@event-onchange: handleTypeRadioClick}' />                    <span class='label-text' data-binding='{@text: @language-offlinemapeditor-basemaps-pregenerated}'></span>                </label>                <label data-binding='{@visible: supportsExportTiles}'>                    <input type='radio' name='sourceType' value='exportTiles' data-binding='{checked: isExportTiles}{@event-onchange: handleTypeRadioClick}' />                    <span class='label-text' data-binding='{@text: @language-offlinemapeditor-basemaps-exporttiles}'></span>                </label>            </div>            <div data-binding='{@visible: isExportTiles}'>                <div class='input-group'>                    <span data-binding='{@text: @language-offlinemapeditor-basemaps-exporttiles-level}'></span>                    <span data-binding='{@text: exportTilesMinLevel}'></span> - <span data-binding='{@text: exportTilesMaxLevel}'></span>                    <button class='button' data-binding='{@text: @language-common-edit}{@event-click: handleEditLevelsClick}'></button>                </div>                <div class='input-group'>                    <label>                        <span data-binding='{@text: @language-offlinemapeditor-basemaps-exporttiles-refresh-label}'></span>                        <input type='number' min='0' pattern='d*' data-binding='{@value: exportTilesRefreshInterval}' />                    </label>                </div>            </div>            <div data-binding='{@visible: isStatic}'>                <select data-binding='{@source: staticTpks}{@value: staticTpk}'>                    <option data-binding='{@template-for: staticTpks}{@text: displayName}{@attach: @context}'></option>                </select>            </div>            <div data-binding='{@hidden: isNone}'>                <span data-binding='{@text: @language-offlinemapeditor-basemaps-size-label}'></span>                <span data-binding='{@text: sizePresentable}'></span>            </div>        </form>        \x3c!-- Errors. --\x3e        <span class='error-message error-message-text' data-binding='{@hidden: supportsAny}{@text: @language-offlinemapeditor-basemaps-nonesupported}'></span>        <span class='error-message error-message-text' data-binding='{@visible: errorConfigurationMessage}{@text: errorConfigurationMessage}'></span>        <span class='error-message error-message-text' data-binding='{@visible: errorExportTilesMessage}{@text: errorExportTilesMessage}'></span>    </div></div><div class='form-btns'>    <button class='button' data-binding='{@text: @language-common-ok}{@event-click: handleBackClick}'></button></div>",a="<div data-binding='{@widget: OfflineMapEditorGeometryActionsWidget}{@widget-required: false}' data-menu-id='OfflineMapEditorGeometryActions' data-menu-template='Mapping/infrastructure/menus/MenuView.html' data-menu-hoist-disabled></div><div class='form-btns'>    <button class='button' data-binding='{@text: @language-common-ok}{@event-click: handleBackClick}'></button></div>",n="<li class='layer' data-binding='{@template-for: items}'>    <div class='layer-item-expander' data-binding='{@visible: isFolder}'>        <button class='tree-expander' data-binding='{@class-expanded: isExpanded}{@noclass-collapsed: isExpanded}{@event-onclick: handleExpanderClick}{title: expanderTooltip}'></button>    </div>    <div class='layer-info'>        <div class='layer-contents'>            <label>                <span class='layer-item-ctrl' data-binding='{@hidden: isFolder}'>                    <input type='checkbox' data-binding='{@value: isEnabled}{checked: isEnabled}{title: stateToggleTooltip}' />                </span>                <span class='layer-item-ctrl layer-list-layer-icon' data-binding='{@visible: iconUri}'><img data-binding='{alt: iconTooltip}{src: iconUri}' /></span>                <span class='display-name label-text' data-binding='{@text: name}'></span>            </label>            <div class='item-child' data-binding='{@hidden: isFolder}'>                <div class='item-options' data-binding='{@visible: isEnabled}'>                    <span data-binding='{@hidden: invalidDefinitionExpression}'>                        <button class='filter-button' data-binding='{@hidden: definitionExpression}{@event-onclick: handleDefinitionExpressionClick}{title: @language-offlinemapeditor-layers-filter-tooltip}'><img data-binding='{alt: @language-offlinemapeditor-layers-filter-tooltip}' src='Resources/Images/Icons/Toolbar/filter-off-24.png' /></button>                        <button class='filter-button' data-binding='{@visible: definitionExpression}{@event-onclick: handleDefinitionExpressionClick}{title: @language-offlinemapeditor-layers-filter-tooltip}'><img data-binding='{alt: @language-offlinemapeditor-layers-filter-tooltip}' src='Resources/Images/Icons/Toolbar/filter-on-24.png' /></button>                    </span>                    <button class='filter-button' data-binding='{@visible: invalidDefinitionExpression}{@event-onclick: handleDefinitionExpressionClick}{title: @language-offlinemapeditor-layers-invalid-definition-expression-title}'><img data-binding='{alt: @language-offlinemapeditor-layers-invalid-definition-expression-title}' src='Resources/Images/Icons/Toolbar/filter-error-24.png' /></button>                    <div class='sub-text'>                        <span data-binding='{@text: numFeatures}{title: numFeaturesTitle}'></span>                        <span data-binding='{@text: @language-offlinemapeditor-layers-feature-count}'></span>                    </div>                    <div class='sub-text'>                        <span data-binding='{@text: editableOrReadOnlyText}'></span>                    </div>                </div>            </div>        </div>    </div>    <ul class='layers' data-binding='{@visible: isExpanded}{@source: items}{@template: Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItemTemplate.html}'></ul></li>",s="<div class='profile-layers' data-binding='{@source: layerSelectorViewModel}'>    <div data-binding='{@template-for: layerSelectorViewModel}'>        <ul class='layer-selector-buttons panel-group-contents'>            <li><button class='button layer-actions-button' data-binding='{@text: selectAllButtonText}{title: selectAllButtonTitle}{@event-onclick: selectAllLayers}'></button></li>            <li><button class='button layer-actions-button' data-binding='{@text: clearAllButtonText}{title: clearAllButtonTitle}{@event-onclick: clearAllLayers}'></button></li>        </ul>        <div class='layer-list'>            <ul class='identify-layers layers' data-binding='{@source: items}{@template: Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItemTemplate.html}'></ul>        </div>    </div></div><div class='panel-group-contents clear'>    <label>        <input type='checkbox' data-binding='{@value: includeAttachments}'/>        <span class='label-text' data-binding='{@text: @language-offlinemapeditor-layers-attachments-label}{title: @language-offlinemapeditor-layers-attachments-alt}'></span>    </label></div><div class='form-btns'>    <button class='button' data-binding='{@text: @language-common-ok}{@event-click: handleBackClick}'></button></div>",o="<div class='offline-map-editor'>        <span class='error-message' data-binding='{@text: loadError}{@visible: loadError}'></span>    <div class='panel-group-contents'>        <label for='profile_1' data-binding='{@text: @language-offlinemapeditor-name-label}'></label>        <input id='profile_1' type='text' data-binding='{@value: name}{@enabled: canChange}'/>        <div data-binding='{@hidden: canChange}'>            <img src='Resources/Images/Icons/status-alert-16.png' class='status-msg-icon' data-binding='{title: @language-offlinemapeditor-status-title-alert}{alt: @language-offlinemapeditor-status-alt-alert}'>            <span data-binding='{@text: @language-offlinemapeditor-name-cant-change}'></span>        </div>        <div data-binding='{@hidden: name}'>            <img src='Resources/Images/Icons/status-error-16.png' class='status-msg-icon' data-binding='{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}'>            <span class='error-message' data-binding='{@text: @language-offlinemapeditor-error-noname}{@hidden: name}'></span>        </div>    </div>    <ul class='list-menu active has-icon'>        <li>            <button class='list-menu-item' data-binding='{@event-onclick: handleGeometryClick}'>                <img class='list-menu-icon' data-binding='{alt: @language-offlinemapeditor-draw-polygon}' src='Resources/Images/Icons/Toolbar/draw-polygon-24.png' />                <span class='list-menu-details'>                    <strong class='list-menu-name' data-binding='{@text: @language-offlinemapeditor-geometry-button}'></strong>                    <span class='list-menu-desc' data-binding='{@text: @language-offlinemapeditor-geometry-description}'></span>                    <span class='list-menu-status-msg' data-binding='{@visible: isGeometryValid}'>                        <img src='Resources/Images/Icons/status-ok-16.png' class='status-msg-icon' data-binding='{@visible: geometryChanged}{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}'>                        <img src='Resources/Images/Icons/status-default-16.png' class='status-msg-icon' data-binding='{@hidden: geometryChanged}{title: @language-offlinemapeditor-status-title-default}{alt: @language-offlinemapeditor-status-title-default}'>                        <span class='list-menu-desc' data-binding='{@hidden: geometryChanged}{@text: @language-offlinemapeditor-geometry-text-default}'></span>                        <span class='list-menu-desc' data-binding='{@visible: geometryChanged}{@text: @language-offlinemapeditor-geometry-text}'></span>                    </span>                    <span class='list-menu-status-msg' data-binding='{@hidden: isGeometryValid}'>                        <img src='Resources/Images/Icons/status-error-16.png' class='status-msg-icon' data-binding='{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}'>                        <span class='error-message' data-binding='{@text: @language-offlinemapeditor-geometry-error-empty}'></span>                    </span>                </span>            </button>        </li>        <li>            <button class='list-menu-item' data-binding='{@event-onclick: handleLayersClick}'>                <img class='list-menu-icon' data-binding='{alt: @language-offlinemapeditor-layers}' src='Resources/Images/Icons/Toolbar/layers-24.png' />                <span class='list-menu-details'>                    <strong class='list-menu-name' data-binding='{@text: @language-offlinemapeditor-layers-button}'></strong>                    <span class='list-menu-desc' data-binding='{@text: @language-offlinemapeditor-layers-description}'></span>                    <span class='list-menu-status-msg' data-binding='{@visible: isLayersValid}'>                        <img src='Resources/Images/Icons/status-ok-16.png' class='status-msg-icon' data-binding='{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}'>                        <span class='list-menu-desc' data-binding='{@text: layersText}{@visible: isLayersValid}'></span>                    </span>                    <span class='list-menu-status-msg' data-binding='{@hidden: isLayersValid}'>                        <img src='Resources/Images/Icons/status-error-16.png' class='status-msg-icon' data-binding='{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}'>                        <span class='error-message' data-binding='{@text: @language-offlinemapeditor-layers-error-empty}'></span>                    </span>                </span>            </button>        </li>        <li>            <button class='list-menu-item' data-binding='{@event-onclick: handleBasemapsClick}'>                <img class='list-menu-icon' data-binding='{alt: @language-offlinemapeditor-basemap}' src='Resources/Images/Icons/basemap-24.png' />                <span class='list-menu-details'>                    <strong class='list-menu-name' data-binding='{@text: @language-offlinemapeditor-basemaps-button}'></strong>                    <span class='list-menu-desc' data-binding='{@text: @language-offlinemapeditor-basemaps-description}'></span>                    <span class='list-menu-status-msg' data-binding='{@visible: isBasemapsValid}'>                        <img src='Resources/Images/Icons/status-ok-16.png' class='status-msg-icon' data-binding='{@visible: hasBasemaps}{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}'>                        <img src='Resources/Images/Icons/status-default-16.png' class='status-msg-icon' data-binding='{@hidden: hasBasemaps}{title: @language-offlinemapeditor-status-title-default}{alt: @language-offlinemapeditor-status-alt-default}'>                        <span class='list-menu-desc' data-binding='{@text: basemapsText}'></span>                    </span>                    <span class='list-menu-status-msg' data-binding='{@hidden: isBasemapsValid}'>                        <img src='Resources/Images/Icons/status-error-16.png' class='status-msg-icon' data-binding='{title: @language-offlinemapeditor-status-title-error}{alt: @language-offlinemapeditor-status-alt-error}'>                        <span class='error-message' data-binding='{@hidden: isBasemapsCalculating}{@text: @language-offlinemapeditor-basemaps-error}'></span>                        <span class='error-message' data-binding='{@visible: isBasemapsCalculating}{@text: @language-offlinemapeditor-basemaps-error-calculating}'></span>                    </span>                </span>            </button>        </li>        <li>            <button class='list-menu-item' data-binding='{@event-onclick: handleSharingClick}'>                <img class='list-menu-icon' data-binding='{alt: @language-offlinemapeditor-team}' src='Resources/Images/Icons/team-24.png' />                <span class='list-menu-details'>                    <strong class='list-menu-name' data-binding='{@text: @language-offlinemapeditor-sharing-button}'></strong>                    <span class='list-menu-desc' data-binding='{@visible: canChange}{@text: @language-offlinemapeditor-sharing-description}'></span>                    <span class='list-menu-status-msg' data-binding='{@visible: canChange}'>                        <img src='Resources/Images/Icons/status-ok-16.png' class='status-msg-icon' data-binding='{@visible: hasSharing}{title: @language-offlinemapeditor-status-title-ok}{alt: @language-offlinemapeditor-status-alt-ok}'>                        <img src='Resources/Images/Icons/status-default-16.png' class='status-msg-icon' data-binding='{@hidden: hasSharing}{title: @language-offlinemapeditor-status-title-default}{alt: @language-offlinemapeditor-status-alt-default}'>                        <span class='list-menu-desc' data-binding='{@visible: hasSharing}{@text: @language-offlinemapeditor-sharing-text-some}'></span>                        <span class='list-menu-desc' data-binding='{@hidden: hasSharing}{@text: @language-offlinemapeditor-sharing-text-none}'></span>                    </span>                    <span class='list-menu-status-msg' data-binding='{@hidden: canChange}'>                        <img src='Resources/Images/Icons/status-alert-16.png' class='status-msg-icon' data-binding='{title: @language-offlinemapeditor-status-title-alert}{alt: @language-offlinemapeditor-status-alt-alert}'>                        <span class='list-menu-desc' data-binding='{@text: @language-offlinemapeditor-sharing-cant-change}'></span>                    </span>                </span>            </button>        </li>    </ul>    <div class='form-btns'>        <button class='button' data-binding='{@text: @language-offlinemapeditor-button-save}{@enabled: isValid}{@event-click: handleDoneClick}'></button>        <button class='button' data-binding='{@text: @language-common-cancel}{@event-click: handleCancelClick}'></button>    </div></div>",l="<div class='panel-group-contents'>    <div class='share-with'>        <label class='form-label' data-binding='{@text: @language-offlinemapeditor-share-with-label}'></label>    </div>    <div data-binding='{@widget: GrantEditorWidget}{@widget-context: @context}{@widget-replace: true}'></div>    <div data-binding='{@hidden: canChange}{@text: @language-offlinemapeditor-sharing-cant-change}'></div>    <div class='form-btns'>        <button class='button' data-binding='{@text: @language-common-ok}{@event-click: handleBackClick}'></button>    </div></div>",r="<div data-binding='{@widget: ListOfflineMapsActionsWidget}{@widget-required: false}' data-menu-id='ListOfflineMapsActions' data-menu-template='Mapping/infrastructure/menus/MenuView.html'></div><div class='offline-profiles'>    <div class='offline-profile-message error-message'>        <span class='error-message-text' data-binding='{@text: @language-offline-maps-not-native}{@hidden: statusNative}'></span>        <span class='error-message-text' data-binding='{@text: @language-offline-maps-empty-offline}{@visible: statusOffline}'></span>        <span data-binding='{@hidden: statusOffline}'>            <span class='error-message-text' data-binding='{@text: @language-offline-maps-empty-fetching}{@visible: statusFetching}'></span>            <span data-binding='{@hidden: statusFetching}'>                <span class='error-message-text' data-binding='{@text: @language-offline-maps-empty-unsupported}{@visible: statusUnsupported}'></span>                <span data-binding='{@hidden: statusUnsupported}'>                    <span class='error-message-text' data-binding='{@text: @language-offline-maps-empty-empty}{@visible: statusEmpty}'></span>                </span>            </span>        </span>    </div>    <ul class='list-menu profile-list'>        <li class='item-list-item online-only'>            <button class='list-item-button' data-binding='{@event-click: handleDeactivateOfflineMapClick}{@enabled: hasActiveOfflineMap}'>                <span class='offline-thumbnail'><img src='Resources/Images/Icons/map-online-70x50.png' class='list-item-img' data-binding='{alt: @language-offline-maps-use-online-data-desc}' /></span>                <strong class='list-menu-name' data-binding='{@text: @language-offline-maps-use-online-data}'></strong>                <span class='list-menu-desc' data-binding='{@text: @language-offline-maps-use-online-data-desc}'></span>                <span class='status-icon' data-binding='{@hidden: hasActiveOfflineMap}'><span class='status-icon-helper'></span><img src='Resources/Images/Icons/cloud-24.png' alt='Downloaded' /></span>            </button>        </li>    </ul>    <ul class='list-menu profile-list' data-binding='{@hidden: offline}{@source: mergedOfflineMaps}'>        <li class='item-list-item' data-binding='{@template-for: mergedOfflineMaps}{@class-active-list-item: isActive}'>            <button class='list-item-button' data-binding='{@event-click: handleOfflineMapClick}{@disabled: isActive}'>                <span class='offline-thumbnail'><span class='offline-thumbnail-helper'></span><img class='list-item-img' data-binding='{src: thumbnail}{title: title}{alt: title}{@event-error: handleThumbnailLoadError}' /></span>                <span class='list-menu-name' data-binding='{@text: title}'></span>                <span data-binding='{@hidden: isOrphaned}'>                    <span class='status-icon active-icon' data-binding='{@visible: isActive}'><span class='status-icon-helper'></span><img src='Resources/Images/Icons/device-active-24.png' alt='Active' /></span>                    <span class='status-icon downloaded-icon' data-binding='{@visible: isDownloaded}'><span class='status-icon-helper'></span><img src='Resources/Images/Icons/device-phone-24.png' alt='Downloaded' /></span>                    <span class='status-icon' data-binding='{@hidden: isDownloaded}'><span class='status-icon-helper'></span><img src='Resources/Images/Icons/cloud-download-24.png' alt='Download' /></span>                </span>                <span class='status-icon orphan-icon' data-binding='{@visible: isOrphaned}'><span class='status-icon-helper'></span><img src='Resources/Images/Icons/error-24.png' alt='Profile has been removed from the server' /></span>                <div class='list-menu-desc' data-binding='{@visible: isDownloaded}'>                    <div><span data-binding='{@text: @language-offline-maps-size}'></span><span data-binding='{@text: dataSizeDisplayValue}'></span></div>                    <div><span data-binding='{@text: @language-offline-maps-last-sync-time}'></span><span data-binding='{@text: lastSyncTime}'></span></div>                    <div data-binding='{@visible: isOrphaned}'><span class='orphan-warning' data-binding='{@text: @language-offline-maps-orphaned}'></span></div>                </div>                <span class='list-menu-desc sync-incomplete' data-binding='{@visible: hasProgress}{@text: @language-offline-maps-has-progress}'></span>            </button>            <div data-binding='{@hidden: isActive}'>                <button class='list-item-button action-button' data-binding='{@visible: isDownloaded}{@event-click: handleOfflineMapForgetClick}'><span class='action-button-helper'></span><img src='Resources/Images/Icons/clear-24.png' alt='Remove from Device' /></button>            </div>            <div data-binding='{@visible: isActive}'>                <button class='list-item-button action-button' data-binding='{@visible: isDownloaded}{@event-click: handleOfflineMapSyncClick}'><span class='action-button-helper'></span><span class='icon-container' data-binding='{@class-sync-incomplete: hasProgress}'><img src='Resources/Images/Icons/toolbar/sync-24.png' alt='Sync'/></span></button>            </div>            <span class='edits-badge' data-binding='{@text: numberOfEdits}{@visible: numberOfEdits}'></span>        </li>    </ul></div>",p="<div data-binding='{@widget: ManageOfflineMapsActionsWidget}{@widget-required: false}' data-menu-id='ManageOfflineMapsActions' data-menu-template='Mapping/infrastructure/menus/MenuView.html'></div><div class='offline-profiles panel-group-contents'>    <div class='offline-header-info-text' data-binding='{@visible: switchedToOnlineMap}{@text: @language-offline-maps-manage-showing-online-map}'>    </div>    <div class='offline-profile-message error-message'>        <span class='error-message-text' data-binding='{@text: @language-offline-maps-empty-offline}{@visible: statusOffline}'></span>        <span data-binding='{@hidden: statusOffline}'>            <span data-binding='{@hidden: statusUnsupported}'>                <span class='error-message-text' data-binding='{@text: @language-offline-maps-empty-empty}{@visible: statusEmpty}'></span>            </span>        </span>        <span class='error-message-text' data-binding='{@text: @language-offline-maps-cannot-create}{@hidden: canCreate}'></span>    </div>    <ul class='list-menu profile-manage' data-binding='{@hidden: offline}{@source: docstoreOfflineMaps}'>        <li class='item-list-item' data-binding='{@template-for: docstoreOfflineMaps}{@visible: canEdit}'>            <button class='list-item-button' data-binding='{@event-click: handleEditOfflineMapClick}'>                <span class='offline-thumbnail'><span class='offline-thumbnail-helper'></span><img class='list-item-img' data-binding='{src: thumbnail}{title: title}{alt: title}{@event-error: handleThumbnailLoadError}' /></span>                <span class='list-menu-name' data-binding='{@text: title}'></span>                <span class='status-icon' data-binding='{@hidden: isDownloaded}'><span class='status-icon-helper'></span><img src='Resources/Images/Icons/Toolbar/edit-24.png' alt='Edit' /></span>            </button>            <button class='list-item-button button-delete' data-binding='{@event-click: handleDeleteOfflineMapClick}{@visible: canChange}'>                <img src='Resources/Images/Icons/trash-white.png' data-binding='{title: @language-offline-maps-delete-from-server-title}{alt: @language-offline-maps-delete-from-server-title}' />            </button>        </li>    </ul>    <div class='form-btns'>        <button class='button' data-binding='{@text: @language-offline-maps-new-button}{@event-click: handleNewOfflineMapClick}{@enabled: canCreate}'></button>        <button class='button' data-binding='{@text: @language-common-done}{@event-click: handleDoneClick}{@visible: showManageDoneButton}'></button>    </div></div>",c="<div class='sync-status padded-view'>    <div>        \x3c!-- Progress | Complete text | Error text--\x3e        <h3 class='sync-status-heading'><span data-binding='{@text: @language-offline-maps-sync-syncing-profile}'></span> <span data-binding='{@text: name}'></span></h3>        <div data-binding='{@visible: isResuming}{@text: @language-offline-maps-sync-resuming}'></div>        <div class='sync-status-spacer'></div>        <div data-binding='{@visible: showProgress}{@widget: syncProgressBar}'></div>        <ul data-binding='{@source: progressModels}'>            <li data-binding='{@template-for: progressModels}'>                <span data-binding='{@text: mapNameDisplay}{@visible: mapNameDisplay}'></span>                <span data-binding='{@text: message}{className: progressClass}'></span>            </li>        </ul>        <div data-binding='{@text: partialDataText}{@visible: partialDataText}'></div>        <div data-binding='{@text: cancellingText}{@visible: cancellingText}'></div>        \x3c!-- Warnings --\x3e        <div class='sync-warning-header' data-binding='{@text: @language-offline-maps-sync-warnings}{@visible: warnings}'></div>        <div class='sync-warnings' data-binding='{@visible: warnings}'>            <ul data-binding='{@source: warnings}'>                <li data-binding='{@template-for: warnings}'>                    <span data-binding='{@text: @context}'></span>                </li>            </ul>        </div>    </div>    \x3c!-- Buttons & Close when done --\x3e    <div class='form-btns'>        <label class='sync-checkbox-close'><input type='checkbox' data-binding='{@value: closeWhenDone}' /><span data-binding='{@text: @language-offline-maps-sync-close-when-done}'></span></label>        <button class='button' data-binding='{@text: @language-common-cancel}{@event-click: handleCancelClick}{@visible: showCancel}{@enabled: canCancel}'></button>        <button class='button' data-binding='{@text: @language-common-close}{@event-click: handleCloseClick}{@visible: showClose}'></button>        <button class='button' data-binding='{@text: @language-offline-maps-delete-keep-button}{@event-click: handleCloseClick}{@visible: partialDataText}'></button>        <button class='button' data-binding='{@text: @language-offline-maps-delete-data-button}{@event-click: handleDeleteData}{@visible: partialDataText}'></button>    </div>    \x3c!-- Details --\x3e    <div class='sync-details'>        <button data-binding='{@class-collapsed: hideStatusText}{@class-expanded: showStatusText}{@event-click: handleToggleDetailsClick}' class='sync-status-details-toggle'>            <span data-binding='{@text: @language-offline-maps-sync-show-details}'></span>        </button>        <div class='sync-status-details' data-binding='{@text: statusText}{@visible: showStatusText}'></div>    </div></div>",d="<div class='progress-bar'>    <div class='progress' data-binding='{@style-width: widthStyle}'></div></div>";require({cache:{"Mapping/modules/OfflineMaps/ListOfflineMapsView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase","./OfflineMapsModule"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e._offlineMapIfBusyBindingTokens={},e}return e(i,t),i.prototype.attach=function(e){t.prototype.attach.call(this,e),e&&(e.isBusy.bind(this,this._calculateIsBusy),e.mergedOfflineMaps.bind(this,this._offlineMapsChanged))},i.prototype.activated=function(){t.prototype.activated.call(this),this.viewModel.activate()},i.prototype.handleOfflineMapClick=function(e,t,i){var a=this;if(!i.isActive.get())if(i.isDownloaded.get()){if(this.isBusy.get())return;i.isBusy.set(!0),this.app.offlineManager.activateOfflineMap(i.doc,!0).then(function(){i.isBusy.set(!1)},function(e){i.isBusy.set(!1),a.app.trace.error("Failed to activate offline map. "+(e.message||e.toString())),a.app.command("Alert").execute(a.getResource("language-offline-maps-activate-failed"))})}else{if(i.isBusy.get())return;this.app.command("Confirm").execute(this.getResource("language-offline-maps-add-confirm"),i.doc.title,function(e){e&&a._guaranteeOfflineMapContent(i).then(function(e){n.OfflineMapsModule._execCommandFromConfig(a.app,a.configuration.download,{offlineMap:e})},function(e){a.app.trace.error("Failed to download offline map. "+(e.message||e.toString())),a.app.command("Alert").execute(e.message||e.toString())})})}},i.prototype.handleOfflineMapForgetClick=function(e,t,i){var a=this;!i.isDownloaded.get()||i.isActive.get()||i.isBusy.get()||this.app.command("Confirm").execute(this.getResource("language-offline-maps-delete-from-device-confirm"),i.doc.title,function(e){e&&(i.isBusy.set(!0),a.app.offlineManager.removeOfflineMap(i.doc).then(function(){i.isBusy.set(!1),a._calculateIsBusy()},function(e){i.isBusy.set(!1),a.app.command("Alert").execute(e.message||e.toString()),a._calculateIsBusy()}))})},i.prototype.handleOfflineMapSyncClick=function(e,t,i){var a=this;i.isDownloaded.get()&&!i.isBusy.get()&&this.app.site.documentStore.getById(i.doc.id,!0).then(function(e){return e},function(e){return a.app.trace.warning("Error fetching existing offline map: "+e),i.doc}).then(function(e){n.OfflineMapsModule._execCommandFromConfig(a.app,a.configuration.sync,{offlineMap:e})})},i.prototype.handleDeactivateOfflineMapClick=function(e,t,i){var a=this;if(!this.isBusy.get()&&this.viewModel.hasActiveOfflineMap.get()){var n=this.app.offlineManager.getActiveOfflineMap();if(n){this.viewModel.offlineManagerOfflineMaps.get().filter(function(e){return e.doc.id===n.id})[0]?(this.isBusy.set(!0),this.app.offlineManager.deactivateOfflineMap(!0).then(function(){a.isBusy.set(!1)},function(e){a.isBusy.set(!1),a.app.command("Alert").execute(e.message||e.toString())})):this.app.trace.error("Can't find view model matching the active offline map.")}}},i.prototype.handleThumbnailLoadError=function(e,t,i){t.src!==this.viewModel.defaultThumbnail&&(t.src=this.viewModel.defaultThumbnail,t.src!==this.viewModel.defaultThumbnail&&(this.viewModel.defaultThumbnail=t.src))},i.prototype.resolveWidget=function(e,i,a){switch(t.prototype.resolveWidget.call(this,e,i,a),e){case"ListOfflineMapsActionsWidget":return this.app.menuRegistry.createMenuWidget(this,i,a)}},i.prototype._guaranteeOfflineMapContent=function(e){return e.doc.content?Promise.resolve(e.doc):this.app.site.documentStore.getById(e.doc.id,!0).then(function(t){return e.update(t),t})},i.prototype._offlineMapsChanged=function(e){for(var t=e.rangeStart;t<=e.rangeEnd;t++){var i=this.viewModel.mergedOfflineMaps.getAt(t);switch(e.type){case"append":case"insert":case"set":this._offlineMapIfBusyBindingTokens[i.doc.id]=i.isBusy.bind(this,this._calculateIsBusy);break;case"remove":case"clear":i.isBusy.unbind(this._offlineMapIfBusyBindingTokens[i.doc.id]),delete this._offlineMapIfBusyBindingTokens[i.doc.id]}}},i.prototype._calculateIsBusy=function(){for(var e=this.viewModel.isBusy.get(),t=0,i=this.viewModel.mergedOfflineMaps.length();!e&&t<i;t++)e=this.viewModel.mergedOfflineMaps.getAt(t).isBusy.get();this.isBusy.set(e)},i}(a.ViewBase);i.ListOfflineMapsView=s})},"Mapping/modules/OfflineMaps/ListOfflineMapsViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/ManageOfflineMapsView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase","./OfflineMapsModule"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(e,i){var a=t.call(this,e,i)||this;return a._isManaging=!1,a.app.event("ViewContainerViewClosedEvent").subscribe(a,a._onViewContainerViewClosedEvent),a}return e(i,t),i.prototype.attach=function(e){t.prototype.attach.call(this,e),e&&(this.isBusy.sync(e.isBusy),e.showManageDoneButton.set(!1!==this.configuration.showDonebutton))},i.prototype.activated=function(){t.prototype.activated.call(this),this.viewModel.activate(),this._isManaging||(this.viewModel.startManaging(),this._isManaging=!0)},i.prototype.handleEditOfflineMapClick=function(e,t,i){var a=this;this.isBusy.get()||(i.doc.content?n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.editOfflineMap,{offlineMap:i.doc}):(this.isBusy.set(!0),this.app.site.documentStore.getById(i.doc.id,!0).then(function(e){i.update(e),n.OfflineMapsModule._execCommandFromConfig(a.app,a.configuration.editOfflineMap,{offlineMap:i.doc}),a.isBusy.set(!1)},function(e){a.app.trace.error("Error fetching offlinemap document. "+(e.message||e));var t=a.getResource("language-offline-maps-fetch-error"),i=a.getResource("language-offline-maps-fetch-error-title");a.app.command("Alert").execute(t,i),a.isBusy.set(!1)})))},i.prototype.handleDeleteOfflineMapClick=function(e,t,i){var a=this;this.isBusy.get()||this.app.command("Confirm").execute(this.getResource("language-offline-maps-delete-from-server").format(i.title.get()),this.getResource("language-offline-maps-delete-from-server-title"),function(e){e&&a.viewModel.deleteOfflineMap(i)})},i.prototype.handleNewOfflineMapClick=function(e,t,i){this.isBusy.get()||n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.newOfflineMap)},i.prototype.handleDoneClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id),this._stopManaging()},i.prototype._onViewContainerViewClosedEvent=function(e){e.viewId===this.id&&this._stopManaging()},i.prototype._stopManaging=function(){this.viewModel.stopManaging(),this._isManaging=!1},i.prototype.handleThumbnailLoadError=function(e,t,i){t.src!==this.viewModel.defaultThumbnail&&(t.src=this.viewModel.defaultThumbnail,t.src!==this.viewModel.defaultThumbnail&&(this.viewModel.defaultThumbnail=t.src))},i.prototype.resolveWidget=function(e,i,a){switch(t.prototype.resolveWidget.call(this,e,i,a),e){case"ManageOfflineMapsActionsWidget":return this.app.menuRegistry.createMenuWidget(this,i,a)}},i}(a.ViewBase);i.ManageOfflineMapsView=s})},"Mapping/modules/OfflineMaps/ManageOfflineMapsViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/ModuleConfig":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/OfflineMapModel":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables","geocortex/infrastructure/FormatUtils"],function(t,i,a,n,s){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var o=function(t){function i(e,i,a){var s=t.call(this,e,i)||this;return s.title=new n.Observable,s.thumbnail=new n.Observable,s.isBusy=new n.Observable(!1),s.isActive=new n.Observable(!1),s.isDownloaded=new n.Observable(!1),s.hasProgress=new n.Observable(!1),s.isOrphaned=new n.Observable(!1),s.canEdit=new n.Observable(!1),s.canChange=new n.Observable(!1),s.numberOfEdits=new n.Observable(0),s.lastSyncTime=new n.Observable(""),s.dataSizeBytes=new n.Observable(0),s.dataSizeDisplayValue=new n.Observable("…"),s.update(a),s.dataSizeDisplayValue.syncTransform(s.dataSizeBytes,function(e){return s._getDisplayBytes(e)}),s}return e(i,t),i.prototype._getDisplayBytes=function(e){var t=e/1024,i=t/1024,a=i/1024;return a>=1?this.getResource("language-offline-maps-size-gb").format(s.formatNumber(a,null,{fractionalDigits:2})):i>=1?this.getResource("language-offline-maps-size-mb").format(s.formatNumber(i,null,{fractionalDigits:1})):this.getResource("language-offline-maps-size-kb").format(s.formatNumber(t,null,{fractionalDigits:0}))},i.prototype.update=function(e){this.doc=e,this.title.set(e.title),this.thumbnail.set(e.thumbnail?e.thumbnail.location:null),this.canEdit.set(e.access.edit),this.canChange.set(e.access.change)},i}(a.ViewModelBase);i.OfflineMapModel=o})},"Mapping/modules/OfflineMaps/OfflineMapsModule":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/application/ModuleBase","geocortex/infrastructure/ArrayUtils"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e._syncNotificationString="SyncNotifications",e._oneWeekSyncNotificationString="OneWeekSyncNotification",e._syncNotificationOfflineString="SyncNotificationsOffline",e}return e(i,t),i.prototype.initialize=function(e){var i=this;t.prototype.initialize.call(this,e),this.app.offlineManager.aoiMask.configure(e.aoiMask),this.app.nativeManager.onNativeInitialized().then(function(){i.app.isNative.get()&&(i.app.event("MapLoadedEvent").subscribe(i,i._handleMapLoadedEvent),i.app.event("SyncInfoRefreshedEvent").subscribe(i,i._syncInfoRefreshedEventHandler))})},i._execCommandsFromConfig=function(e,t,i){var a=this;t&&t.forEach(function(t){return a._execCommandFromConfig(e,t,i)})},i._execCommandFromConfig=function(e,t,a){if(t){var n=t.commandParameter;n&&a&&(n=i._replaceCommandParameterTokens(n,a)),e.command(t.command).execute(n)}},i._replaceCommandParameterTokens=function(e,t){var i,a=this;if("string"==typeof e){i=/{{(.+)}}/.exec(e);return n=t[i[1]]}var n={};for(var s in e)e.hasOwnProperty(s)&&("string"==typeof e[s]&&(i=/{{(.+)}}/.exec(e[s]))&&t.hasOwnProperty(i[1])?n[s]=t[i[1]]:dojo.isArray(e[s])?n[s]=e[s].map(function(e){return a._replaceCommandParameterTokens(e,t)}):"object"==typeof e[s]?n[s]=this._replaceCommandParameterTokens(e[s],t):n[s]=e[s]);return n},i.prototype._checkForInternetAndDisplayNotification=function(){var e=this,t=!1;this.app.offlineManager.hasInternetCheck().then(function(e){t=e.result}),setInterval(function(){e.app.offlineManager.hasInternetCheck().then(function(i){t!=i.result&&((t=i.result)?(e.displayOnlineSyncNotification(),e.app.command("RemoveNotification").execute(e._syncNotificationOfflineString)):(e.displayOfflineSyncNotification(),e.app.command("RemoveNotification").execute(e._syncNotificationString),e.app.command("RemoveNotification").execute(e._oneWeekSyncNotificationString))),e.app.event("NetworkConnectivityChangedEvent").publish(t)})},6e4)},i.prototype._shouldDisplayWeeklyNotification=function(e,t){return this._daysBetween(e,new Date)>6&&this._daysBetween(t,new Date)>6},i.prototype._syncInfoRefreshedEventHandler=function(e){this.displayOnlineSyncNotification()},i.prototype._handleMapLoadedEvent=function(){var e=this;this._checkForInternetAndDisplayNotification(),this.app.offlineManager.hasInternetCheck().then(function(t){t?e.displayOnlineSyncNotification():e.displayOfflineSyncNotification()})},i.prototype.displayOfflineSyncNotification=function(){var e=this,t=this.app.offlineManager.getOfflineMapsWithState();if(t){var i=0;t.forEach(function(t,a){t.syncInfoPromise.then(function(t){var a=n.ArrayUtils.sum(t.servers,function(e){return e.numberOfAdds+e.numberOfDeletes+e.numberOfEdits});if((i+=a)>0){var s=e.getResource("language-offline-maps-unsynced-edits-offline").format(i);1==i&&(s=e.getResource("language-offline-maps-unsynced-edit-offline"));var o={id:e._syncNotificationOfflineString,text:s,iconProperties:{uri:"Resources/Images/Icons/toolbar/sync-24.png",altText:"Sync Button"},closeButton:{}};e.app.command("DisplayNotification").execute(o)}})})}},i.prototype.displayOnlineSyncNotification=function(){var e=this;this.app.offlineManager.hasInternetCheck().then(function(t){if(t.result){var i=e.app.offlineManager.getOfflineMapsWithState();if(i){e.app.command("RemoveNotification").execute(e._oneWeekSyncNotificationString);var a=[],s=0,o=new Date,l=new Date;i.forEach(function(t,i){t.syncInfoPromise.then(function(i){var r=n.ArrayUtils.sum(i.servers,function(e){return e.numberOfAdds+e.numberOfDeletes+e.numberOfEdits}),p=!1;r>0&&(a.push(t.offlineMap),p=!0),s+=r;var c=i.getOldestSyncTime();if(!p&&e._daysBetween(c,new Date)&&a.push(t.offlineMap),o>c&&(o=c),l>i.lastSyncNotificationDate&&(l=i.lastSyncNotificationDate),s>0){var d=e.getResource("language-offline-maps-unsynced-edits").format(s);1==s&&(d=e.getResource("language-offline-maps-unsynced-edit"));var f={id:e._syncNotificationString,text:d,iconProperties:{uri:"Resources/Images/Icons/toolbar/sync-24.png",altText:"Sync Button"},buttons:[{text:e.getResource("language-offline-maps-sync-now-button"),callback:function(){e.app.command("StartOfflineFeatureSync").execute({offlineMaps:a})}}]};e.app.command("DisplayNotification").execute(f)}else if(e.app.command("RemoveNotification").execute(e._syncNotificationString),e._shouldDisplayWeeklyNotification(o,l)){f={id:e._oneWeekSyncNotificationString,text:e.getResource("language-offline-maps-not-synced-in-one-week").format(e._daysBetween(o,new Date)),iconProperties:{uri:"Resources/Images/Icons/toolbar/sync-24.png",altText:"Sync Button"},buttons:[{text:e.getResource("language-offline-maps-sync-now-button"),callback:function(){e.app.command("StartOfflineFeatureSync").execute({offlineMaps:a})}}],closeButton:{callback:function(){e.app.nativeManager.message("SaveSyncJsonData",{localServerNamespace:e.app.localServerNamespace,lastSyncNotificationDate:new Date})}}};e.app.command("DisplayNotification").execute(f)}})})}else e.app.command("RemoveNotification").execute(e._syncNotificationString)}else e.app.command("RemoveNotification").execute(e._syncNotificationString),e.app.command("RemoveNotification").execute(e._oneWeekSyncNotificationString)})},i.prototype._daysBetween=function(e,t){var i=e.getTime(),a=t.getTime()-i;return Math.floor(a/864e5)},i}(a.ModuleBase);i.OfflineMapsModule=s})},"Mapping/modules/OfflineMaps/OfflineMapsViewModel":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables","./OfflineMapModel","geocortex/infrastructure/offline/OfflineMap","geocortex/infrastructure/ArrayUtils","geocortex/infrastructure/FormatUtils"],function(t,i,a,n,s,o,l,r){"use strict";function p(e,t){return(e.doc.title||"").toLocaleLowerCase().localeCompare((t.doc.title||"").toLocaleLowerCase())}Object.defineProperty(i,"__esModule",{value:!0});var c=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e.docstoreOfflineMaps=new n.ObservableCollection,e.offlineManagerOfflineMaps=new n.ObservableCollection,e.mergedOfflineMaps=new n.ObservableCollection,e.canCreate=new n.Observable(!1),e.hasActiveOfflineMap=new n.Observable(!1),e.showManageDoneButton=new n.Observable(!0),e.switchedToOnlineMap=new n.Observable(!1),e.isBusy=new n.Observable(!1),e.statusFetching=new n.Observable(!1),e.statusEmpty=new n.Observable(!1),e.statusOffline=new n.Observable(!1),e.statusUnsupported=new n.Observable(!1),e.statusNative=new n.Observable(!1),e._activated=!1,e._populated=!1,e._queryPageSize=20,e}return e(i,t),i.prototype.initialize=function(e){var i=this;t.prototype.initialize.call(this,e),this.defaultThumbnail=e.defaultThumbnail,this.mergedOfflineMaps.bind(this,function(){i.statusEmpty.set(0===i.mergedOfflineMaps.length())}),this.app.nativeManager.onNativeInitialized().then(function(){i.statusNative.set(!0)}),this.app.waitUntilSiteInitialized().then(function(){return i.app.site.documentStore.onInitialized()}).then(function(){return i.canCreate.set(i.app.site.documentStore.canCreate())}),this._downloadedOfflineMapsLoaded({offlineMaps:this.app.offlineManager.getOfflineMaps(),activeOfflineMap:this.app.offlineManager.getActiveOfflineMap(),offlineMapStates:this.app.offlineManager.getOfflineMapsWithState().map(function(e){return e.state})}),this.app.command("RefreshOfflineMapsList").register(this,this.populateFromDocStore),this.app.event("OfflineMapsLoadedEvent").subscribe(this,this._downloadedOfflineMapsLoaded),this.app.event("OfflineMapAddedEvent").subscribe(this,this._downloadedOfflineMapAdded),this.app.event("OfflineMapRemovedEvent").subscribe(this,this._refreshOfflineMapStatus),this.app.event("OfflineMapPartialDataRemovedEvent").subscribe(this,this._refreshOfflineMapStatus),this.app.event("OfflineMapSyncedEvent").subscribe(this,this._downloadedOfflineMapSynced),this.app.event("OfflineMapSyncErrorEvent").subscribe(this,this._downloadedOfflineMapSyncError),this.app.event("OfflineMapActivatedEvent").subscribe(this,this._offlineMapActivated),this.app.event("SyncInfoRefreshedEvent").subscribe(this,this._onSyncInfoRefreshed),this.app.event("NetworkConnectivityChangedEvent").subscribe(this,this._onNetworkConnectivityChangedEvent),e.saveOfflineMaps&&this.app.event("OfflineMapEditorFinishedEvent").subscribe(this,this._onOfflineMapEditorFinishedEvent),e.menus&&this.app.menuRegistry&&this.app.menuRegistry.loadMenus({menus:e.menus})},i.prototype.activate=function(){var e=this;this._activated||(this._activated=!0,this.app.waitUntilSiteInitialized().finally(function(){e.statusUnsupported.set(!e.app.site.documentStore.supported),e.populateFromDocStore()}))},i.prototype.startManaging=function(){this.app.nativeManager.nativeInitialized&&(this._offlineMapWhenManagingStarted=this.app.offlineManager.getActiveOfflineMap(),this._offlineMapWhenManagingStarted&&this.app.offlineManager.deactivateOfflineMap(!1),this.switchedToOnlineMap.set(!!this._offlineMapWhenManagingStarted))},i.prototype.stopManaging=function(){this.app.nativeManager.nativeInitialized&&this._offlineMapWhenManagingStarted&&this.app.offlineManager.activateOfflineMap(this._offlineMapWhenManagingStarted,!1)},i.prototype.populateFromDocStore=function(){var e=this;if(this.app.site.documentStore.supported&&this._activated){this.isBusy.set(!0),this.statusFetching.set(!0);var t={filters:{require:[{field:"fileType",method:"values",range:[{string:"offlinemap"}]},{field:"properties.siteId.string",method:"values",range:[{string:this.app.site.id}]}]},limit:this._queryPageSize};this._queryDocStore(t,0,[]).then(function(t){e._populated=!0,e.statusOffline.set(!1),e.docstoreOfflineMaps.set(t)}).catch(function(t){e.statusOffline.set(!0),e.app.trace.error("Unable to fetch offline maps. "+t)}).then(function(){e.statusFetching.set(!1),e.updateMergedOfflineMaps()}).catch(function(t){e.app.trace.error("Unable to update metadata for offline maps. "+t)}).finally(function(){e.isBusy.set(!1)})}},i.prototype._queryDocStore=function(e,t,i){var a=this;return e.start=t,this.app.waitUntilSiteInitialized().then(function(){return a.app.site.principal.isAuthenticated?Promise.resolve():a.app.site.refreshPrincipal()}).then(function(){return a.app.site.documentStore.query(e)}).then(function(n){var o=n.results.map(function(e){return new s.OfflineMapModel(a.app,a.libraryId,e.entity)});return o.length>0&&(i=i.concat(o)),o.length==e.limit?a._queryDocStore(e,t+e.limit,i):Promise.resolve(i.sort(p))})},i.prototype.deleteOfflineMap=function(e){var t=this;this.app.site.documentStore.supported&&(this.isBusy.set(!0),this.app.site.documentStore.deleteById(e.doc.id).then(function(){t.isBusy.set(!1),t.docstoreOfflineMaps.removeItem(e),t.updateMergedOfflineMaps()},function(i){if(t.isBusy.set(!1),i.error&&404===i.error.code)return t.docstoreOfflineMaps.removeItem(e),void t.updateMergedOfflineMaps();var a=i.message||i.error&&i.error.message||i.toString();t.app.command("Alert").execute(a,t.getResource("language-offline-maps-delete-from-server-title"))}))},i.prototype.updateOfflineManagerOfflineMaps=function(){var e=this,t=this.app.offlineManager.getOfflineMapsWithState().map(function(t){var i=new s.OfflineMapModel(e.app,e.libraryId,t.offlineMap);return i.isDownloaded.set(t.state.isDownloaded),i.hasProgress.set(t.state.hasProgress),i});return this.offlineManagerOfflineMaps.set(t),this.offlineManagerOfflineMaps},i.prototype.updateMergedOfflineMaps=function(){for(var e=this.app.offlineManager.getActiveOfflineMap(),t=this._calculateMergedOfflineMaps(),i=0;i<t.length;i++){var a=t[i];this._updateMetadataForOfflineMap(a),e&&a.doc.id===e.id&&a.isActive.set(!0)}this.mergedOfflineMaps.set(t)},i.prototype._calculateMergedOfflineMaps=function(){var e=this,t=this.updateOfflineManagerOfflineMaps().get(),i=this.docstoreOfflineMaps.get();this._populated&&t.forEach(function(t){var a=e.app.site.documentStore.isInitialized&&e.app.site.documentStore.userMonikers.some(function(e){return t.doc.access&&t.doc.access.monikerIds&&-1!==t.doc.access.monikerIds.indexOf(e.id)})&&!i.some(function(e){return e.doc.id===t.doc.id});t.isOrphaned.set(a)}),i=i.filter(function(e){return!t.some(function(t){return t.doc.id===e.doc.id})});return t.concat(i).sort(p)},i.prototype._downloadedOfflineMapsLoaded=function(e){this.updateMergedOfflineMaps(),this._offlineMapActivated({offlineMap:e.activeOfflineMap})},i.prototype._downloadedOfflineMapAdded=function(e){this.updateMergedOfflineMaps()},i.prototype._refreshOfflineMapStatus=function(e){this.updateMergedOfflineMaps()},i.prototype._offlineMapActivated=function(e){this.hasActiveOfflineMap.set(!!e.offlineMap);for(var t=0,i=this.offlineManagerOfflineMaps.length();t<i;t++){var a=this.offlineManagerOfflineMaps.getAt(t);a.isActive.set(null!=e.offlineMap&&e.offlineMap.id===a.doc.id)}},i.prototype._downloadedOfflineMapSynced=function(e){for(var t=0,i=this.offlineManagerOfflineMaps.length();t<i;t++){var a=this.offlineManagerOfflineMaps.getAt(t);if(a.doc.id===e.offlineMap.id)return a.update(e.offlineMap),void this._updateMetadataForOfflineMap(e.offlineMap)}},i.prototype._downloadedOfflineMapSyncError=function(e){this._updateMetadataForOfflineMap(e.offlineMap)},i.prototype._refreshActiveMapState=function(){if(this.hasActiveOfflineMap.get()){this._getActiveMap().isActive.set(!0)}},i.prototype._getActiveMap=function(){if(this.hasActiveOfflineMap.get())for(var e=this.app.offlineManager.getActiveOfflineMap().id,t=0;t<this.mergedOfflineMaps.length();t++){var i=this.mergedOfflineMaps.getAt(t);if(i.doc.id===e)return i}},i.prototype._onSyncInfoRefreshed=function(e){this._updateMetadataForOfflineMap(e.offlineMap)},i.prototype._onNetworkConnectivityChangedEvent=function(e){this.populateFromDocStore()},i.prototype._updateMetadataForOfflineMap=function(e){var t=this;if(!this.app.nativeManager.nativeInitialized)return Promise.resolve();var i=e instanceof s.OfflineMapModel?e:this.mergedOfflineMaps.get().filter(function(t){return t.doc.id===e.id})[0];if(!i)return Promise.reject("Offline map not downloaded.");var a=[];i.dataSizeBytes.set(0);var n=0,p=i.lastSyncTime.get(),c=null,d=this.app.offlineManager.getOfflineMapWithStateById(i.doc.id);return d&&a.push(d.syncInfoPromise.then(function(e){n=l.ArrayUtils.sum(e.servers,function(e){return e.numberOfAdds+e.numberOfDeletes+e.numberOfEdits}),p=r.formatDate(l.ArrayUtils.max(e.servers,function(e){return e.lastSyncTime})),c=i.dataSizeBytes.get()+l.ArrayUtils.sum(e.servers,function(e){return e.totalSizeInBytes})}).finally(function(){i.numberOfEdits.set(n),i.lastSyncTime.set(p),i.dataSizeBytes.set(c)})),i.doc.content&&i.doc.content.basemaps.filter(function(e){return e.sourceType===o.OfflineMapBasemap.Type.EXPORT_TILES}).forEach(function(e){a.push(t.app.nativeManager.getViewerResourceInfo(e.filename).then(function(e){"number"==typeof e.length&&i.dataSizeBytes.set(i.dataSizeBytes.get()+e.length)}))}),i.hasProgress.set(!!d&&d.state.hasProgress),Promise.all(a)},i.prototype._onOfflineMapEditorFinishedEvent=function(e){var t=this;if(this.app.site.documentStore.supported&&!e.canceled)if(e.newOfflineMap.contentType="application/json",e.newOfflineMap.fileType="offlinemap",e.existingOfflineMap){e.newOfflineMap.id=e.existingOfflineMap.id;var i=o.OfflineMap.diff(e.existingOfflineMap,e.newOfflineMap);if(!i)return void this.app.trace.warning("OfflineMapEditorFinishedEvent called without any changes to send.  Bailing.");i.content&&(i.content=e.newOfflineMap.content),this.isBusy.set(!0),this.app.site.documentStore.updateById(e.existingOfflineMap.id,i).then(function(e){t.isBusy.set(!1);for(var i=0;i<t.docstoreOfflineMaps.length();i++)if(t.docstoreOfflineMaps.getAt(i).doc.id===e.id){t.docstoreOfflineMaps.getAt(i).update(e);break}},function(e){t.isBusy.set(!1),t.app.trace.error("Error updating offline map in doc store. "+(e.message||e));var i=t.getResource("language-offline-maps-update-profile-error").format(e.message||e),a=t.getResource("language-offline-maps-update-profile-error-title");t.app.command("Alert").execute(i,a)})}else this.isBusy.set(!0),this.app.site.documentStore.add(e.newOfflineMap).then(function(e){t.isBusy.set(!1);var i=new s.OfflineMapModel(t.app,t.libraryId,e),a=t.docstoreOfflineMaps.get().concat([i]).sort(p);t.docstoreOfflineMaps.set(a),t.updateMergedOfflineMaps()},function(e){t.isBusy.set(!1),t.app.trace.error("Error adding offline map to doc store. "+(e.message||e));var i=t.getResource("language-offline-maps-add-error").format(e.message||e),a=t.getResource("language-offline-maps-add-error-title");t.app.command("Alert").execute(i,a)})},i}(a.ViewModelBase);i.OfflineMapsViewModel=c})},"Mapping/modules/OfflineMaps/OfflineMapsViewModelConfiguration":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/Editor/MapState":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.appInfo=e,this.extent=e.map.extent,this.layers={},e.mapInfo.getLayerInfos().forEach(function(e){t.layers[e.uniqueId]={visible:e.isVisible(),definitionExpression:e.getDefinitionExpression()}})}return e.prototype.restore=function(){var e=this;this.appInfo.map.setExtent(this.extent),this.appInfo.mapInfo.getLayerInfos().forEach(function(t){if(e.layers.hasOwnProperty(t.uniqueId))try{t.setEsriLayerVisibility(e.layers[t.uniqueId].visible),t.setDefinitionExpression(e.layers[t.uniqueId].definitionExpression)}catch(e){}})},e}();t.MapState=i})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorBasemap":function(){define(["require","exports","geocortex/framework/observables","geocortex/infrastructure/offline/OfflineMap","geocortex/essentials/MapServiceConstants","geocortex/infrastructure/ExportTilesUtils","geocortex/framework/utils/utils","geocortex/infrastructure/offline/BasemapDownloading"],function(e,t,i,a,n,s,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t,s,o){var l=this;this.app=t,this.libraryId=s,this.source=o,this.type=new i.Observable(null),this.isNone=new i.Observable(!0),this.isStatic=new i.Observable(!1),this.isExportTiles=new i.Observable(!1),this.isValid=new i.Observable(!0),this.geometry=new i.Observable(null),this.supportsStatic=new i.Observable(!1),this.supportsExportTiles=new i.Observable(!1),this.supportsAny=new i.Observable(!1),this.staticTpks=new i.ObservableCollection([]),this.staticTpk=new i.Observable(null),this.exportTilesMinLevel=new i.Observable(0),this.exportTilesMaxLevel=new i.Observable(22),this.exportTilesMapServiceMinLevel=new i.Observable(0),this.exportTilesMapServiceMaxLevel=new i.Observable(22),this.exportTilesRefreshInterval=new i.Observable(0),this.filename=new i.Observable(""),this.displayName=new i.Observable(""),this.iconUri=new i.Observable(""),this.size=new i.Observable(e.sizeUnknown),this.sizePresentable=new i.Observable(""),this.errorConfigurationMessage=new i.Observable(null),this.errorExportTilesMessage=new i.Observable(null),this._hasTiledMapService=!1,this._staticTpksSet=!1,this._exportFileName=null,this._calculateSizeGen=1,this.displayName.set(o.displayName),this.iconUri.set(o.iconUri),this.type.bind(this,function(e){l.isNone.set("none"===e),l.isStatic.set(e===a.OfflineMapBasemap.Type.PREGENERATED),l.isExportTiles.set(e===a.OfflineMapBasemap.Type.EXPORT_TILES),l._calculateSize(),l._calculateFileName()}),this.staticTpks.bind(this,function(){l._staticTpksSet=!0;var e=l.staticTpks.isEmpty();l.supportsStatic.set(l._hasTiledMapService&&!e),l.staticTpk.get()||e||l.staticTpk.set(l.staticTpks.getAt(0))}),this.staticTpk.bind(this,function(){l._calculateSize(),l._calculateFileName()}),this.supportsExportTiles.bind(this,function(){return l.supportsAny.set(l.supportsExportTiles.get()||l.supportsStatic.get())}),this.supportsStatic.bind(this,function(){return l.supportsAny.set(l.supportsExportTiles.get()||l.supportsStatic.get())}),this.exportTilesMinLevel.bind(this,function(){return l._calculateSize()}),this.exportTilesMaxLevel.bind(this,function(){return l._calculateSize()}),this.exportTilesMapServiceMinLevel.bind(this,function(e){l.exportTilesMinLevel.get()<e&&l.exportTilesMinLevel.set(e),l.exportTilesMaxLevel.get()<e&&l.exportTilesMaxLevel.set(e)}),this.exportTilesMapServiceMaxLevel.bind(this,function(e){l.exportTilesMinLevel.get()>e&&l.exportTilesMinLevel.set(e),l.exportTilesMaxLevel.get()>e&&l.exportTilesMaxLevel.set(e)}),this.geometry.bind(this,function(){return l._calculateSize()}),this.size.bind(this,function(){return l._calculateIsValid()}),this.sizePresentable.syncTransform(this.size,function(e){return l._formatBytes(e)}),this._hasTiledMapService=o.services.filter(function(e){return e.mapService.mapServiceType===n.MapServiceType.TILED}).length>0,this._hasTiledMapService?this._calculateExportTilesMapServiceUri():(this.supportsStatic.set(!1),this.supportsExportTiles.set(!1),this.errorConfigurationMessage.set(this.getResource("language-offlinemapeditor-basemaps-notiled")))}return e.prototype.load=function(e){var t=this;switch(this.type.set(e.sourceType),this.filename.set(e.filename),this._exportFileName=null,e.sourceType){case a.OfflineMapBasemap.Type.PREGENERATED:this._staticTpksSet?this._setStaticTpkByUrl(e.url):this.staticTpks.once(this,function(){t._setStaticTpkByUrl(e.url)});break;case a.OfflineMapBasemap.Type.EXPORT_TILES:this.exportTilesMinLevel.set(Math.max(e.minLevel,this.app.map.getMinZoom())),this.exportTilesMaxLevel.set(Math.min(e.maxLevel,this.app.map.getMaxZoom())),this.exportTilesRefreshInterval.set(this._sanitizeRefreshInterval(e.refreshInterval)),this._exportFileName=e.filename;break;default:throw new Error("Unknown sourceType.")}},e.prototype.save=function(){switch(this.type.get()){case"none":throw new Error("This OfflineMapBasemap is set to none and not savable.");case a.OfflineMapBasemap.Type.PREGENERATED:return{baseMapId:this.source.id,sourceType:this.type.get(),url:this.staticTpk.get()?this.staticTpk.get().url:null,filename:this.filename.get(),size:Math.max(this.size.get(),0)};case a.OfflineMapBasemap.Type.EXPORT_TILES:return{baseMapId:this.source.id,sourceType:this.type.get(),url:this._exportTilesMapServiceUri,filename:this.filename.get(),minLevel:this.exportTilesMinLevel.get(),maxLevel:this.exportTilesMaxLevel.get(),size:Math.max(this.size.get(),0),refreshInterval:this._sanitizeRefreshInterval(this.exportTilesRefreshInterval.get())};default:throw new Error("Unknown sourceType.")}},e.prototype.reset=function(){this.type.set("none"),this.staticTpks.isEmpty()||this.staticTpk.set(this.staticTpks.getAt(0)),this.exportTilesMinLevel.set(Math.max(this.exportTilesMapServiceMinLevel.get(),this.app.map.getMinZoom())),this.exportTilesMaxLevel.set(Math.min(this.exportTilesMapServiceMaxLevel.get(),this.app.map.getMaxZoom())),this.exportTilesRefreshInterval.set(0),this._exportFileName=null},e.prototype._calculateExportTilesMapServiceUri=function(){var e=this;if(this.errorConfigurationMessage.set(null),this.source.exportTilesMapServiceUri)this._getExportTilesMapServiceInfo(this.source.exportTilesMapServiceUri).then(function(t){return e._enableExportTilesSupport(e.source.exportTilesMapServiceUri,t)},function(t){e.app.trace.warning("Unable to use configured Map Service '"+e.source.exportTilesMapServiceUri+"' to create the Custom Offline Basemap. "+(t.message||t)),t.message&&/No token available for service /.test(t.message)?e.errorConfigurationMessage.set(e.getResource("language-offlinemapeditor-basemaps-exporttiles-error-agollogin")):t.error&&499==t.error.code?e.errorConfigurationMessage.set(e.getResource("language-offlinemapeditor-basemaps-exporttiles-error-auth")):e.errorConfigurationMessage.set(e.getResource("language-offlinemapeditor-basemaps-exporttiles-error-misconfigured")),e._exportTilesMapServiceUri=null,e.supportsExportTiles.set(!1)});else{var t=this.source.services.map(function(e){return e.mapService.serviceUrl}).filter(function(e){return!!e}),i=t.map(function(t){return e._getExportTilesMapServiceInfo(t)}),a=function(n){n>=i.length?(e._exportTilesMapServiceUri=null,e.supportsExportTiles.set(!1)):i[n].then(function(i){return e._enableExportTilesSupport(t[n],i)},function(){return a(n+1)})};a(0)}},e.prototype._getExportTilesMapServiceInfo=function(e){var t=l.getServiceTokenForMapService(this.app,e);return esri.request({callbackParamName:"callback",content:t?{f:"json",token:t}:{f:"json"},handleAs:"json",url:e}).then(function(e){if(!e.currentVersion||!e.tileInfo)throw new Error("Not a map service.");if(e.currentVersion<10.2)throw new Error("Version not supported.");if(!e.exportTilesAllowed)throw new Error("Export tiles not supported.");return e})},e.prototype._enableExportTilesSupport=function(e,t){var i=t.tileInfo;this._exportTilesMapServiceUri=e,this.exportTilesMapServiceMinLevel.set(i.lods[0].level),this.exportTilesMapServiceMaxLevel.set(i.lods[i.lods.length-1].level),this.supportsExportTiles.set(this._hasTiledMapService)},e.prototype._setStaticTpkByUrl=function(e){var t,i=this.staticTpks.length();for(t=0;t<i&&this.staticTpks.getAt(t).url!==e;t++);t===i&&(t=0),this.staticTpk.set(this.staticTpks.getAt(t))},e.prototype._calculateSize=function(){var t=this;this._calculateSizeHandle&&clearTimeout(this._calculateSizeHandle),this.errorExportTilesMessage.set(null);var i=e.sizeUnknown,a=++this._calculateSizeGen;this.isExportTiles.get()?(i=e.sizeCalculating,this._calculateSizeHandle=setTimeout(function(){if(a===t._calculateSizeGen){var i=t.geometry.get();if(i){var n=t.exportTilesMinLevel.get(),o=t.exportTilesMaxLevel.get(),r=n!==o?n+"-"+o:""+n,p=l.getServiceTokenForMapService(t.app,t._exportTilesMapServiceUri);s.estimateExportTilesSize(t._exportTilesMapServiceUri,{tilePackage:!0,optimizeTilesForSize:!0,compressionQuality:90,exportBy:"levelId",levels:r,areaOfInterest:JSON.stringify({features:[{geometry:i.toJson()}]}),token:p}).then(function(i){a===t._calculateSizeGen&&(i&&"number"==typeof i.totalSize?t.size.set(i.totalSize):(t.app.trace.error('ExportTilesUtils.estimateExportTilesSize returned unexpected result. "'+JSON.stringify(i)+'"'),t.size.set(e.sizeUnknown)))},function(i){if(a===t._calculateSizeGen){var n=i&&i.message?i.message:i;t.errorExportTilesMessage.set(n),t.app.trace.error("Error fetching TPK size: "+n),t.size.set(e.sizeInvalid)}})}else t.size.set(e.sizeUnknown)}},2e3)):this.isStatic.get()&&this.staticTpk.get()&&(i=this.staticTpk.get().size),this.size.set(i)},e.prototype._calculateFileName=function(){var e=null;if(this.isStatic.get()){var t=this.staticTpk.get();e=t?t.filename:null}else if(this.isExportTiles.get()){if(!this._exportFileName){var i=/([^\/]+)\/MapServer\/?/.exec(this._exportTilesMapServiceUri);this._exportFileName=encodeURIComponent(i?i[1]:this.source.id)+"-"+o.alphaNumericToken(12)+".tpk"}e=this._exportFileName}this.filename.set(e)},e.prototype._calculateIsValid=function(){var e=!1;this.isNone.get()?e=!0:this.isStatic.get()?e=!0:this.isExportTiles.get()&&(e=this.size.get()>=0),this.isValid.set(e)},e.prototype._formatBytes=function(e){if(-3===e)return this.app.getResource(this.libraryId,"language-offlinemapeditor-basemaps-size-invalid");if(-2===e)return this.app.getResource(this.libraryId,"language-offlinemapeditor-basemaps-size-calculating");if(-1===e)return this.app.getResource(this.libraryId,"language-offlinemapeditor-basemaps-size-unknown");if(0===e)return"0";var t;for(t=0;e>1e3;t++)e/=1e3;return e.toFixed(t>0?2:0)+" "+["B","KB","MB","GB","TB","PB"][t]},e.prototype._sanitizeRefreshInterval=function(e){var t=parseInt(e);return isNaN(t)&&(t=0),t<0&&(t=0),t},e.prototype.getResource=function(e){return this.app.getResource(this.libraryId,e)},e}();r.sizeUnknown=-1,r.sizeCalculating=-2,r.sizeInvalid=-3,t.OfflineMapEditorBasemap=r})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase","./../OfflineMapsModule"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(e,i){var a=t.call(this,e,i)||this;return a.app.command("ShowOfflineMapEditor").register(a,a._onShowOfflineMapEditor),a.app.event("ViewContainerViewClosedEvent").subscribe(a,a._onViewContainerViewClosedEvent),a}return e(i,t),i.prototype._onShowOfflineMapEditor=function(e){this._setTitle(!!e.existingOfflineMap),this.viewModel.startEditing(e),this.app.command("ActivateView").execute(this.id)},i.prototype.activated=function(){t.prototype.activated.call(this),this.viewModel.calculateIsValid()},i.prototype.handleCancelClick=function(e,t,i){this.viewModel.finishEditing(!0),this.app.command("DeactivateView").execute(this.id)},i.prototype.handleDoneClick=function(e,t,i){var a=this;this.isBusy.set(!0),this.viewModel.finishEditing().then(function(){a.isBusy.set(!1),a.app.command("DeactivateView").execute(a.id)})},i.prototype.handleLayersClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showLayersEditor)},i.prototype.handleGeometryClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showGeometryEditor)},i.prototype.handleBasemapsClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showBasemapsEditor)},i.prototype.handleSharingClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showSharingEditor)},i.prototype._setTitle=function(e){if(this.configuration.title){var t=e?this.configuration.title.forExisting:this.configuration.title.forNew;t&&(t.startsWith("@")&&(this.configuration.title.libraryId,t=this.app.getResource(this.configuration.title.libraryId?this.configuration.title.libraryId:this.libraryId,t)),this.title.set(t))}},i.prototype._onViewContainerViewClosedEvent=function(e){e.viewId===this.id&&this.viewModel.finishEditing(!0)},i}(a.ViewBase);i.OfflineMapEditorView=s})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewModel":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/events/Event","geocortex/infrastructure/offline/OfflineMap","geocortex/framework/observables","./MapState","./Layers/LayerSelectorViewModel","./OfflineMapEditorBasemap","geocortex/infrastructure/documents/GrantEditorViewModel","geocortex/essentials/GeometryUtilities","geocortex/infrastructure/gis/AppInfo","./../OfflineMapsModule","geocortex/essentials/ReportParameters","geocortex/essentials/documents/DocumentConstants"],function(t,i,a,n,s,o,l,r,p,c,d,f,u,g,m){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var h=function(t){function i(e,i){var a=t.call(this,e,i)||this;return a.savingEvent=new n.Event("OfflineMapEditorViewModelSaving"),a.isEditing=new o.Observable(!1),a.loadError=new o.Observable(null),a.canChange=new o.Observable(!1),a.name=new o.Observable(""),a.thumbnail=new o.Observable(""),a.basemaps=new o.ObservableCollection([]),a.geometry=new o.Observable(null),a.includeAttachments=new o.Observable(!0),a.layersChanged=new o.Observable(!1),a.geometryChanged=new o.Observable(!1),a.basemapsChanged=new o.Observable(!1),a.layersText=new o.Observable(""),a.basemapsText=new o.Observable(""),a.hasBasemaps=new o.Observable(!1),a.hasSharing=new o.Observable(!1),a.isLayersValid=new o.Observable(!1),a.isGeometryValid=new o.Observable(!1),a.isBasemapsValid=new o.Observable(!1),a.isBasemapsCalculating=new o.Observable(!1),a.isValid=new o.Observable(!1),a.layerSelectorViewModel=new r.LayerSelectorViewModel(e,i),a.layerSelectorViewModel.onEnabledItemsChanged=function(){return a.layersChanged.set(!0)},a.layerSelectorViewModel.onAllLayersEnabled=function(){return a.includeAttachments.set(!0)},a.layerSelectorViewModel.onAllLayersDisabled=function(){return a.includeAttachments.set(!1)},a.layerSelectorViewModel.initialize({}),a.layerSelectorViewModel.geometry.sync(a.geometry),a.grantEditorViewModel=new c.GrantEditorViewModel(e,"Mapping.Infrastructure"),a.grantEditorViewModel.enabled.sync(a.canChange),a.name.bind(a,a.calculateIsValid),a.geometry.bind(a,function(){return a.geometryChanged.set(!0)}),a.app.command("SetOfflineMapEditorGeometry").register(a,function(e){e&&"extent"===e.type&&(e=d.envelopeToPolygon(e)),e&&"polygon"!==e.type?a.app.trace.error("SetOfflineMapEditorGeometry does not support geometry type '"+e.type+"'."):a.geometry.set(e)}),a}return e(i,t),i.prototype.initialize=function(e){this.config=e,t.prototype.initialize.call(this,e),e.tools&&this.app.toolRegistry&&this.app.toolRegistry.createTools(e.tools,!0),e.menus&&this.app.menuRegistry&&this.app.menuRegistry.loadMenus({menus:e.menus})},i.prototype.startEditing=function(e){if(!this.app.site.isInitialized)throw new Error("Can't start editing before the site is initialized.");this.isEditing.get()&&this.finishEditing(!0),this.basemaps.isEmpty()&&this.app.site.essentialsMap.baseMaps.length>0&&this._initBasemaps(),this.isEditing.set(!0),this.loadError.set(null),this.initialMapState=new l.MapState(f.AppInfo.fromGeocortexApp(this.app)),this.existingOfflineMap=e.existingOfflineMap,e.existingOfflineMap&&this._loadExistingOfflineMapDoc(e.existingOfflineMap)||this._reset(),u.OfflineMapsModule._execCommandsFromConfig(this.app,this.config.onEditingStarted)},i.prototype._initBasemaps=function(){var e=this,t=this.app.site.essentialsMap.baseMaps.map(function(t){var i=new p.OfflineMapEditorBasemap(e.app,e.libraryId,t);return i.geometry.sync(e.geometry),i.isValid.bind(e,e.calculateIsValid),i.type.bind(e,function(){return e.basemapsChanged.set(!0)}),i});this.basemaps.set(t),this.app.site.getOfflineBasemaps(function(e){t.forEach(function(t){return t.staticTpks.set(e)})},function(t){e.app.trace.error("Unable to fetch offline basemaps: "+t)})},i.prototype._loadExistingOfflineMapDoc=function(e){var t=this;try{return this.name.set(e.title),this.thumbnail.set(e.thumbnail?e.thumbnail.location:null),this.geometry.set(new esri.geometry.Polygon(e.content.geometry)),this.includeAttachments.set(e.content.includeAttachments),this.canChange.set(e.access.change),this.app.map.setExtent(this.geometry.get().getExtent()),this.layerSelectorViewModel.getAllItems().filter(function(e){return!e.isFolder}).forEach(function(i){var a=e.content.layers.filter(function(e){return t.layerSelectorViewModel.filter(i)&&e.layerInfoUniqueId===i.layer.uniqueId});if(a.length>0){var n=a[0];i.definitionExpression.set(n?n.definitionExpression:null),i.isEnabled.set(!0)}else i.definitionExpression.set(null),i.isEnabled.set(!1)}),this.layerSelectorViewModel.setVisibleLayersFromSelectedItems(),this.basemaps.get().forEach(function(t){var i=e.content.basemaps.filter(function(e){return e.baseMapId===t.source.id});i.length>0?t.load(i[0]):t.reset()}),this.grantEditorViewModel.loadById(e.id),this.layersChanged.set(!0),this.geometryChanged.set(!0),this.basemapsChanged.set(!0),!0}catch(e){return this.app.trace.error("Unable to load existing offline map.  "+(e.message||e)),this.loadError.set(this.getResource("language-offlinemapeditor-error-load").format(e.message||e)),!1}},i.prototype._reset=function(){this.canChange.set(!0),this.name.set(""),this.thumbnail.set(""),this.geometry.set(esri.geometry.Polygon.fromExtent(this.app.map.extent)),this.includeAttachments.set(!0),this.layerSelectorViewModel.setSelectedItemsFromVisibleLayers(),this.layerSelectorViewModel.getAllItems().filter(function(e){return!e.isFolder}).forEach(function(e){e.layer&&e.definitionExpression.set(e.layer.getDefinitionExpression())}),this.basemaps.get().forEach(function(e){e.reset()}),this.grantEditorViewModel.reset(),this.layersChanged.set(!1),this.geometryChanged.set(!1),this.basemapsChanged.set(!1)},i.prototype.finishEditing=function(e){var t=this;if(void 0===e&&(e=!1),!this.isEditing.get())throw this.app.trace.error("OfflineMapEditorViewModel.finishEditing called when not editing."),new Error("Not editing.");this.savingEvent.publish();var i={existingOfflineMap:this.existingOfflineMap,newOfflineMap:null,canceled:e},a=Promise.resolve();return e||(i.newOfflineMap={content:{layers:this.layerSelectorViewModel.getAllItems().filter(function(e){return e.layer&&e.isEnabled.get()}).map(function(e){var t=e,i={layerInfoUniqueId:t.layer.uniqueId,definitionExpression:t.definitionExpression.get()};return t.layer.gcxLayer&&t.layer.gcxLayer.isUserCreated&&(i.isUserCreated=t.layer.gcxLayer.isUserCreated,i.layerJson=t.layer.gcxLayer.toJson(),i.serviceInfo={url:t.layer.serviceLayerInfo.serviceLayer.url,capabilities:t.layer.serviceLayerInfo.capabilities}),i}),geometry:this.geometry.get()?this.geometry.get().toJson():null,basemaps:this.basemaps.get().filter(function(e){return e.type.get()===s.OfflineMapBasemap.Type.PREGENERATED||e.type.get()===s.OfflineMapBasemap.Type.EXPORT_TILES}).map(function(e){return e.save()}),includeAttachments:this.includeAttachments.get()},title:this.name.get(),thumbnail:{location:this.thumbnail.get()},properties:{siteId:{string:this.app.site.id},viewerId:{string:(this.app.configModel.viewerId||"null").toLowerCase()}},grants:this.grantEditorViewModel.grants},i.newOfflineMap.thumbnail&&this.existingOfflineMap&&JSON.stringify(this.existingOfflineMap.content.layers)===JSON.stringify(i.newOfflineMap.content.layers)&&JSON.stringify(this.existingOfflineMap.content.geometry)===JSON.stringify(i.newOfflineMap.content.geometry)||(a=this._getThumbnailUri().then(function(e){e&&(i.newOfflineMap.thumbnail.location=e)}))),this.initialMapState.restore(),this.isEditing.set(!1),this.initialMapState=null,this.existingOfflineMap=null,a.then(function(){u.OfflineMapsModule._execCommandsFromConfig(t.app,t.config.onEditingFinished),t.app.event("OfflineMapEditorFinishedEvent").publish(i)})},i.prototype._getThumbnailUri=function(){var e=this,t=new g.ReportParameters;return t.outputFormat="PNG",t.includeData=!0,t.imageWidth=this.config.thumbnail&&this.config.thumbnail.width||150,t.imageHeight=this.config.thumbnail&&this.config.thumbnail.height||150,t.resolution={displayName:"custom",dpi:this.config.thumbnail&&this.config.thumbnail.dpi||20},t.customExtent=this.geometry.get().getExtent(),t.extentType=g.ReportParameters.CUSTOM_EXTENT,t.populateMapGraphicsLayers(this.app.map),new Promise(function(i,a){e.app.site.essentialsMap.exportMap(t,function(e){i(e.data?"data:image/png;base64,"+e.data:e.href?e.href:null)},function(t){e.app.trace.error("Error exporting map for thumbnail: "+t.message),i(null)})})},i.prototype.calculateIsValid=function(){var e=this.layerSelectorViewModel.getAllItems().filter(function(e){return e.layer&&e.isEnabled.get()}).length,t=e>0;this.isLayersValid.set(t),this.layersText.set(this.getResource("language-offlinemapeditor-layers-text").format(e));var i=!!this.geometry.get();this.isGeometryValid.set(i);var a=this.basemaps.get().every(function(e){return e.isValid.get()});this.isBasemapsValid.set(a),this.isBasemapsCalculating.set(this.basemaps.get().some(function(e){return e.size.get()===p.OfflineMapEditorBasemap.sizeCalculating}));var n=this.basemaps.get().filter(function(e){return!e.isNone.get()}).length;this.hasBasemaps.set(n>0),this.basemapsText.set(this.getResource("language-offlinemapeditor-basemaps-text").format(n));var s=m.GrantKind.READER,o=m.GrantKind.WRITER,l=this.grantEditorViewModel.monikers.get().filter(function(e){return e.grants.filter(function(e){return e.assert&&!e.revoke&&(e.kind===s||e.kind===o)}).length>0}).length;this.hasSharing.set(l>0);var r=t&&i&&a&&!!this.name.get();this.isValid.set(r)},i}(a.ViewModelBase);i.OfflineMapEditorViewModel=h})},"Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewModelConfiguration":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/Sync/SyncStatusView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase","./../Widgets/ProgressBarWidgetViewModel"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(e,i){var a=t.call(this,e,i)||this;return a.app=e,a._switchedToOnline=!1,a.app.command("StartOfflineFeatureSync").register(a,a._startOfflineFeatureSync),a.app.command("StartOfflineSyncAndShowProgress").register(a,a._startOfflineSyncAndShowProgress),a.app.command("StartOfflineDownloadAndShowProgress").register(a,a._startOfflineDownloadAndShowProgress),a}return e(i,t),i.prototype.attach=function(e){t.prototype.attach.call(this,e)},i.prototype.activated=function(){t.prototype.activated.call(this)},i.prototype.resolveWidget=function(e,i,a){if(t.prototype.resolveWidget.call(this,e,i,a),"syncProgressBar"===e){var s=this.app.viewManager.createView({typeName:"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.widgets.ProgressBarWidget",markupResource:"Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget.html"});return s.app=this.app,s.libraryId=this.libraryId,this.progressBarViewModel=new n.ProgressBarWidgetViewModel(this.app,this.libraryId),s.attach(this.progressBarViewModel),s}},i.prototype.deactivated=function(){t.prototype.deactivated.call(this),this.viewModel.reset(),this.progressBarViewModel.widthStyle.set("0%"),this._switchedToOnline&&this.app.isOffline.set(!0)},i.prototype._startOfflineFeatureSync=function(e){var t=this;if(!this.app.offlineManager.currentOperation){this.viewModel.reset();var i=Promise.resolve(),a=!1;e.offlineMaps.forEach(function(n,s){var o=t.app.offlineManager.getOfflineMapById(n.id);t._setup(o),t.viewModel.updateProgressText(n,t.getResource("language-offline-maps-sync-waiting"),!0),i=i.finally(function(){t.viewModel.updateProgressText(n,t.getResource("language-offline-maps-sync-syncing"),!0);var i=s===e.offlineMaps.length-1;return t.app.offlineManager.syncOfflineMap(n,function(i){var a=i.percentage/e.offlineMaps.length+s/e.offlineMaps.length*100;t.progressBarViewModel.widthStyle.set(a+"%"),setTimeout(function(){t.viewModel.overallPercentage.set(Math.round(10*a)/10),t.viewModel.statusText.set(i.message),i.isWarning&&t.viewModel.warnings.addItem(i.message)},500)},{basemapDownloads:!1,featureDataSync:!0,refreshMap:i,updateBundle:!1})}).then(function(){setTimeout(function(){t.viewModel.updateProgressText(n,t.getResource("language-offline-maps-sync-done"),!0)},500)}).catch(function(e){a=!0,setTimeout(function(){var i=e.message||e;t.viewModel.updateProgressText(n,i,!1)},500)})}),i.finally(function(){setTimeout(function(){t._closeConditionally(a),t.viewModel.showProgress.set(!1),t.viewModel.showCancel.set(!1),t.viewModel.showClose.set(!0),t.viewModel.isResuming.set(!1),a&&(t.viewModel.showClose.set(!1),t.viewModel.partialDataText.set(t.getResource("language-offline-maps-delete-partial-data-text")))},500)})}},i.prototype._startOfflineSyncAndShowProgress=function(e){var t=this;if(!this.app.offlineManager.currentOperation){var i=this.app.offlineManager.getOfflineMapById(e.offlineMap.id);this.viewModel.reset(),this._setup(i),this.app.offlineManager.syncOfflineMap(e.offlineMap,function(e){t.progressBarViewModel.widthStyle.set(e.percentage+"%"),setTimeout(function(){t.viewModel.overallPercentage.set(Math.round(10*e.percentage)/10),t.viewModel.statusText.set(e.message),e.isWarning&&t.viewModel.warnings.addItem(e.message)},500)}).then(function(){setTimeout(function(){t.viewModel.updateProgressText(e.offlineMap,t.getResource("language-offline-maps-sync-done"),!0),t._closeConditionally()},500)}).catch(function(i){setTimeout(function(){var a=i.message||i;t.viewModel.updateProgressText(e.offlineMap,a,!1),t.viewModel.partialDataText.set(t.getResource("language-offline-maps-delete-partial-data-text"))},500)}).finally(function(){setTimeout(function(){t.viewModel.showProgress.set(!1),t.viewModel.showCancel.set(!1),null==t.viewModel.partialDataText.get()&&t.viewModel.showClose.set(!0),t.viewModel.isResuming.set(!1)},500)})}},i.prototype._startOfflineDownloadAndShowProgress=function(e){var t=this;this.viewModel.reset(),this._setup(e.offlineMap),this.app.offlineManager.addOfflineMap(e.offlineMap,function(e){t.progressBarViewModel.widthStyle.set(e.percentage+"%"),setTimeout(function(){t.viewModel.overallPercentage.set(Math.round(10*e.percentage)/10),t.viewModel.statusText.set(e.message),e.isWarning&&t.viewModel.warnings.addItem(e.message)},500)}).then(function(){t.app.offlineManager.activateOfflineMap(e.offlineMap,!0)}).then(function(){setTimeout(function(){t.viewModel.updateProgressText(e.offlineMap,t.getResource("language-offline-maps-sync-done"),!0),t._closeConditionally()},500)}).catch(function(i){setTimeout(function(){var a=i.message||i;t.viewModel.updateProgressText(e.offlineMap,a,!1),t.viewModel.partialDataText.set(t.getResource("language-offline-maps-delete-partial-data-text"))},500)}).finally(function(){setTimeout(function(){t.viewModel.showProgress.set(!1),t.viewModel.showCancel.set(!1),null==t.viewModel.partialDataText.get()&&t.viewModel.showClose.set(!0),t.viewModel.isResuming.set(!1)},500)})},i.prototype._closeConditionally=function(e){var t=this;void 0===e&&(e=!1),this.viewModel.closeWhenDone.get()&&0===this.viewModel.warnings.get().length&&!e&&setTimeout(function(){t._close()},100)},i.prototype._close=function(){this.app.viewManager.deactivateView(this)},i.prototype._open=function(){this.app.viewManager.getViewById(this.id).isActive||this.app.command("ActivateView").execute(this.id)},i.prototype._setup=function(e){this.app.isOffline.get()?(this.app.isOffline.set(!1),this._switchedToOnline=!0):this._switchedToOnline=!1,this.viewModel.setup(e);var t=this.app.offlineManager.getOfflineMapWithStateById(e.id);this.viewModel.isResuming.set(!!t&&t.state.hasProgress),this._open()},i.prototype.handleCancelClick=function(e,t,i){var a=this;this.viewModel.cancellingText.set(this.getResource("language-offline-maps-sync-cancelling")),this.viewModel.showProgress.set(!1),this.viewModel.isCancelling=!0,this.app.offlineManager.cancel().finally(function(){a.viewModel.isCancelling&&a._close()}),setTimeout(function(){a.viewModel.isCancelling&&(a.viewModel.showCancel.set(!1),a.viewModel.showClose.set(!0))},1e4)},i.prototype.handleCloseClick=function(e,t,i){this.viewModel.isCancelling&&(this.app.offlineManager.forgetLast(),this.app.offlineManager.removeOfflineMap(this.viewModel.offlineMap)),this._close()},i.prototype.handleDeleteData=function(e,t,i){var a=this,n=this.viewModel.progressModels.getItems().filter(function(e){return!e.success}),s=[];Promise.each(n,function(e){var t=a.app.offlineManager.getOfflineMapWithStateById(e.context.id);t.state.hasProgress=!1;var i=!t.state.isDownloaded;return a.app.offlineManager.removeOfflineMapPartialData(e.context,i).then(function(){if(i)return a.app.offlineManager.removeOfflineMap(e.context)}).catch(function(e){s.push(e.message||e.toString())})}).finally(function(){s.length>0&&a.app.command("Alert").execute(s.join("\n")),a._close()})},i.prototype.handleToggleDetailsClick=function(e,t,i){this.viewModel.showStatusText.set(!this.viewModel.showStatusText.get())},i}(a.ViewBase);i.SyncStatusView=s})},"Mapping/modules/OfflineMaps/Sync/SyncStatusViewModel":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(e,i){var a=t.call(this,e,i)||this;return a.app=e,a._bindings=new Array,a.name=new n.Observable,a.overallPercentage=new n.Observable,a.cancellingText=new n.Observable,a.progressModels=new n.ObservableCollection,a.statusText=new n.Observable,a.closeWhenDone=new n.Observable(!1),a.warnings=new n.ObservableCollection,a.partialDataText=new n.Observable,a.showStatusText=new n.Observable(!1),a.hideStatusText=new n.Observable(!0),a.showProgress=new n.Observable(!0),a.showCancel=new n.Observable(!0),a.showClose=new n.Observable(!1),a.canCancel=new n.Observable(!1),a.isCancelling=!1,a.isResuming=new n.Observable(!1),a}return e(i,t),i.prototype.setup=function(e){this._bindings.push({token:this.showStatusText.bind(this,this.showStatusTextChanged),observable:this.showStatusText}),this._bindings.push({token:this.closeWhenDone.bind(this,this.closeWhenDoneChanged),observable:this.closeWhenDone}),this.canCancel.sync(this.app.offlineManager.canCancel);var t=localStorage.getItem("geocortex.offlineMaps.SyncStatusViewModel.showStatusText");"string"==typeof t&&this.showStatusText.set("true"===t);var i=localStorage.getItem("geocortex.offlineMaps.SyncStatusViewModel.closeWhenDone");"string"==typeof i&&this.closeWhenDone.set("true"===i),this.name.set(e.title),this.statusText.set(this.getResource("language-offline-maps-progress-pending")),this.offlineMap=e,this.showClose.set(!1),this.showCancel.set(!0)},i.prototype.reset=function(){this._bindings.forEach(function(e){return e.observable.unbind(e.token)}),this._bindings.length=0,this.overallPercentage.set(0),this.cancellingText.set(null),this.partialDataText.set(null),this.statusText.set(null),this.showProgress.set(!0),this.progressModels.clear(),this.warnings.clear(),this.isCancelling=!1},i.prototype.updateProgressText=function(e,t,i){var a=this.progressModels.getItems().filter(function(t){return t.context.id===e.id})[0];a||(a=new o,this.progressModels.addItem(a)),a.mapNameDisplay.set(String.format("{0}: ",e.title)),a.progressClass.set(i?"success":"error"),a.message.set(t),a.context=e,a.success=i},i.prototype.showStatusTextChanged=function(e){localStorage.setItem("geocortex.offlineMaps.SyncStatusViewModel.showStatusText",e+""),this.hideStatusText.set(!e)},i.prototype.closeWhenDoneChanged=function(e){localStorage.setItem("geocortex.offlineMaps.SyncStatusViewModel.closeWhenDone",e+"")},i}(a.ViewModelBase);i.SyncStatusViewModel=s;var o=function(){return function(){this.message=new n.Observable,this.progressClass=new n.Observable,this.mapNameDisplay=new n.Observable,this.success=!1}}();i.ProgressViewModel=o})},"Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase"],function(t,i,a){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return e(i,t),i}(a.ViewBase);i.ProgressBarWidget=n})},"Mapping/modules/OfflineMaps/Widgets/ProgressBarWidgetViewModel":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e.widthStyle=new n.Observable("0%"),e}return e(i,t),i}(a.ViewModelBase);i.ProgressBarWidgetViewModel=s})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsConfiguration":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase"],function(t,i,a){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=function(t){function i(e,i){var a=t.call(this,e,i)||this;return a._bindings=new Array,a._statusId="offlineBasemapDefineLevels",a.app.command("ShowOfflineMapEditorBasemapLevels").register(a,a._showOfflineMapEditorBasemapLevels),a}return e(i,t),i.prototype._showOfflineMapEditorBasemapLevels=function(e){this.viewModel.basemap.set(e.basemap),this.app.command("ActivateView").execute(this.id)},i.prototype.attach=function(e){var i=this;t.prototype.attach.call(this,e),this.viewModel.basemap.bind(this,function(){return i._initSliderAndMapBindings()})},i.prototype.deactivated=function(){t.prototype.deactivated.call(this);for(var e=0;e<this._bindings.length;e++){var i=this._bindings[e];i.observable&&i.token?i.observable.unbind(i.token):i.esriHandle&&i.esriHandle.remove()}this._bindings.length=0,this.app.command("RemoveNotification").execute(this._statusId),this.app.map._params.maxZoom=this._mapMaxZoom},i.prototype._initSliderAndMapBindings=function(){var e=this;this.viewModel;if($(this.slider).slider({range:!1,min:Math.max(this.viewModel.basemap.get().exportTilesMapServiceMinLevel.get(),this.app.map.getMinZoom()),max:Math.min(this.viewModel.basemap.get().exportTilesMapServiceMaxLevel.get(),this.app.map.getMaxZoom()),value:this.viewModel.basemap.get().exportTilesMaxLevel.get(),slide:function(t,i){e.viewModel.basemap.get().exportTilesMaxLevel.get()!==i.value&&e.viewModel.basemap.get().exportTilesMaxLevel.set(i.value)}}),this._bindings.push({observable:this.viewModel.basemap.get().exportTilesMaxLevel,token:this.viewModel.basemap.get().exportTilesMaxLevel.bind(this,function(t){$(e.slider).slider("value",t),e.app.map.getLevel()!==t&&e.app.map.setLevel(t)})}),this._bindings.push({esriHandle:this.app.map.on("extent-change",function(t){t.lod.level!==e.viewModel.basemap.get().exportTilesMaxLevel.get()&&e.viewModel.basemap.get().exportTilesMaxLevel.set(t.lod.level)})}),this.app.map.setZoom(this.viewModel.basemap.get().exportTilesMaxLevel.get()),"Handheld"!=this.app.shellName){var t={id:this._statusId,text:this.getResource("language-offlinemapeditor-basemaps-levels-mapinstructions"),closeButton:{callback:function(){e.app.command("DeactivateView").execute(e.id)}}};this.app.command("DisplayNotification").execute(t)}var i=this.app.map;this._mapMaxZoom=i._params.maxZoom,i._params.maxZoom=this.viewModel.basemap.get().exportTilesMapServiceMaxLevel.get()},i.prototype.handleDoneClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},i}(a.ViewBase);i.OfflineMapEditorBasemapLevelsView=n})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsViewModel":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(e,i){var a=t.call(this,e,i)||this;return a.basemap=new n.Observable(null),a}return e(i,t),i}(a.ViewModelBase);i.OfflineMapEditorBasemapLevelsViewModel=s})},"Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapsView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase","./../../OfflineMapsModule"],function(t,i,a,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return e(i,t),i.prototype.handleTypeRadioClick=function(e,t,i){i.type.set(t.value)},i.prototype.handleEditLevelsClick=function(e,t,i){n.OfflineMapsModule._execCommandFromConfig(this.app,this.configuration.showBasemapsLevelEditorView,{basemap:i})},i.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},i}(a.ViewBase);i.OfflineMapEditorBasemapsView=s})},"Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase"],function(t,i,a){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return e(i,t),i.prototype.attach=function(e){var i=this;t.prototype.attach.call(this,e),this.viewModel.isEditing.bind(this,function(e){i._getGraphicsLayer().setVisibility(e)}),this.viewModel.savingEvent.subscribe(this,function(){i._getGraphicsLayer().setVisibility(!1)}),this.viewModel.geometry.bind(this,function(e){var t=i._getGraphicsLayer();if(t.clear(),e){var a=new esri.Graphic;a.setGeometry(e),t.add(a)}})},i.prototype.activated=function(){t.prototype.activated.call(this),this._getGraphicsLayer().setOpacity(1)},i.prototype.deactivated=function(){t.prototype.deactivated.call(this),this._getGraphicsLayer().setOpacity(this.configuration.offViewOpacity),this.app.command("ClearActiveTool").execute()},i.prototype.resolveWidget=function(e,i,a){switch(t.prototype.resolveWidget.call(this,e,i,a),e){case"OfflineMapEditorGeometryActionsWidget":return this.app.menuRegistry.createMenuWidget(this,i,a)}},i.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},i.prototype._getGraphicsLayer=function(){if(this._layer)return this._layer;if(this._layer=this.app.map.getLayer(this.configuration.geometryLayerId),!this._layer){this._layer=new esri.layers.GraphicsLayer,this._layer.id=this.configuration.geometryLayerId;var e=new esri.symbol.SimpleLineSymbol;e.color.setColor(new esri.Color(this.configuration.outlineColor)),e.setWidth(this.configuration.outlineWidth);var t=new esri.symbol.SimpleFillSymbol;t.setColor(new esri.Color(this.configuration.fillColor)),t.setOutline(e);var i=new esri.renderer.SimpleRenderer(t);this._layer.setRenderer(i),this._layer.setOpacity(this.configuration.offViewOpacity),this.app.map.addLayer(this._layer)}return this._layer},i}(a.ViewBase);i.OfflineMapEditorGeometryView=n})},"Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryViewConfiguration":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItem":function(){define(["require","exports"],function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})})},"Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorViewModel":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/infrastructure/layerselector/LayerSelectorViewModelBase","geocortex/framework/observables","geocortex/essentials/MapServiceConstants","geocortex/essentials/LayerType","geocortex/infrastructure/TaskUtils"],function(t,i,a,n,s,o,l){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var r=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e.geometry=new n.Observable,e}return e(i,t),i.prototype.filter=function(e){if(e.layer){var t=e.layer;if(t.gcxLayer&&(!t.gcxLayer.isUserCreated||t.gcxLayer.catalogId&&t.serviceLayerInfo.gcxMapService.mapServiceType===s.MapServiceType.DYNAMIC&&t.gcxLayer.isDynamic))return t.serviceLayerInfo.gcxMapService?t.serviceLayerInfo.gcxMapService.mapServiceType===s.MapServiceType.DYNAMIC||t.serviceLayerInfo.gcxMapService.mapServiceType===s.MapServiceType.FEATURE:t.serviceLayerInfo.serviceType===s.MapServiceType.FEATURE&&t.gcxLayer.type===o.LayerType.FEATURE_LAYER}return!1},i.prototype.handleLayerStateChange=function(e){if(this.filter(e)&&e.layer){var t=e,i=this.filter(t)&&t.isEnabled.get();t.layer.setEsriLayerVisibility(i),this.onEnabledItemsChanged&&this.onEnabledItemsChanged()}},i.prototype.handleAllLayersEnabled=function(){this.setVisibleLayersFromSelectedItems(),this.onEnabledItemsChanged&&this.onEnabledItemsChanged(),this.onAllLayersEnabled&&this.onAllLayersEnabled()},i.prototype.handleAllLayersDisabled=function(){this.setVisibleLayersFromSelectedItems(),this.onEnabledItemsChanged&&this.onEnabledItemsChanged(),this.onAllLayersDisabled&&this.onAllLayersDisabled()},i.prototype.onLayerSelectorFolderItemCreated=function(e){this._addCustomLayerSelectorMembers(e)},i.prototype.onLayerSelectorLayerItemCreated=function(e){var t=this;e.isEnabled.set(!1),this._addCustomLayerSelectorMembers(e);var i=e;i.definitionExpression.bind(this,function(t){e.layer.setDefinitionExpression(t)}),i.isEnabled.bind(this,function(){return t._calculateNumFeaturesInLayer(i)}),i.definitionExpression.bind(this,function(){return t._calculateNumFeaturesInLayer(i)}),this.geometry.bind(this,function(){return t._calculateNumFeaturesInLayer(i)});var a=e.layer.serviceLayerInfo.capabilities;a&&a.indexOf("Sync")>=0?i.editableOrReadOnlyText.set(this.getResource("language-offlinemapeditor-layers-editable-offline")):i.editableOrReadOnlyText.set(this.getResource("language-offlinemapeditor-layers-readonly-offline"))},i.prototype.onLayerSelectorServiceLayerItemCreated=function(e){this._addCustomLayerSelectorMembers(e)},i.prototype._addCustomLayerSelectorMembers=function(e){var t=e;t.definitionExpression=new n.Observable(null),t.invalidDefinitionExpression=new n.Observable(!1),t.numFeatures=new n.Observable("0"),t.numFeaturesTitle=new n.Observable(""),t.editableOrReadOnlyText=new n.Observable("")},i.prototype._calculateNumFeaturesInLayer=function(e){var t=this;if(e.invalidDefinitionExpression.set(!1),!e.isEnabled.get()||!this.geometry.get()||e.layer.gcxLayer&&!e.layer.gcxLayer.supportsQuery)return e.numFeatures.set("0"),void e.numFeaturesTitle.set(this.getResource("language-offlinemapeditor-layers-numfeatures-title").format(0));e.numFeatures.set(this.getResource("language-offlinemapeditor-layers-numfeatures-calculating")),e.numFeaturesTitle.set(this.getResource("language-offlinemapeditor-layers-numfeatures-calculating-title"));var i=new esri.tasks.Query;i.where=e.definitionExpression.get(),i.geometry=this.geometry.get();l.getQueryTask(e.layer.gcxLayer).executeForCount(i).then(function(i){e.numFeatures.set(i),e.numFeaturesTitle.set(t.getResource("language-offlinemapeditor-layers-numfeatures-title").format(i))},function(i){dojo.isArray(i.details)&&i.details.some(function(e){return"Invalid query"===e})&&e.invalidDefinitionExpression.set(!0);var a=i.message?i.message:i;t.app.trace.error("Error querying layer '"+e.layer.id+"': "+a),e.numFeatures.set(t.getResource("language-offlinemapeditor-layers-numfeatures-unknown")),e.numFeaturesTitle.set(t.getResource("language-offlinemapeditor-layers-numfeatures-unknown-title"))})},i.prototype.setVisibleLayersFromSelectedItems=function(){var e=this;this.getAllItems().forEach(function(t){if(t.layer){var i=t,a=e.filter(i)&&i.isEnabled.get();i.layer.setEsriLayerVisibility(a)}})},i.prototype.setSelectedItemsFromVisibleLayers=function(){var e=this;this.getAllItems().forEach(function(t){return t.isEnabled.set(e.filter(t)&&t.layer.isVisible()&&!!t.layer.gcxLayer&&(!t.layer.gcxLayer.isUserCreated||!!t.layer.gcxLayer.catalogId&&t.layer.serviceLayerInfo.gcxMapService.mapServiceType===s.MapServiceType.DYNAMIC&&t.layer.gcxLayer.isDynamic))})},i}(a.LayerSelectorViewModelBase);i.LayerSelectorViewModel=r})},"Mapping/modules/OfflineMaps/Editor/Layers/OfflineMapEditorLayersView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase"],function(t,i,a){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return e(i,t),i.prototype.selectAllLayers=function(e,t,i){this.viewModel.layerSelectorViewModel.layerSelector.enableAllLayers()},i.prototype.clearAllLayers=function(e,t,i){this.viewModel.layerSelectorViewModel.layerSelector.disableAllLayers()},i.prototype.handleExpanderClick=function(e,t,i){i.isExpanded.set(!i.isExpanded.get())},i.prototype.handleDefinitionExpressionClick=function(e,t,i){this.app.command("Prompt").execute(this.getResource("language-offlinemapeditor-layers-lde-title"),this.getResource("language-offlinemapeditor-layers-lde-description"),i.definitionExpression.get(),function(e){"string"==typeof e&&i.definitionExpression.set(e)})},i.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},i}(a.ViewBase);i.OfflineMapEditorLayersView=n})},"Mapping/modules/OfflineMaps/Editor/Sharing/OfflineMapEditorSharingView":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function a(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(a.prototype=i.prototype,new a)}}();define(["require","exports","geocortex/framework/ui/ViewBase"],function(t,i,a){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return e(i,t),i.prototype.resolveWidget=function(e,i,a){if(t.prototype.resolveWidget.call(this,e,i),!e)return null;switch(e){case"GrantEditorWidget":var n=this.app.viewManager.createView({typeName:"geocortex.essentialsHtmlViewer.mapping.infrastructure.documents.GrantEditorView",markupResource:"Mapping/infrastructure/documents/GrantEditorView.html",libraryId:"Mapping.Infrastructure",isVisible:!0});return n&&n.attach(this.viewModel.grantEditorViewModel),n;default:return null}},i.prototype.handleBackClick=function(e,t,i){this.app.command("DeactivateView").execute(this.id)},i}(a.ViewBase);i.OfflineMapEditorSharingView=n})},"url:/Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsView.html":t,"url:/Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapsView.html":i,"url:/Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryView.html":a,"url:/Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItemTemplate.html":n,"url:/Mapping/modules/OfflineMaps/Editor/Layers/OfflineMapEditorLayersView.html":s,"url:/Mapping/modules/OfflineMaps/Editor/OfflineMapEditorView.html":o,"url:/Mapping/modules/OfflineMaps/Editor/Sharing/OfflineMapEditorSharingView.html":l,"url:/Mapping/modules/OfflineMaps/ListOfflineMapsView.html":r,"url:/Mapping/modules/OfflineMaps/ManageOfflineMapsView.html":p,"url:/Mapping/modules/OfflineMaps/Sync/SyncStatusView.html":c,"url:/Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget.html":d}}),require(["geocortex/framework/resourceManager"],function(e){e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/CSS/common.css","css","LnN0cmluZy13cmFwIHsNCiAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7DQogICAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDsNCiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQp9DQoub2ZmbGluZS1oZWFkaW5nIHsNCiAgICBmb250LXNpemU6IDEuM2VtOw0KICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7DQp9DQoub2ZmbGluZS1oZWFkaW5nLA0KLmVycm9yLW1lc3NhZ2UtdGV4dCB7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgbWFyZ2luOiAwLjVlbSAxZW07DQp9DQouT2ZmbGluZU1hcEVkaXRvckdlb21ldHJ5VmlldyAub2ZmbGluZS1oZWFkaW5nIHsNCiAgICBtYXJnaW4tYm90dG9tOiAxZW07DQp9DQoub2ZmbGluZS1oZWFkZXItaW5mby10ZXh0IHsNCiAgICBwYWRkaW5nOiAxZW07DQogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNEOUQ5RDk7DQp9DQoubGlzdC1tZW51LA0KLmxpc3QtbWVudSAqIHsNCiAgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQp9DQoubGlzdC1tZW51IC5pdGVtLWxpc3QtaXRlbSB7DQogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNEOUQ5RDk7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KLml0ZW0tbGlzdC1pdGVtLmFjdGl2ZS1saXN0LWl0ZW0gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNERUYyRkY7DQp9DQoubGlzdC1pdGVtLWJ1dHRvbiB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHBhZGRpbmc6IDAuMjVlbSA0ZW0gMC4yNWVtIDYuNWVtOw0KICAgIG1pbi1oZWlnaHQ6IDVlbTsNCiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQp9DQoucHJvZmlsZS1tYW5hZ2UgLmxpc3QtaXRlbS1idXR0b24uYnV0dG9uLWRlbGV0ZSB7DQogICAgcGFkZGluZy1yaWdodDogMGVtOw0KfQ0KLm9mZmxpbmUtdGh1bWJuYWlsIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgdG9wOiAwOw0KICAgIGxlZnQ6IDA7DQogICAgbWFyZ2luOiAwLjVlbTsNCiAgICB3aWR0aDogNS41ZW07DQp9DQoubGlzdC1pdGVtLWltZyB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyOiAxcHggc29saWQgI2Q5ZDlkOTsNCn0NCi5vZmZsaW5lLXRodW1ibmFpbCAubGlzdC1pdGVtLWltZyB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi5wcm9ncmVzcy1tZXNzYWdlIHsNCiAgICBiYWNrZ3JvdW5kOiAjZWVlOw0KfQ0KDQoubGlzdC1tZW51LWRlc2Muc3luYy1pbmNvbXBsZXRlIHsNCiAgICBwYWRkaW5nLWxlZnQ6IDEuNzVlbTsNCiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoUmVzb3VyY2VzL0ltYWdlcy9JY29ucy9Ub29sYmFyL2FsZXJ0LTE2LnBuZyk7DQogICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsNCiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBsZWZ0IGJvdHRvbTsNCg0KfQ0KDQouaWNvbi1jb250YWluZXIgew0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQp9DQoNCi5saXN0LWl0ZW0tYnV0dG9uLmJ1dHRvbi1kZWxldGUsDQoubGlzdC1pdGVtLWJ1dHRvbi5hY3Rpb24tYnV0dG9uIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgdG9wOiAwOw0KICAgIHJpZ2h0OiAwOw0KICAgIHdpZHRoOiAzLjVlbTsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgcGFkZGluZzogMDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjRDlEOUQ5Ow0KICAgIGJhY2tncm91bmQ6ICNGRkZGRkY7DQp9DQoNCi5hY3Rpb24tYnV0dG9uIC5zeW5jLWluY29tcGxldGU6OmFmdGVyIHsNCiAgICBjb250ZW50OiAiICI7DQogICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFJlc291cmNlcy9JbWFnZXMvSWNvbnMvVG9vbGJhci9hbGVydC0xNi5wbmcpOw0KICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIGhlaWdodDogMS4yNWVtOw0KICAgIHdpZHRoOiAxLjI1ZW07DQogICAgcmlnaHQ6IC0wLjI1ZW07DQogICAgYm90dG9tOiAtMC41ZW07DQp9DQoNCi5saXN0LWl0ZW0tYnV0dG9uLmFjdGlvbi1idXR0b24uc3luYy1idXR0b24gew0KICAgIHJpZ2h0OiAzLjVlbTsNCn0NCg0KLmxpc3QtaXRlbS1idXR0b24uYnV0dG9uLWRlbGV0ZSB7DQogICAgYmFja2dyb3VuZDogI2QxMzMyZjsNCn0NCi5vZmZsaW5lLXByb2ZpbGUtYmFzZW1hcC1tb3JlLWRldGFpbCB7DQogICAgZmxvYXQ6IHJpZ2h0Ow0KfQ0KDQouYmFzZW1hcC1lZGl0b3IgLmRpc3BsYXktbmFtZSwNCi5iYXNlbWFwLWVkaXRvciBmb3JtLA0KLmJhc2VtYXAtZWRpdG9yIC5lcnJvci1tZXNzYWdlIHsNCiAgICBkaXNwbGF5OiBibG9jazsNCiAgICBtYXJnaW4tYm90dG9tOiAwLjVlbTsNCn0NCi5iYXNlbWFwLWVkaXRvciAubGF5ZXItaXRlbS1jdHJsIHsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgbWFyZ2luLWJvdHRvbTogLTVweDsNCn0NCi5iYXNlbWFwLWVkaXRvciAuZGlzcGxheS1uYW1lIHsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCi5iYXNlbWFwLWVkaXRvciBmb3JtIHsNCiAgICBtYXJnaW4tdG9wOiAwLjdlbTsNCn0NCi5iYXNlbWFwLWVkaXRvciAuZXJyb3ItbWVzc2FnZS10ZXh0IHsNCiAgICAgbWFyZ2luOiAwLjVlbSAxZW0gMWVtIDA7DQogfQ0KDQouZWRpdHMtYmFkZ2UsDQouc3luYy1iYWRnZSB7DQogICAgYmFja2dyb3VuZDogI2QxMzMyZjsNCiAgICBjb2xvcjogI2ZmZmZmZjsNCiAgICBtaW4td2lkdGg6IDEuNWVtOw0KICAgIGhlaWdodDogMS41ZW07DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIGJvcmRlci1yYWRpdXM6IDFlbTsNCiAgICBsaW5lLWhlaWdodDogMC41ZW07DQogICAgcGFkZGluZzogMC41ZW07DQogICAgZm9udC1zaXplOiAwLjllbTsNCn0NCg0KLmVkaXRzLWJhZGdlIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgcmlnaHQ6IDQuMmVtOw0KICAgIHRvcDogMjAlOw0KfQ0KDQoub3JwaGFuLXdhcm5pbmcgew0KICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsNCn0NCg0KLyogLS0tLS0tIFNUQVJUOiBOZXcgUHJvZmlsZXMgLS0tLS0tICovDQoub2ZmbGluZS1tYXAtZWRpdG9yIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQp9DQoub2ZmbGluZS1tYXAtZWRpdG9yIC5mb3JtLWJ0bnMgew0KICAgIHBhZGRpbmc6IDAgMWVtOw0KICAgIG1hcmdpbi10b3A6IDJlbTsNCiAgICBtYXJnaW4tYm90dG9tOiAyZW07DQp9DQoub2ZmbGluZS1tYXAtZWRpdG9yIC5sYXllci1zZWxlY3Rvci1idXR0b25zLnBhbmVsLWdyb3VwLWNvbnRlbnRzIHsNCiAgICBwYWRkaW5nOiAxZW07DQogICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KfQ0KLnByb2ZpbGUtbGF5ZXJzIC5sYXllci1saXN0IHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgdG9wOiBhdXRvOw0KICAgIHJpZ2h0OiBhdXRvOw0KICAgIGJvdHRvbTogYXV0bzsNCiAgICBsZWZ0OiAwOw0KICAgIG92ZXJmbG93OiBpbmhlcml0Ow0KfQ0KLnByb2ZpbGUtbGF5ZXJzIC5sYXllci1saXN0IC5pZGVudGlmeS1sYXllcnMgLmxheWVyIHsNCiAgICBwYWRkaW5nLWxlZnQ6IDEwJTsNCn0NCi5wcm9maWxlLWxheWVycyAubGF5ZXItbGlzdCAuaWRlbnRpZnktbGF5ZXJzLmxheWVycyAubGF5ZXIgLmxheWVyLWl0ZW0tZXhwYW5kZXIgew0KICAgIG1hcmdpbi1sZWZ0OiAwOw0KfQ0KLnByb2ZpbGUtbGF5ZXJzIC5maWx0ZXItYnV0dG9uIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB0b3A6IDA7DQogIHJpZ2h0OiAwOw0KICBib3R0b206IDA7DQogIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI0VFRUVFRTsNCiAgYmFja2dyb3VuZDogI0ZGRkZGRjsNCiAgcGFkZGluZzogMCAwLjc1ZW07DQp9DQoucHJvZmlsZS1sYXllcnMgLmZpbHRlci1idXR0b246aG92ZXIsDQoubGlzdC1tZW51LWl0ZW06aG92ZXIsDQoubGlzdC1tZW51LWRldGFpbHM6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNERUYyRkY7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KLnByb2ZpbGUtbGF5ZXJzIC5sYXllci1jb250ZW50czpob3ZlciB7DQogICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KfQ0KLnByb2ZpbGUtbGF5ZXJzIC5zdWItdGV4dCB7DQogICAgY29sb3I6ICM3Nzc3Nzc7DQogICAgZm9udC1zaXplOiAwLjllbTsNCn0NCi5wcm9maWxlLWxheWVycyAubGF5ZXItaXRlbS1jdHJsIGlucHV0W3R5cGU9ImNoZWNrYm94Il0sIA0KLnByb2ZpbGUtbGF5ZXJzIC5sYXllci1pdGVtLWN0cmwgaW5wdXRbdHlwZT0icmFkaW8iXSB7DQogICAgbWFyZ2luLWJvdHRvbTogMmVtOw0KfQ0KLm9mZmxpbmUtbWFwLWVkaXRvciBidXR0b24ubGlzdC1tZW51LWl0ZW0gew0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KLm9mZmxpbmUtbWFwLWVkaXRvciAubGlzdC1tZW51IGxpOmZpcnN0LWNoaWxkIC5saXN0LW1lbnUtaXRlbSB7DQogICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZWVlZWU7DQp9DQoubGlzdC1tZW51LXN0YXR1cy1tc2cgew0KICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsNCiAgICBmb250LXNpemU6IDAuOWVtOw0KfQ0KLmxpc3QtbWVudS1zdGF0dXMtbXNnIC5zdGF0dXMtbXNnLWljb24sDQoubGlzdC1tZW51LXN0YXR1cy1tc2cgLmxpc3QtbWVudS1kZXNjLA0KLmxpc3QtbWVudS1zdGF0dXMtbXNnIC5lcnJvci1tZXNzYWdlIHsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQp9DQovKiAtLS0tLS0gRU5EOiBOZXcgUHJvZmlsZXMgLS0tLS0tICovDQoNCi8qIC0tLS0tLSBTVEFSVDogU2VsZWN0IExheWVycyAtLS0tLS0gKi8NCi5vZmZsaW5lLXByb2ZpbGVzIC5sYXllcnMgLmxheWVyIC5sYXllci1pdGVtLWV4cGFuZGVyIHsNCiAgICBtYXJnaW4tbGVmdDogMDsNCn0NCi8qIC0tLS0tLSBFTkQ6IFNlbGVjdCBMYXllcnMgLS0tLS0tICovDQovKiAtLS0tLS0gU1RBUlQ6IEJhc2VtYXBzIC0tLS0tLSAqLw0KLm9mZmxpbmUtbWFwLWVkaXRvciAuaW5wdXQtZ3JvdXAgew0KICAgIG1hcmdpbi1ib3R0b206IDFlbTsNCn0NCi5iYXNlbWFwLWVkaXRvciAuaW5wdXQtZ3JvdXAgbGFiZWwgew0KICAgIGRpc3BsYXk6IGJsb2NrOw0KfQ0KLmxhYmVsLXRleHQgew0KICAgIHBvaW50ZXItZXZlbnRzOiBub25lOw0KfQ0KLyogLS0tLS0tIEVORDogQmFzZW1hcHMgLS0tLS0tICovDQovKiAtLS0tLS0gU1RBUlQ6IFNoYXJpbmcgLS0tLS0tICovDQoub2ZmbGluZS1tYXAtZWRpdG9yIC5ncmFudC1lZGl0b3Igew0KICAgIHBhZGRpbmc6IDAgMWVtIDFlbSAxZW07DQp9DQouc2hhcmUtd2l0aCBsYWJlbHsNCiAgICBwYWRkaW5nOiAxZW0gMCAwIDFlbTsgDQp9DQovKiAtLS0tLS0gRU5EOiBTaGFyaW5nIC0tLS0tLSAqLw0KLyogLS0tLS0tIFNUQVJUOiBPdmVycmlkZXMgLS0tLS0tICovDQoub2ZmbGluZS1wcm9maWxlcyAubGlzdC1tZW51IGxpOmxhc3QtY2hpbGQgew0KICAgIGJvcmRlci1yYWRpdXM6IDA7DQp9DQouT2ZmbGluZU1hcEVkaXRvckJhc2VtYXBzVmlldyAuZm9ybS1idG5zLA0KLk9mZmxpbmVNYXBFZGl0b3JCYXNlbWFwTGV2ZWxzVmlldyAuZm9ybS1idG5zIHsNCiAgICBwYWRkaW5nOiAwIDFlbTsNCn0NCi5vZmZsaW5lLXByb2ZpbGVzIC5sYXllci1saXN0IHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgb3ZlcmZsb3c6IHZpc2libGU7DQogICAgdG9wOiAwOw0KICAgIGxlZnQ6IDA7DQp9DQoub2ZmbGluZS1wcm9maWxlcyAubGF5ZXJzIC5sYXllciB7DQogICAgcGFkZGluZy1sZWZ0OiAyLjE1ZW07DQp9DQoub2ZmbGluZS1wcm9maWxlcyAubGF5ZXItbGlzdCAudHJlZS1leHBhbmRlci5leHBhbmRlZCB7DQogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlIDUwJTsNCn0NCi8qIC0tLS0tLSBFTkQ6IE92ZXJyaWRlcyAtLS0tLS0gKi8NCg0KLyogLS0tLS0tIFNUQVJUIEJ1dHRvbiBTdGF0ZXMgLS0tLS0tKi8NCi5hY3RpdmUtcHJvZmlsZSBidXR0b24sDQouYWN0aXZlLXByb2ZpbGUgYnV0dG9uOmhvdmVyIC5zdGF0dXMtaWNvbiwNCi5hY3RpdmUtcHJvZmlsZSBidXR0b24gLnN0YXR1cy1pY29uOmhvdmVyLA0KLmxpc3QtaXRlbS1idXR0b246aG92ZXIsDQoub25saW5lLW9ubHkgLmxpc3QtaXRlbS1idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNERUYyRkY7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KLmFjdGl2ZS1wcm9maWxlIGJ1dHRvbi5ib3VuZC1kaXNhYmxlZCwNCi5hY3RpdmUtcHJvZmlsZSBidXR0b24uYm91bmQtZGlzYWJsZWQ6aG92ZXIgLnN0YXR1cy1pY29uLA0KLmFjdGl2ZS1wcm9maWxlIGJ1dHRvbi5ib3VuZC1kaXNhYmxlZCAuc3RhdHVzLWljb246aG92ZXIsDQoubGlzdC1pdGVtLWJ1dHRvbi5ib3VuZC1kaXNhYmxlZCwNCi5saXN0LWl0ZW0tYnV0dG9uLmJvdW5kLWRpc2FibGVkOmhvdmVyLA0KLm9ubGluZS1vbmx5IC5saXN0LWl0ZW0tYnV0dG9uLmJvdW5kLWRpc2FibGVkOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFRUVFOw0KICAgIGN1cnNvcjogZGVmYXVsdDsNCn0NCi5hY3RpdmUtbGlzdC1pdGVtIC5saXN0LWl0ZW0tYnV0dG9uLmJvdW5kLWRpc2FibGVkLA0KLm9ubGluZS1vbmx5IC5saXN0LWl0ZW0tYnV0dG9uLmJvdW5kLWRpc2FibGVkIHsNCiAgICB6b29tOiAxOw0KCWZpbHRlcjogYWxwaGEob3BhY2l0eT0xMDApOw0KCW9wYWNpdHk6IDE7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0RFRjJGRjsNCn0NCi5hY3RpdmUtbGlzdC1pdGVtIGJ1dHRvbi5saXN0LWl0ZW0tYnV0dG9uW2Rpc2FibGVkXSwNCi5vbmxpbmUtb25seSBidXR0b24ubGlzdC1pdGVtLWJ1dHRvbltkaXNhYmxlZF0gew0KICAgIGNvbG9yOiAjMzMzMzMzOw0KfQ0KLmFjdGl2ZS1saXN0LWl0ZW0gYnV0dG9uLmxpc3QtaXRlbS1idXR0b25bZGlzYWJsZWRdIC5saXN0LW1lbnUtZGVzYywNCi5vbmxpbmUtb25seSBidXR0b24ubGlzdC1pdGVtLWJ1dHRvbltkaXNhYmxlZF0gLmxpc3QtbWVudS1kZXNjIHsNCiAgICBjb2xvcjogIzY2NjY2NjsNCn0NCi5idXR0b24tZGVsZXRlOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTk5OTk5Ow0KfQ0KDQouYWN0aXZlLXByb2ZpbGUgLnN0YXR1cy1pY29uIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOw0KfQ0KDQouc3RhdHVzLWljb24uZG93bmxvYWRlZC1pY29uLA0KLnN0YXR1cy1pY29uLmFjdGl2ZS1pY29uLA0KLnN0YXR1cy1pY29uLm9ycGhhbi1pY29uLA0KLnByb2ZpbGUtbWFuYWdlIC5zdGF0dXMtaWNvbiB7DQogICAgcmlnaHQ6IDMuNWVtOw0KfQ0KDQouc3RhdHVzLWljb24uZG93bmxvYWRlZC1pY29uLA0KLnN0YXR1cy1pY29uLmFjdGl2ZS1pY29uLA0KLnN0YXR1cy1pY29uLm9ycGhhbi1pY29uIHsNCiAgICBib3JkZXItbGVmdC1jb2xvcjogdHJhbnNwYXJlbnQ7DQp9DQoNCi8qIC0tLS0tLSBFTkQgQnV0dG9uIFN0YXRlcyAtLS0tLS0qLw0KDQovKiAtLS0tLS0gU1RBUlQgU3luYyBTdGF0dXMgVmlldyAtLS0tLS0qLw0KLnN5bmMtc3RhdHVzLnBhZGRlZC12aWV3IHsNCiAgICB3aWR0aDogMzVlbTsNCiAgICBwYWRkaW5nOiAyZW07DQogICAgd29yZC1icmVhazogYnJlYWstYWxsOw0KICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCn0NCkBtZWRpYSBhbGwgYW5kIChtaW4td2lkdGg6IDgwMHB4KSB7DQogICAgLnN5bmMtc3RhdHVzLnBhZGRlZC12aWV3IHsNCiAgICAgICAgd2lkdGg6IDQ1ZW07DQogICAgfQ0KfQ0KQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7DQogICAgLnN5bmMtc3RhdHVzLnBhZGRlZC12aWV3IHsNCiAgICAgICAgd2lkdGg6IDU1ZW07DQogICAgfQ0KfQ0KLnN5bmMtc3RhdHVzLXNwYWNlciB7DQogICAgbWFyZ2luLWJvdHRvbTogMWVtOw0KfQ0KLnN5bmMtc3RhdHVzLWRldGFpbHMtdG9nZ2xlIHsNCiAgICBmb250LXdlaWdodDogNjAwOw0KICAgIGNvbG9yOiAjNDQ0NDQ0Ow0KICAgIHBhZGRpbmctbGVmdDogMS41ZW07DQogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogbGVmdCBjZW50ZXI7DQogICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsNCn0NCi5zeW5jLXN0YXR1cy1kZXRhaWxzLXRvZ2dsZS5jb2xsYXBzZWQgew0KICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChSZXNvdXJjZXMvSW1hZ2VzL0ljb25zL2NoZXZyb24tcmlnaHQtMTYucG5nKTsNCn0NCi5zeW5jLXN0YXR1cy1kZXRhaWxzLXRvZ2dsZS5leHBhbmRlZCB7DQogICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFJlc291cmNlcy9JbWFnZXMvSWNvbnMvY2hldnJvbi1kb3duLTE2LnBuZyk7DQp9DQouc3luYy1kZXRhaWxzIHsNCiAgICBtYXJnaW4tdG9wOiAxZW07DQp9DQouc3luYy1zdGF0dXMtZGV0YWlscyB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0VFRUVFRTsNCiAgICBwYWRkaW5nOiAwLjVlbTsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjRDlEOUQ5Ow0KICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07DQp9DQouc3luYy1jaGVja2JveC1jbG9zZSB7DQogICAgbWFyZ2luLXJpZ2h0OiAxZW07DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KLnN5bmMtY2hlY2tib3gtY2xvc2UgaW5wdXRbdHlwZT0iY2hlY2tib3giXSB7DQogICAgbWFyZ2luLXJpZ2h0OiAwLjVlbTsNCn0NCi5zeW5jLXN0YXR1cyAuc3VjY2VzcyB7DQogICAgY29sb3I6IGdyZWVuOw0KfQ0KLnN5bmMtc3RhdHVzIC5lcnJvciB7DQogICAgY29sb3I6ICM5OTAwMDA7DQp9DQoudG91Y2ggLnN5bmMtY2hlY2tib3gtY2xvc2UgaW5wdXRbdHlwZT0iY2hlY2tib3giXSB7DQogICAgbWFyZ2luLXJpZ2h0OiAxZW07DQp9DQoudG91Y2ggLnN5bmMtY2hlY2tib3gtY2xvc2UgaW5wdXRbdHlwZT0iY2hlY2tib3giXSArIHNwYW4gew0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICBtYXJnaW46IDAuNWVtIDA7DQp9DQouc3RhdHVzLWljb24gew0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICByaWdodDogMDsNCiAgICB0b3A6IDA7DQogICAgYm90dG9tOiAwOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICB3aWR0aDogMy41ZW07DQogICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjRDlEOUQ5Ow0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCg0KLm9ubGluZS1vbmx5IC5zdGF0dXMtaWNvbiB7DQogICAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50Ow0KfQ0KLm9ubGluZS1vbmx5IC5saXN0LW1lbnUtZGVzYyB7DQogICAgZGlzcGxheTogYmxvY2s7DQp9DQoNCi5hY3Rpb24tYnV0dG9uLWhlbHBlciwNCi5zdGF0dXMtaWNvbi1oZWxwZXIgew0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsNCn0NCg0KLmFjdGlvbi1idXR0b24gaW1nLA0KLnN0YXR1cy1pY29uIGltZyB7DQogICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsNCn0NCg0KLnN5bmMtd2FybmluZy1oZWFkZXIgew0KICAgIGNvbG9yOiByZWQ7DQogICAgbWFyZ2luLXRvcDogMWVtOw0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQogICAgbWFyZ2luLWJvdHRvbTogMGVtOw0KfQ0KLnN5bmMtd2FybmluZ3Mgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFRUVFOw0KICBwYWRkaW5nOiAwLjVlbTsNCiAgYm9yZGVyOiAxcHggc29saWQgI0Q5RDlEOTsNCiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsNCiAgbWFyZ2luLXRvcDogMGVtOw0KfQ0KLnN5bmMtd2FybmluZ3MgdWwgew0KICBtYXJnaW46IDAuMjVlbTsNCiAgcGFkZGluZy1sZWZ0OiAxLjI1ZW07DQp9DQoNCi8qIC0tLS0tLSBFTkQgU3luYyBTdGF0dXMgVmlldyAtLS0tLS0qLw0KDQovKiAtLS0tLS0gU1RBUlQgUHJvZ3Jlc3MgQmFyIC0tLS0tLSovDQoucHJvZ3Jlc3MtYmFyIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQ0NDQ0NDOw0KICAgIHBhZGRpbmc6IDAuMjVlbTsNCiAgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgDQogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAwLjI1ZW07DQogICAgLW1vei1ib3JkZXItcmFkaXVzOiAwLjI1ZW07DQogICAgLW1zLWJvcmRlci1yYWRpdXM6IDAuMjVlbTsNCiAgICBib3JkZXItcmFkaXVzOiAwLjI1ZW07DQp9DQoucHJvZ3Jlc3Mgew0KICAgIGhlaWdodDogMWVtOw0KICAgIGJhY2tncm91bmQ6ICM0QkI3NDk7DQogIA0KICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMC4xNWVtOw0KICAgIC1tb3otYm9yZGVyLXJhZGl1czogMC4xNWVtOw0KICAgIC1tcy1ib3JkZXItcmFkaXVzOiAwLjE1ZW07DQogICAgYm9yZGVyLXJhZGl1czogMC4xNWVtOw0KICAgIA0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMC41cyBlYXNlLWluLW91dDsNCiAgICAtbW96LXRyYW5zaXRpb246IHdpZHRoIDAuNXMgZWFzZS1pbi1vdXQ7DQogICAgLW8tdHJhbnNpdGlvbjogd2lkdGggMC41cyBlYXNlLWluLW91dDsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAwLjVzIGVhc2UtaW4tb3V0Ow0KICAgIA0KICAgIC13ZWJraXQtYW5pbWF0aW9uOiBmYWRlLWJhY2tncm91bmQgMnMgZWFzZS1pbi1vdXQgaW5maW5pdGU7IC8qIFNhZmFyaSA0KyAqLw0KICAgIC1tb3otYW5pbWF0aW9uOiAgICBmYWRlLWJhY2tncm91bmQgMnMgZWFzZS1pbi1vdXQgaW5maW5pdGU7IC8qIEZ4IDUrICovDQogICAgLW8tYW5pbWF0aW9uOiAgICAgIGZhZGUtYmFja2dyb3VuZCAycyBlYXNlLWluLW91dCBpbmZpbml0ZTsgLyogT3BlcmEgMTIrICovDQogICAgYW5pbWF0aW9uOiAgICAgICAgIGZhZGUtYmFja2dyb3VuZCAycyBlYXNlLWluLW91dCBpbmZpbml0ZSA7IA0KfQ0KDQoNCiBALXdlYmtpdC1rZXlmcmFtZXMgZmFkZS1iYWNrZ3JvdW5kIHsNCiAgICAwJSwgMTAwJSB7IA0KICAgICAgICBiYWNrZ3JvdW5kOiAjNEJCNzQ5Ow0KICAgIH0NCiAgICA1MCUgeyANCiAgICAgICAgYmFja2dyb3VuZDogIzg5REY4NzsgDQogICAgfQ0KfQ0KQC1tb3ota2V5ZnJhbWVzIGZhZGUtYmFja2dyb3VuZCB7DQogICAgMCUsIDEwMCUgeyANCiAgICAgICAgYmFja2dyb3VuZDogIzRCQjc0OTsNCiAgICB9DQogICAgNTAlIHsgDQogICAgICAgIGJhY2tncm91bmQ6ICM4OURGODc7IA0KICAgIH0NCn0NCkAtby1rZXlmcmFtZXMgZmFkZS1iYWNrZ3JvdW5kIHsNCiAgICAwJSwgMTAwJSB7IA0KICAgICAgICBiYWNrZ3JvdW5kOiAjNEJCNzQ5Ow0KICAgIH0NCiAgICA1MCUgeyANCiAgICAgICAgYmFja2dyb3VuZDogIzg5REY4NzsgDQogICAgfQ0KfQ0KQGtleWZyYW1lcyBmYWRlLWJhY2tncm91bmQgew0KICAgIDAlLCAxMDAlIHsgDQogICAgICAgIGJhY2tncm91bmQ6ICM0QkI3NDk7DQogICAgfQ0KICAgIDUwJSB7IA0KICAgICAgICBiYWNrZ3JvdW5kOiAjODlERjg3OyANCiAgICB9DQp9IA0KLyogLS0tLS0tIEVORCBQcm9ncmVzcyBCYXIgLS0tLS0tKi8="),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/CSS/small.css","css","LnN5bmMtc3RhdHVzLnBhZGRlZC12aWV3IHsNCiAgICBtaW4td2lkdGg6IDA7DQogICAgd2lkdGg6IDEwMCU7DQogICAgbWF4LXdpZHRoOiAxMDAlOw0KICAgIHBhZGRpbmc6IDJlbTsNCiAgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQp9DQouc3luYy1jaGVja2JveC1jbG9zZTphZnRlciB7DQogICAgY29udGVudDogIiI7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgaGVpZ2h0OiAwOw0KICAgIHBhZGRpbmctdG9wOiAxZW07DQogICAgY2xlYXI6IGJvdGg7DQp9"),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsView.html","html",t),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapsView.html","html",i),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryView.html","html",a),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorItemTemplate.html","html",n),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Editor/Layers/OfflineMapEditorLayersView.html","html",s),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Editor/OfflineMapEditorView.html","html",o),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Editor/Sharing/OfflineMapEditorSharingView.html","html",l),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/ListOfflineMapsView.html","html",r),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/ManageOfflineMapsView.html","html",p),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Sync/SyncStatusView.html","html",c),e.resourceManager.register("Mapping","inv","Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget.html","html",d)}),require({cache:{}}),define(["Mapping/modules/OfflineMaps/ListOfflineMapsView","Mapping/modules/OfflineMaps/ManageOfflineMapsView","Mapping/modules/OfflineMaps/OfflineMapModel","Mapping/modules/OfflineMaps/OfflineMapsModule","Mapping/modules/OfflineMaps/OfflineMapsViewModel","Mapping/modules/OfflineMaps/Editor/MapState","Mapping/modules/OfflineMaps/Editor/OfflineMapEditorBasemap","Mapping/modules/OfflineMaps/Editor/OfflineMapEditorView","Mapping/modules/OfflineMaps/Editor/OfflineMapEditorViewModel","Mapping/modules/OfflineMaps/Sync/SyncStatusView","Mapping/modules/OfflineMaps/Sync/SyncStatusViewModel","Mapping/modules/OfflineMaps/Widgets/ProgressBarWidget","Mapping/modules/OfflineMaps/Widgets/ProgressBarWidgetViewModel","Mapping/modules/OfflineMaps/Editor/Geometry/OfflineMapEditorGeometryView","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsView","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapLevelsViewModel","Mapping/modules/OfflineMaps/Editor/Basemap/OfflineMapEditorBasemapsView","Mapping/modules/OfflineMaps/Editor/Layers/LayerSelectorViewModel","Mapping/modules/OfflineMaps/Editor/Layers/OfflineMapEditorLayersView","Mapping/modules/OfflineMaps/Editor/Sharing/OfflineMapEditorSharingView"],function(t,i,a,n,s,o,l,r,p,c,d,f,u,g,m,h,b,v,y,M){e(t,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.ListOfflineMapsView",t.ListOfflineMapsView),e(i,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.ManageOfflineMapsView",i.ManageOfflineMapsView),e(a,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.OfflineMapModel",a.OfflineMapModel),e(n,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.OfflineMapsModule",n.OfflineMapsModule),e(s,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.OfflineMapsViewModel",s.OfflineMapsViewModel),e(o,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.MapState",o.MapState),e(l,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.OfflineMapEditorBasemap",l.OfflineMapEditorBasemap),e(r,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.OfflineMapEditorView",r.OfflineMapEditorView),e(p,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.OfflineMapEditorViewModel",p.OfflineMapEditorViewModel),e(c,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.sync.SyncStatusView",c.SyncStatusView),e(d,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.sync.SyncStatusViewModel",d.SyncStatusViewModel),e(f,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.widgets.ProgressBarWidget",f.ProgressBarWidget),e(u,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.widgets.ProgressBarWidgetViewModel",u.ProgressBarWidgetViewModel),e(g,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.geometry.OfflineMapEditorGeometryView",g.OfflineMapEditorGeometryView),e(m,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.basemap.OfflineMapEditorBasemapLevelsView",m.OfflineMapEditorBasemapLevelsView),e(h,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.basemap.OfflineMapEditorBasemapLevelsViewModel",h.OfflineMapEditorBasemapLevelsViewModel),e(b,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.basemap.OfflineMapEditorBasemapsView",b.OfflineMapEditorBasemapsView),e(v,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.layers.LayerSelectorViewModel",v.LayerSelectorViewModel),e(y,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.layers.OfflineMapEditorLayersView",y.OfflineMapEditorLayersView),e(M,"geocortex.essentialsHtmlViewer.mapping.modules.offlineMaps.editor.sharing.OfflineMapEditorSharingView",M.OfflineMapEditorSharingView)})}();