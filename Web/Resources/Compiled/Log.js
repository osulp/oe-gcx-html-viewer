function shim(e,t,i){if("string"==typeof e&&(i=t,t=e),"undefined"==typeof i)return void console.warn("Undefined shim for: "+t);for(var o=t.split("."),n=null,s=window,r=0,l=o.length;r<l;r++)n=o[r],r==l-1?s[n]=i:s[n]||(s[n]={}),s=s[n]}require({cache:{"Mapping/modules/Log/LogModule":function(){define(["require","exports","geocortex/framework/application/ModuleBase"],function(e,t,i){"use strict";var o=function(e){function t(t,i){var o=e.call(this,t,i)||this;return t.command("ConsoleDir").register(o,o._consoleDir),o}return __extends(t,e),t.prototype._consoleDir=function(e){console.dir(e)},t}(i.ModuleBase);t.LogModule=o})},"Mapping/modules/Log/LogStatusView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.handleClick=function(e,t,i){this.app.command("ToggleLogView").execute()},t}(i.ViewBase);t.LogStatusView=o})},"Mapping/modules/Log/LogView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var o=function(e){function t(t,i){var o=e.call(this,t,i)||this;return o.isActive=!1,o.app.command("ToggleLogView").register(o,function(){o.isActive?o.app.command("DeactivateView").execute(o.id):o.app.command("ActivateView").execute(o.id)}),o.app.command("ShowLog").register(o,function(e){e?o.app.command("ActivateView").execute(o.id):o.app.command("DeactivateView").execute(o.id)}),o.app.command("HideLog").register(o,function(){o.app.command("DeactivateView").execute(o.id)}),o}return __extends(t,e),t.prototype.activated=function(){e.prototype.activated.call(this),this.viewModel.requestDebugLoggingStatus(),this.viewModel.updateMultipleLogSourcesPresent(this.viewModel.multipleLogSourcesPresent.get())},t.prototype.handleClickClear=function(e,t,i){this.viewModel.logEntries.clear(),document.getElementById(this.viewModel.DEFAULT_LEVEL_ID).checked=!0,document.getElementById(this.viewModel.DEFAULT_SOURCE_ID).checked=!0,this.viewModel.resetLogFilterSettings(),this.viewModel.updateMultipleLogSourcesPresent(!1),this._deactivateView()},t.prototype.handleClickHide=function(e,t,i){this._deactivateView()},t.prototype.handleClickDebug=function(e,t,i){var o=t.checked;return this.viewModel.toggleDebugging(o)},t.prototype.handleClickFilter=function(e,t,i){var o=t.checked;return this.viewModel.toggleFilter(o)},t.prototype.handleClickLevelFilterRadio=function(e,t,i){this.viewModel.filterLogEntries(t.id,this.viewModel.currentFilterSource)},t.prototype.handleClickSourceFilterRadio=function(e,t,i){return this.viewModel.filterLogEntries(this.viewModel.currentFilterLevel,t.id),!0},t.prototype._deactivateView=function(){this.app.command("DeactivateView").execute(this.id),this.app.event("ToolbarViewTilePressedEvent").publish("IWantToMenuView")},t}(i.ViewBase);t.LogView=o})},"Mapping/modules/Log/LogViewModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables"],function(e,t,i,o){"use strict";var n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.logEntries=new o.ObservableCollection,t.logSources=new o.ObservableCollection,t.isVisible=new o.Observable((!1)),t.debugChecked=new o.Observable((!1)),t.filterChecked=new o.Observable((!1)),t.multipleLogSourcesPresent=new o.Observable((!1)),t.DEFAULT_SOURCE_ID="all",t.DEFAULT_LEVEL_ID="info",t.logToConsole=!0,t.DEFAULT_SOURCE=t.getResource("language-log-all-source-filter-name"),t.VIEWER_SOURCE_NAME=t.getResource("language-log-viewer-source-filter-name"),t.VIEWER_SOURCE_ID="gvh",t._logDates=[],t._filterLevelRank={error:1,warning:2,info:3,debug:4},t}return __extends(t,e),t.prototype.initialize=function(e){var t=this;this.logToConsole=e.logToConsole||!0,this.resetLogFilterSettings(),this.app.event("TraceEvent").subscribe(this,this._onTraceEvent),this.app.nativeManager.isNative()&&(this.app.nativeManager.subscribe("NativeAppLog",function(e){return t._handleNativeAppLogReceived(e)}),this.app.nativeManager.subscribe("NativeAppDebugLoggingStatus",function(e){return t._updateDebugMode(e.parameters.debugSet)}),this.requestDebugLoggingStatus());var i=dojo.getObject(e.version||"geocortex.essentialsHtmlViewer.version");this.app.trace.info("Version {0}. {1}".format(i,this.app.locale)),this.app.trace.info("Esri JavaScript API version {0}.".format(esri.version));var o=/https/i.test(window.location.protocol),n=/chrome/i.test(navigator.userAgent);if(n){var s=/chrome\/\d+\.\d+/i.exec(navigator.userAgent).toString(),r=/\d+\.\d+/.exec(s).toString(),l=Number(r);l&&l>=50&&!o&&this.app.trace.info(this.getResource("language-log-geolocation-not-available"))}},t.prototype.resetLogFilterSettings=function(){this.logSources=new o.ObservableCollection,this.logSources.addItems([{sourceName:this.DEFAULT_SOURCE,sourceId:this.DEFAULT_SOURCE_ID,isDefault:!0},{sourceName:this.VIEWER_SOURCE_NAME,sourceId:this.VIEWER_SOURCE_ID,isDefault:!1}]),this.currentFilterLevel=this.DEFAULT_LEVEL_ID,this.currentFilterSource=this.DEFAULT_SOURCE_ID,this.filterChecked.set(!1)},t.prototype.toggleDebugging=function(e){return this._updateDebugMode(e),this.app.nativeManager.isNative()&&this.app.nativeManager.message("DebugLoggingToggle",{debug:e}),!0},t.prototype.toggleFilter=function(e){return this.filterChecked.set(e),!0},t.prototype.requestDebugLoggingStatus=function(){this.app.nativeManager.message("DebugLoggingRequest","")},t.prototype.filterLogEntries=function(e,t){this.currentFilterLevel=e,this.currentFilterSource=t;for(var i=0;i<this.logEntries.length();i++){var o=this.logEntries.getAt(i);this._isLevelVisible(o.level)&&this._isSourceVisible(o.source)?o.visibility.set(!0):o.visibility.set(!1)}},t.prototype.updateMultipleLogSourcesPresent=function(e){this.multipleLogSourcesPresent.set(e);for(var t=0;t<this.logEntries.length();t++){var i=this.logEntries.getAt(t);i.multipleSources.set(e)}},t.prototype._updateDebugMode=function(e){this.app.debugMode=e,this.debugChecked.set(e)},t.prototype._onTraceEvent=function(e){var t=e.timestamp,i=e.level.toLowerCase();if(this._validLogLevel(i)){this._logDates.push(t);var n={timestamp:this._convertLogDateToTimestamp(t),cssClass:"trace "+i,level:i,message:e.message,source:e.source,visibility:new o.Observable((!1)),multipleSources:new o.Observable((!1))};this.logEntries.addItem(n);var s=this._isLevelVisible(n.level)&&this._isSourceVisible(n.source);n.visibility.set(s),n.multipleSources.set(this.multipleLogSourcesPresent.get()),this.app.nativeManager.isNative()&&this.app.nativeManager.message("ViewerLog",{timestamp:t.toISOString(),level:e.level,message:e.message,source:e.source})}},t.prototype._handleNativeAppLogReceived=function(e){var t=new Date(e.parameters.timestamp),i=e.parameters.level.toLowerCase(),n={timestamp:this._convertLogDateToTimestamp(t),cssClass:"trace "+i,message:e.parameters.message,source:e.parameters.source,level:i,visibility:new o.Observable((!1)),multipleSources:new o.Observable((!1))},s=this._isLevelVisible(n.level)&&this._isSourceVisible(n.source);n.visibility.set(s),n.multipleSources.set(this.multipleLogSourcesPresent.get()),this._validLogLevel(i)&&(this._insertLogByTimestamp(n,t),this.multipleLogSourcesPresent.get()||(this.logSources.addItem({sourceName:n.source,sourceId:this._getSourceId(n.source),isDefault:!1}),this.updateMultipleLogSourcesPresent(!0)))},t.prototype._insertLogByTimestamp=function(e,t){if(0==this.logEntries.length())this.logEntries.addItem(e);else for(var i=this.logEntries.length();i>0;--i){var o=this._logDates[i-1];if(t>=o){this._logDates.splice(i,0,t),this.logEntries.insertItem(i,e);var n=this._isLevelVisible(e.level)&&this._isSourceVisible(e.source);e.visibility.set(n),e.multipleSources.set(this.multipleLogSourcesPresent.get());break}}},t.prototype._validLogLevel=function(e){return this.app.debugMode||"debug"!==e},t.prototype._isLevelVisible=function(e){return this._filterLevelRank[this.currentFilterLevel]>=this._filterLevelRank[e]},t.prototype._isSourceVisible=function(e){var t=this._getSourceId(this.currentFilterSource),i=this._getSourceId(e);return t===this.DEFAULT_SOURCE_ID||t===i},t.prototype._getSourceId=function(e){return e.toLowerCase()},t.prototype._convertLogDateToTimestamp=function(e){var t="{0}:{1}:{2}.{3}".format(this._padDigits(e.getHours(),2),this._padDigits(e.getMinutes(),2),this._padDigits(e.getSeconds(),2),this._padDigits(e.getMilliseconds(),3));return t},t.prototype._padDigits=function(e,t,i){null==i&&(i=!0);var o=e.toString(),n="";if(t>o.length)for(var s=0;s<t-o.length;s++)n+="0";return i?n.toString()+o:o+n.toString()},t}(i.ViewModelBase);t.LogViewModel=n})},"url:/Mapping/modules/Log/LogStatusView.html":'<div class="log-status">\r\n    <div class="button" data-binding="{@visible: logEntries}">\r\n        <a class="log-view-button" href="javascript:void(0)" data-binding="{@event-onclick: handleClick}"></a>\r\n    </div>\r\n</div>',"url:/Mapping/modules/Log/LogView.html":'<div class="logview">\r\n    <div class="logview-header">\r\n        <h2 class="title" data-binding="{@text: @language-log-title}"></h2>\r\n        <button class="panel-header-button right close-16" data-binding="{@event-onclick: handleClickHide}"></button>\r\n    </div>\r\n    <div class="logview-header-buttons">\r\n        <button class="clear-button" data-binding="{@event-onclick: handleClickClear}{@visible: logEntries}{@text: @language-log-clear}"></button>\r\n        <input id="filter" class="checkbox" type="checkbox" data-binding="{@event-onclick: handleClickFilter}{checked: filterChecked}" />\r\n        <label class="filter-toggle" for="filter" data-binding="{@text: @language-log-filter}"></label>\r\n        <div class="filters" data-binding="{@visible: filterChecked}">\r\n            <span class="level-filters">\r\n                <!-- Errors -->\r\n                <input name="levelFilterGroup" type="radio" id="error" data-binding="{@event-onchange: handleClickLevelFilterRadio}" />\r\n                <label class="filter-option" for="error" data-binding="{@text: @language-log-filter-errors}"></label>\r\n                <!-- Warnings -->\r\n                <input name="levelFilterGroup" type="radio" id="warning" data-binding="{@event-onchange: handleClickLevelFilterRadio}" />\r\n                <label class="filter-option" for="warning" data-binding="{@text: @language-log-filter-warnings}"></label>\r\n                <!-- Info -->\r\n                <input name="levelFilterGroup" type="radio" id="info" data-binding="{@event-onchange: handleClickLevelFilterRadio}" checked="checked" />\r\n                <label class="filter-option" for="info" data-binding="{@text: @language-log-filter-info}"></label>\r\n                <!-- Debug -->\r\n                <input name="levelFilterGroup" type="radio" id="debug" data-binding="{@event-onchange: handleClickLevelFilterRadio}{@enabled: debugChecked}" />\r\n                <label class="filter-option" for="debug" data-binding="{@text: @language-log-filter-debug}"></label>\r\n            </span>\r\n            <!-- Source filters -->\r\n            <span class="source-filters" data-binding="{@source: logSources}{@visible: multipleLogSourcesPresent}">\r\n                <span data-binding="{@template-for: logSources}">\r\n                    <input name="sourceFilterGroup" type="radio" data-binding="{@event-onclick: handleClickSourceFilterRadio}{id: sourceId}{checked: isDefault}" />\r\n                    <label class="filter-option" data-binding="{@text: sourceName}{for: sourceId}"></label>\r\n                </span>\r\n            </span>\r\n        </div>\r\n        <input id="debug-toggle" class="checkbox" type="checkbox" data-binding="{@event-onclick: handleClickDebug}{checked: debugChecked}" />\r\n        <label class="checkbox-label" for="debug-toggle" data-binding="{@text: @language-log-debug}"></label>\r\n    </div>\r\n    <div class="logview-inner" data-binding="{@class-filters-visible: filterChecked}{@class-source-filters-visible: multipleLogSourcesPresent}">\r\n        <!-- No entries message. -->\r\n        <div class="no-results" data-binding="{@hidden: logEntries}{@text: @language-log-no-entries}"></div>\r\n        <!-- Entries table. -->\r\n        <table data-binding="{@visible: logEntries}">\r\n            <thead>\r\n                <tr>\r\n                    <th tabindex="0" data-binding="{@text: @language-log-level}"><!-- "Level" --></th>\r\n                    <th tabindex="0" data-binding="{@text: @language-log-timestamp}"><!-- "Timestamp" --></th>\r\n                    <th tabindex="0" data-binding="{@text: @language-log-source}{@visible: multipleLogSourcesPresent}"><!-- "Source" --></th>\r\n                    <th tabindex="0" data-binding="{@text: @language-log-message}"><!-- "Message" --></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody data-binding="{@source: logEntries}">\r\n                <tr data-binding="{@template-for: logEntries}{@visible: visibility}">\r\n                    <td tabindex="0" data-binding="{@text: level}{className: cssClass}"></td>\r\n                    <td tabindex="0" data-binding="{@text: timestamp}{className: cssClass}"></td>\r\n                    <td tabindex="0" data-binding="{@text: source}{@visible: multipleSources}{className: cssClass}"></td>\r\n                    <td tabindex="0" data-binding="{@text: message}{className: cssClass}"></td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>'}}),define(["Mapping/modules/Log/LogModule","Mapping/modules/Log/LogStatusView","Mapping/modules/Log/LogView","Mapping/modules/Log/LogViewModel"],function(e,t,i,o){shim(e,"geocortex.essentialsHtmlViewer.mapping.modules.log.LogModule",e.LogModule),shim(t,"geocortex.essentialsHtmlViewer.mapping.modules.log.LogStatusView",t.LogStatusView),shim(i,"geocortex.essentialsHtmlViewer.mapping.modules.log.LogView",i.LogView),shim(o,"geocortex.essentialsHtmlViewer.mapping.modules.log.LogViewModel",o.LogViewModel)});