function shim(e,t,i){if("string"==typeof e&&(i=t,t=e),"undefined"==typeof i)return void console.warn("Undefined shim for: "+t);for(var o=t.split("."),n=null,r=window,p=0,a=o.length;p<a;p++)n=o[p],p==a-1?r[n]=i:r[n]||(r[n]={}),r=r[n]}require({cache:{"Mapping/modules/Prompt/PromptModule":function(){define(["require","exports","geocortex/framework/application/ModuleBase","geocortex/framework/observables"],function(e,t,i,o){"use strict";var n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.promptRegion="ModalWindowRegion",t.oldPrompt=null,t.overrideNativePrompt=!0,t}return __extends(t,e),t.prototype.initialize=function(t){var i=this;e.prototype.initialize.call(this,t),this.promptRegion=t.promptRegion,this.oldPrompt=window.prompt,this.overrideNativePrompt=t.overrideNativePrompt;var n=function(e,t,n,r){if(!r)return i.oldPrompt(e,n);try{var p=i.app.viewManager.createView({typeName:"geocortex.essentialsHtmlViewer.mapping.modules.prompt.PromptView",markupResource:"Mapping/modules/Prompt/PromptView.html",isVisible:!1,regionName:i.promptRegion,libraryId:i.libraryId}),a={title:e,description:t,defaultText:n,callback:r,promptText:new o.Observable(n)};p.attach(a),p.title.set(e),i.app.viewManager.activateView(p)}catch(s){i.app.trace.error("Error: Could not display prompt: "+s)}};this.overrideNativePrompt&&(window.prompt=n),this.app.command("Prompt").register(this,function(e,t,o,r){e||(e=i.app.getResource(i.libraryId,"language-prompt-default-title")),r||(r=function(){}),n(e,t,o,r)})},t}(i.ModuleBase);t.PromptModule=n})},"Mapping/modules/Prompt/PromptView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,i){"use strict";var o=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.promptResult=null,t}return __extends(t,e),t.prototype.attach=function(t){if(e.prototype.attach.call(this,t),this.promptResult=null,this.title.set(t.promptTitle),this.okButtonElement)try{this.okButtonElement.focus()}catch(i){}this.viewContainerViewClosedEventToken||(this.viewContainerViewClosedEventToken=this.app.event("ViewContainerViewClosedEvent").subscribe(this,function(e){e&&e.viewId===this.id&&this._deactivateForUser()}))},t.prototype.destroyBindings=function(){e.prototype.destroyBindings.call(this),this.viewContainerViewClosedEventToken&&(this.app.event("ViewContainerViewClosedEvent").unsubscribe(this.viewContainerViewClosedEventToken),this.viewContainerViewClosedEventToken=null)},t.prototype.handleClickOk=function(e,t,i){return this.viewModel&&(this.promptResult=this.viewModel.promptText.get()),this._deactivateForUser(),!1},t.prototype.handleClickCancel=function(e,t,i){return this.promptResult=null,this._deactivateForUser(),!1},t.prototype._deactivateForUser=function(){this.app.viewManager.deactivateView(this),this.app.viewManager.destroyView(this),this.viewModel&&this.viewModel.callback&&this.viewModel.callback(this.promptResult)},t}(i.ViewBase);t.PromptView=o})},"url:/Mapping/modules/Prompt/PromptView.html":'\r\n<div class="module notification prompt">\r\n    <p class="desc" data-binding="{@text: description}"></p>\r\n    <form data-binding="{@event-onsubmit: handleClickOk}">\r\n        <div class="form-item">\r\n            <input type="text" data-binding="{@value: promptText}" />\r\n        </div>\r\n        <input type="submit" class="bound-invisible" data-binding="{@event-onclick: handleClickOk}" />\r\n    </form>\r\n    <div class="form-btns">\r\n        <button class="button" data-binding="{@var: okButtonElement}{@event-onclick: handleClickOk}{@text: @language-common-ok}" />\r\n        <button class="button" data-binding="{@event-onclick: handleClickCancel}{@text: @language-common-cancel}" />\r\n    </div>\r\n</div>'}}),define(["Mapping/modules/Prompt/PromptModule","Mapping/modules/Prompt/PromptView"],function(e,t){shim(e,"geocortex.essentialsHtmlViewer.mapping.modules.prompt.PromptModule",e.PromptModule),shim(t,"geocortex.essentialsHtmlViewer.mapping.modules.prompt.PromptView",t.PromptView)});