!function(){function e(e,t,l){if("string"==typeof e&&(l=t,t=e),void 0!==l)for(var a=t.split("."),i=null,n=window,r=0,o=a.length;r<o;r++)i=a[r],r==o-1?n[i]=l:n[i]||(n[i]={}),n=n[i];else console.warn("Undefined shim for: "+t)}var t="<ul class='layer-selector-buttons'>    <li><button class='button layer-actions-button' data-binding='{@text: selectAllButtonText}{title: selectAllButtonTitle}{@event-onclick: selectAllLayers}'></button></li>    <li><button class='button layer-actions-button' data-binding='{@text: clearAllButtonText}{title: clearAllButtonTitle}{@event-onclick: clearAllLayers}'></button></li></ul><div class='layer-list'>    <div class='identify-layers' data-binding='{@source: items}{@template: Mapping/modules/LayerSelector/Templates/LayerSelectorItemTemplate.html}'></div></div>",l="<ul class='layers' data-binding='{@template-for: items}'>    <li class='layer'>        <div class='layer-item-expander' data-binding='{@visible: isFolder}'>            <button class='tree-expander' data-binding='{@class-expanded: isExpanded}{@noclass-collapsed: isExpanded}{@event-onclick: handleExpanderClick}{title: expanderTooltip}'></button>        </div>        <div class='layer-info'>            <div class='layer-contents'>                <span class='layer-item-ctrl' data-binding='{@hidden: isFolder}'>                    <input type='checkbox' data-binding='{@value: isEnabled}{checked: isEnabled}{title: stateToggleTooltip}' />                </span>                <span class='layer-item-ctrl layer-list-layer-icon' data-binding='{@visible: iconUri}'><img data-binding='{alt: iconTooltip}{src: iconUri}' /></span>                <span class='display-name' data-binding='{@text: name}'></span>            </div>        </div>        <ul class='layers' data-binding='{@visible: isExpanded}{@source: items}{@template: Mapping/modules/LayerSelector/Templates/LayerSelectorItemTemplate.html}'></ul>    </li></ul>";require({cache:{"Mapping/modules/LayerSelector/LayerSelectorModule":function(){var e=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var l in t)t.hasOwnProperty(l)&&(e[l]=t[l])};return function(t,l){function a(){this.constructor=t}e(t,l),t.prototype=null===l?Object.create(l):(a.prototype=l.prototype,new a)}}();define(["require","exports","geocortex/framework/application/ModuleBase"],function(t,l,a){"use strict";Object.defineProperty(l,"__esModule",{value:!0});var i=function(t){function l(){return null!==t&&t.apply(this,arguments)||this}return e(l,t),l}(a.ModuleBase);l.LayerSelectorModule=i})},"url:/Mapping/modules/LayerSelector/LayerSelectorView.html":t,"url:/Mapping/modules/LayerSelector/Templates/LayerSelectorItemTemplate.html":l}}),require(["geocortex/framework/resourceManager"],function(e){e.resourceManager.register("Mapping","inv","Mapping/modules/LayerSelector/CSS/common.css","css","LmxheWVyLXNlbGVjdG9yLWJ1dHRvbnMgew0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHBhZGRpbmc6IDAuMjVlbSAwOw0KICAgIG1hcmdpbjogMDsNCn0NCi5sYXllci1zZWxlY3Rvci1idXR0b25zIGxpIHsNCiAgICBkaXNwbGF5OiBibG9jazsNCiAgICB3aWR0aDogNTAlOw0KICAgIHBhZGRpbmc6IDAgMC41ZW07DQogICAgZmxvYXQ6IGxlZnQ7DQogICAgbWFyZ2luOiAwOw0KICAgIGxpc3Qtc3R5bGU6IG5vbmU7DQogICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KfQ0KLmxheWVyLWFjdGlvbnMtYnV0dG9uIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9"),e.resourceManager.register("Mapping","inv","Mapping/modules/LayerSelector/LayerSelectorView.html","html",t),e.resourceManager.register("Mapping","inv","Mapping/modules/LayerSelector/Templates/LayerSelectorItemTemplate.html","html",l)}),require({cache:{}}),define(["Mapping/modules/LayerSelector/LayerSelectorModule"],function(t){e(t,"geocortex.essentialsHtmlViewer.mapping.modules.layerSelector.LayerSelectorModule",t.LayerSelectorModule)})}();