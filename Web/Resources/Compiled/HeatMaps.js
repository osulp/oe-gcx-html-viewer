function shim(e,t,a){if("string"==typeof e&&(a=t,t=e),"undefined"==typeof a)return void console.warn("Undefined shim for: "+t);for(var i=t.split("."),n=null,r=window,s=0,l=i.length;s<l;s++)n=i[s],s==l-1?r[n]=a:r[n]||(r[n]={}),r=r[n]}require({cache:{"Mapping/modules/HeatMaps/FieldListItem":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/HeatMaps/GradientOptions":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/HeatMaps/HeatMapsModule":function(){define(["require","exports","geocortex/framework/application/ModuleBase","geocortex/infrastructure/VisualizationUtils","geocortex/infrastructure/ColorUtils"],function(e,t,a,i,n){"use strict";var r;!function(e){e[e.OUTERMOST=0]="OUTERMOST",e[e.OUTER=1]="OUTER",e[e.INNER=2]="INNER",e[e.INNERMOST=3]="INNERMOST"}(r=t.GradientColorType||(t.GradientColorType={}));var s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._allowToggleForUserAddedLayers=!0,t._defaultIntensity=30,t._defaultGradient=["#00FFFFFF","#FF0000FF","#FFFF0000","#FFFFFF00"],t}return __extends(t,e),t.prototype.initialize=function(t){var a=this;if(e.prototype.initialize.call(this,t),!Modernizr.canvas)return void this.app.trace.warning("The heat map module requires a Canvas enabled Browser. IE8 does not support Canvas.");if(null!=t.allowToggleForUserAddedLayers&&(this._allowToggleForUserAddedLayers=t.allowToggleForUserAddedLayers),t.intensity&&(this._defaultIntensity=t.intensity),t.gradientOptions){var i=t.gradientOptions;i.outermostColor&&(this._defaultGradient[r.OUTERMOST]=i.outermostColor),i.outerColor&&(this._defaultGradient[r.OUTER]=i.outerColor),i.innerColor&&(this._defaultGradient[r.INNER]=i.innerColor),i.innermostColor&&(this._defaultGradient[r.INNERMOST]=i.innermostColor)}this.app.map&&this.app.map.loaded?this._handleMapLoaded(this.app.map):this.app.event("MapLoadedEvent").once(this,function(e){a._handleMapLoaded(e)}),this._registerCommandsAndEvents()},t.prototype._handleMapLoaded=function(e){var t=this.app.site;if(t&&t.essentialsMap)for(var a=0;a<t.essentialsMap.mapServices.length;a++){var i=t.essentialsMap.mapServices[a];if(i.heatMap&&i.heatMap.enabled)for(var n=0;n<i.layers.length;n++)this.app.command("AddHeatMap").execute({gcxLayer:i.layers[n],onStartUp:!0})}},t.prototype._registerCommandsAndEvents=function(){this.app.command("AddHeatMap").register(this,this._executeAddHeatMap,this._canExecuteAddHeatMap),this.app.command("RemoveHeatMap").register(this,this._executeRemoveHeatMap,this._canExecuteRemoveHeatMap)},t.prototype._executeAddHeatMap=function(e){var t=this._getGeocortexLayer(e),a=i.getFeatureHeatMap(t),n=this._createHeatMapRenderer(a);if(!n)return void this.app.trace.warning("Could not add heat map for layer with ID '{0}'. Invalid renderer configuration".format(t.id));var r=t.mapService.serviceLayer;return r&&r instanceof esri.layers.GraphicsLayer?(e.onStartUp||this.app.command("RemoveVisualization").execute({gcxLayer:t}),a.enabled=!0,a.respectScaleRange||(a.defaultMaxScale=r.maxScale?r.maxScale:0,a.defaultMinScale=r.minScale?r.minScale:0,r.setMaxScale(0),r.setMinScale(0)),a.defaultRenderer=r.renderer,r.setRenderer(n),this.app.command("AddHeatMap").raiseCanExecuteChanged(),this.app.command("RemoveHeatMap").raiseCanExecuteChanged(),this.app.event("HeatMapAddedEvent").publish(t),void this.app.event("LayerVisualizationChangedEvent").publish(t)):void this.app.trace.warning("Could not add heat map for layer with ID '{0}'. Heat map requires a graphics layer".format(t.id))},t.prototype._canExecuteAddHeatMap=function(e){if("string"!=typeof e&&e.onStartUp)return!0;var t=this._getGeocortexLayer(e);return!!(t&&t.mapService&&t.mapService.heatMap)&&!t.mapService.heatMap.enabled},t.prototype._executeRemoveHeatMap=function(e){var t=this._getGeocortexLayer(e),a=i.getFeatureHeatMap(t),n=t.mapService.serviceLayer;if(!(n&&n instanceof esri.layers.GraphicsLayer))return void this.app.trace.warning("Could not remove heat map for layer with ID '{0}'. Heat map requires a graphics layer".format(t.id));a.enabled=!1;var r=i.getHeatMapRenderer(t);if(r){a.respectScaleRange||(n.setMaxScale(a.defaultMaxScale),n.setMinScale(a.defaultMinScale)),a.intensity=r.blurRadius,a.field=r.field,n.setRenderer(a.defaultRenderer),a.defaultRenderer=null;var s=r._canvas;s.parentNode.removeChild(s),s=null,r=null}this.app.command("AddHeatMap").raiseCanExecuteChanged(),this.app.command("RemoveHeatMap").raiseCanExecuteChanged(),this.app.event("HeatMapRemovedEvent").publish(t),this.app.event("LayerVisualizationChangedEvent").publish(t)},t.prototype._canExecuteRemoveHeatMap=function(e){if("string"!=typeof e&&e.onStartUp)return!0;var t=this._getGeocortexLayer(e);return!!(t&&t.mapService&&t.mapService.heatMap)&&t.mapService.heatMap.enabled},t.prototype._getGeocortexLayer=function(e){if("string"==typeof e){if(!this.app.site||!this.app.site.essentialsMap)return null;var t=this.app.site.essentialsMap.allLayers();return t.filter(function(t){return e===t.mapService.id})[0]}return e.gcxLayer},t.prototype._createHeatMapRenderer=function(e){if(e){var t=this._getHeatMapColors(e),a=new esri.renderer.HeatmapRenderer({colors:t,blurRadius:e.intensity?e.intensity:this._defaultIntensity,field:e.field?e.field:null});if(e.offset){for(var i=[],n=0;n<e.offset.length;n++)i[n]={ratio:e.offset[n],color:t[n]};a.setColorStops(i)}return a}},t.prototype._getHeatMapColors=function(e){var t=this;return 0===e.gradient.length?this._defaultGradient.map(function(e){return n.getStringFromHex(e)}):e.gradient.map(function(e,a){return n.getStringFromList(e)||n.getStringFromHex(t._defaultGradient[a])})},t}(a.ModuleBase);t.HeatMapsModule=s})},"Mapping/modules/HeatMaps/HeatMapsModuleConfig":function(){define(["require","exports"],function(e,t){"use strict"})},"Mapping/modules/HeatMaps/HeatMapsView":function(){define(["require","exports","geocortex/framework/ui/ViewBase"],function(e,t,a){"use strict";var i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.sliderElement=null,t.layerName="",t}return __extends(t,e),t.prototype.attach=function(t){e.prototype.attach.call(this,t),t.selectedLayer.bind(this,this._onSelectedLayerChanged)},t.prototype.added=function(t){e.prototype.added.call(this,t),this._setupJQuerySlider()},t.prototype._onSelectedLayerChanged=function(e){this.layerName=e.displayName,$(this.sliderElement).slider("value",this.viewModel.intensity.get())},t.prototype._setupJQuerySlider=function(){var e=this,a={animate:!1,min:t.SLIDER_MIN_VAL,max:t.SLIDER_MAX_VAL,step:t.SLIDER_STEP_INCREMENT,orientation:"horizontal",value:t.SLIDER_MIN_VAL,change:function(t,a){return e._handleSliderValueChanged(t,a)}};$(this.sliderElement).slider(a);var i=$(this.sliderElement).children(".ui-slider-handle");i.attr("title",this.getResource("language-heat-maps-intensity-slider-tooltip")),i.text(this.getResource("language-heat-maps-intensity-slider-handle"))},t.prototype._handleSliderValueChanged=function(e,t){if(t&&void 0!=t.value){this.viewModel.intensity.set(t.value);var a="{0} {1}: {2} {3}".format(this.layerName,this.app.getResource(this.libraryId,"language-heat-maps-intensity-slider-intensity"),t.value,this.app.getResource(this.libraryId,"language-heat-maps-intensity-slider-pixels"));$(this.sliderElement).children("a").attr("aria-label",a)}},t}(a.ViewBase);i.SLIDER_MIN_VAL=0,i.SLIDER_MAX_VAL=100,i.SLIDER_STEP_INCREMENT=1,t.HeatMapsView=i})},"Mapping/modules/HeatMaps/HeatMapsViewModel":function(){define(["require","exports","geocortex/framework/ui/ViewModelBase","geocortex/framework/observables","geocortex/infrastructure/VisualizationUtils","geocortex/essentials/Field"],function(e,t,a,i,n,r){"use strict";var s=function(e){function t(a,r){var s=e.call(this,a,r)||this;return s._currentHeatMap=null,s.selectedLayer=new i.Observable(null),s.intensity=new i.Observable(null),s.fields=new i.ObservableCollection,s.selectedField=new i.Observable(null),s.disableFields=new i.Observable((!1)),s.selectedLayer.bind(s,function(e){s._currentHeatMap=n.getFeatureHeatMap(e),s._currentHeatMap&&(s.fields.set(s._getNumericFields(e)),s.selectedField.set(s._currentHeatMap.field?s._currentHeatMap.field:t.EMPTY_FIELD),s.intensity.set(s._currentHeatMap.intensity))}),s.fields.bind(s,function(e){s.disableFields.set(s.fields.get().length<2)}),s.selectedField.bind(s,function(e){s._currentHeatMap&&s._currentHeatMap.field!==e&&(s._currentHeatMap.field=e)}),s.intensity.bind(s,function(e){s._currentHeatMap&&s._currentHeatMap.intensity!==e&&(s._currentHeatMap.intensity=e)}),s.app.event("VisualizationViewActivatedEvent").subscribe(s,function(e){s.selectedLayer.set(e)}),s}return __extends(t,e),t.prototype._getNumericFields=function(e){for(var a=e.fields,i=[{name:t.EMPTY_FIELD,displayName:this.app.getResource(this.libraryId,"language-heat-maps-none")}],n=0;n<a.length;n++){var r=a[n];this._isNumericFieldType(r.dataType)&&i.push({name:r.name,displayName:r.displayName})}return 1===i.length&&(i[n].displayName=this.app.getResource(this.libraryId,"language-heat-maps-no-fields")),i},t.prototype._isNumericFieldType=function(e){switch(e){case r.EssentialsFieldTypes.essentialsFieldTypeInteger:case r.EssentialsFieldTypes.essentialsFieldTypeSmallInteger:case r.EssentialsFieldTypes.essentialsFieldTypeSingle:case r.EssentialsFieldTypes.essentialsFieldTypeDouble:return!0}return!1},t}(a.ViewModelBase);s.EMPTY_FIELD="",t.HeatMapsViewModel=s})},"Mapping/modules/HeatMaps/HeatMapVisualizationProvider":function(){define(["require","exports","geocortex/infrastructure/visualization/VisualizationProviderBase","geocortex/infrastructure/VisualizationUtils"],function(e,t,a,i){"use strict";var n=function(e){function t(t,a){var i=e.call(this,t,a)||this;i.displayName=i.app.getResource(a,"language-heat-maps-name");var n={provider:i,name:i.displayName,id:i.displayName};return i.enabledVisualization=n,i.visualizations.push(n),i}return __extends(t,e),t.prototype.canSupport=function(e){return!!Modernizr.canvas&&(!(!e||!e.mapService)&&(e.mapService.heatMap&&e.mapService.heatMap.userCanToggle))},t.prototype.handleCurrentLayerChanged=function(e){if(Modernizr.canvas){var t=i.getFeatureHeatMap(e);this.isEnabled.set(!!t&&t.enabled),this.isSupported.set(!!t&&t.userCanToggle),this.isEnabled.get()&&(this.enabledVisualization=this.visualizations[0])}},t.prototype.handleActivate=function(){this.app.command("AddHeatMap").execute({gcxLayer:this.currentLayer.get()})},t.prototype.handleApply=function(){var e=this.currentLayer.get(),t=i.getFeatureHeatMap(e),a=i.getHeatMapRenderer(e);if(a){var n=!1;a.blurRadius!==t.intensity&&(a.setBlurRadius(t.intensity),n=!0),a.field!==t.field&&(a.setField(t.field),n=!0),n&&e.mapService.serviceLayer.refresh()}},t}(a.VisualizationProviderBase);t.HeatMapVisualizationProvider=n})},"url:/Mapping/modules/HeatMaps/HeatMapsView.html":'<div class="heat-maps form-stacked">\r\n    <h4 class="visualization-title" data-binding="{@text: @language-heat-maps-title}"></h4>\r\n    <div class="form-item">\r\n        <label class="form-label" for="intensity" data-binding="{@text: @language-heat-maps-intensity}"></label>\r\n        <div class="slider-container">\r\n            <div class="slider-label slider-label-min" data-binding="{@text: @language-heat-maps-intensity-slider-min-label}"></div>\r\n            <div class="slider-label slider-label-max" data-binding="{@text: @language-heat-maps-intensity-slider-max-label}"></div>\r\n            <div class="intensity-slider" data-binding="{@var: sliderElement}">\r\n                <div class="slider-label slider-label-current"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class="form-item">\r\n        <label for="field" data-binding="{@text: @language-heat-maps-intensity-multiplier}"></label>\r\n        <select id="field" data-binding="{@source: fields}{@value: selectedField}{@disabled: disableFields}{title: @language-heat-maps-intensity-multiplier}">\r\n            <option data-binding="{@template-for: fields}{@text: displayName}{value: name}"></option>\r\n        </select>\r\n    </div>\r\n</div>'}}),define(["Mapping/modules/HeatMaps/HeatMapsModule","Mapping/modules/HeatMaps/HeatMapsView","Mapping/modules/HeatMaps/HeatMapsViewModel","Mapping/modules/HeatMaps/HeatMapVisualizationProvider"],function(e,t,a,i){shim(e,"geocortex.essentialsHtmlViewer.mapping.modules.heatMaps.GradientColorType",e.GradientColorType),shim(e,"geocortex.essentialsHtmlViewer.mapping.modules.heatMaps.HeatMapsModule",e.HeatMapsModule),shim(t,"geocortex.essentialsHtmlViewer.mapping.modules.heatMaps.HeatMapsView",t.HeatMapsView),shim(a,"geocortex.essentialsHtmlViewer.mapping.modules.heatMaps.HeatMapsViewModel",a.HeatMapsViewModel),shim(i,"geocortex.essentialsHtmlViewer.mapping.modules.heatMaps.HeatMapVisualizationProvider",i.HeatMapVisualizationProvider)});